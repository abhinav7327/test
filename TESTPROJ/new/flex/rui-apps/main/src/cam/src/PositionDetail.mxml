<?xml version="1.0" encoding="utf-8"?>

<!-- MXML module for displaying the Movements causing a specific balance position.  -->
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" xmlns:cntrls="com.nri.rui.core.controls.*" percentWidth="100" percentHeight ="100" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" creationComplete="init()">
    <mx:Script>
        <![CDATA[
            import com.nri.rui.core.utils.XenosStringUtils;
            import mx.binding.utils.BindingUtils;
            import mx.collections.ArrayCollection;
            import com.nri.rui.core.controls.XenosAlert;
            import mx.managers.FocusManager;
            import mx.managers.PopUpManager;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
            import mx.controls.Alert;
            import com.nri.rui.core.Globals;
           
            [Bindable]private var summaryResult:ArrayCollection = new ArrayCollection;
            
            [Bindable]private var accountNo : String = "";
            [Bindable]private var movementBasis : String= "";
            [Bindable]private var instPk : String= "";
            [Bindable]private var baseDate:String= "";
            [Bindable]private var balanceFlag:String= "";
                          
            public var o:Object = {};
            
            /**
             * Extracts the parameters and set them to some variables for query criteria from the Module Loader Info.
             * 
             */ 
            public function parseUrlString():void {
                try {
                    // Remove everything before the question mark, including
                    // the question mark.
                    var myPattern:RegExp = /.*\?/; 
                    var s:String = this.loaderInfo.url.toString();
                    s = s.replace(myPattern, "");
                    // Create an Array of name=value Strings.
                    var params:Array = s.split(Globals.AND_SIGN); 
                     // Print the params that are in the Array.
                    var keyStr:String;
                    var valueStr:String;
                    var paramObj:Object = params;
                  
                    // Set the values of the salutation.
                    for (var i:int = 0; i < params.length; i++) {
                        var tempA:Array = params[i].split("=");  
                        if (tempA[0] == "accountNo") {
                            accountNo = tempA[1];
                        } else if (tempA[0] == "instPk") {
                            instPk = tempA[1];
                        } else if (tempA[0] == "movementBasis") {
                            movementBasis = tempA[1];
                        } else if (tempA[0] == "baseDate") {
                            baseDate = tempA[1];
                        } else if (tempA[0] == "balanceFlag") {
                            balanceFlag = tempA[1];
                        }
                    }
                } catch (e:Error) {
                    trace(e);
                }
               
            }
            /**
             * Initializes the module and send the submit request.
             * 
             */     
            private function init():void{
                
                parseUrlString();
                
                var rndNo:Number = Math.random();
                httpService.url= "cam/camMovementQueryDispatch.action?rnd=" + rndNo;
               
                var req : Object = new Object();
                req.method="runQueryFromOutSide";
                req.accountNo=accountNo;
                req.movementBasis=movementBasis;
                req.instPk=instPk;
                req.baseDate=baseDate;
                req.balanceFlag=balanceFlag;              
            	httpService.request=req;
                
                httpService.send();
                PopUpManager.centerPopUp(this);
            }
            /**
             * Error Handler for the submit request.
             * 
             */ 
            private function httpService_fault(evt:FaultEvent):void {
                XenosAlert.error(evt.fault.faultDetail);
            }
            /**
             * Result handler for the submit Request. 
             * 
             */ 
            private function httpService_result(event:ResultEvent):void { 
                //changeColumnOrder(event);              
                if (null != event) {            
                    if(null == event.result.rows){
                        summaryResult.removeAll(); // clear previous data if any as there is no result now.
                        if(null == event.result.XenosErrors){ // i.e. No result but no Error found.
                            errPage.clearError(event); //clears the errors if any
                            XenosAlert.info(this.parentApplication.xResourceManager.getKeyValue('inf.label.query.noresult'));
                        } else { // Must be error
                            errPage.displayError(event);    
                        } 
                        resultHead.text = "";               
                    }else {
                        errPage.clearError(event);   
                        if(event.result.rows.row is ArrayCollection) {
                                summaryResult = event.result.rows.row as ArrayCollection;
                        } else {
                                summaryResult.removeAll();
                                summaryResult.addItem(event.result.rows.row);
                        }
                        qh.setOnResultVisibility();
                        qh.setPrevNextVisibility(Boolean(event.result.rows.prevTraversable),Boolean(event.result.rows.nextTraversable));
                        qh.PopulateDefaultVisibleColumns();
                        resultHead.text = this.movementBasis.toUpperCase() + " " + this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.basemovement');
                    } 
                }else {
                    summaryResult.removeAll();
                    XenosAlert.info(this.parentApplication.xResourceManager.getKeyValue('inf.label.query.noresult'));
                }                
            }
            /**
             * Extract the value of the colum cell removing the prefix added at '0'th index.
             */ 
            private function extractPrecisionedValue(item:Object, column:DataGridColumn):String{
                var strData:String = item[column.dataField];
                if(!XenosStringUtils.isBlank(strData) && strData.charAt(0)=="F"){
                    if(strData.length == 1)
                        return XenosStringUtils.EMPTY_STR;
                    else
                        return strData.substring(1);
                }else{
                    return item[column.dataField];                    
                }
            }
        ]]>
    </mx:Script>
    <mx:Script source="actionscripts/PositionDetail.as"/>


    <cntrls:XenosHTTPService id="httpService" 
            useProxy="false"
            fault="httpService_fault(event);"
            result="httpService_result(event)" showBusyCursor="true" >
           <!-- <mx:request >
                <method>runQueryFromOutSide</method>
                <accountNo>{accountNo}</accountNo>
                <movementBasis>{movementBasis}</movementBasis>
                <instPk>{instPk}</instPk>
                <baseDate>{baseDate}</baseDate>
                <balanceFlag>{balanceFlag}</balanceFlag>                 
            </mx:request> -->
     </cntrls:XenosHTTPService>
    
    <mx:VBox width="100%" height="100%" id="rslt" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">        
        
        <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none" paddingLeft="10" paddingRight="10"/>
        <cntrls:QueryResultHeader id="qh" pdfFunction="generatePdf" xlsFunction="generateXls" printFunction="doPrint" previousFunction="doPrev" nextFunction="doNext" visible="true" startIndex="0" />
        <mx:Label textAlign="center" width="100%" fontWeight="bold" id="resultHead" text=""/>
        <mx:DataGrid id="SummaryResult" dataProvider="{this.summaryResult}" width="100%" height="100%" sortableColumns="false" variableRowHeight="true" horizontalScrollPolicy="on" creationComplete="bindDataGrid()">
            <mx:columns>  
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.fundaccountno')}" dataField="accountPrefix" showDataTips="true" itemRenderer="com.nri.rui.core.renderers.AccountDetailsRenderer"/>
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.fundaccountname')}" dataField="accountName" visible="false"/>
               <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.fund.label.fundcode')}" dataField="fundCode" itemRenderer="com.nri.rui.core.renderers.FundDetailsRenderer"/>
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.securitycodedefault')}" dataField="securityId"  showDataTips="true" itemRenderer="com.nri.rui.core.renderers.InstrumentDetailsRenderer"/>
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.securityname')}" dataField="instrumentName" visible="false"/>
               
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.basedate')}" dataField="baseDateDisp"/>
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.tradedate')}"  dataField="tradeDateDisp"/>
               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.valuedate')}"  dataField="valueDateDisp"/>
               <mx:DataGridColumn resizable="true"  headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.movementdescription')}" dataField="description" visible="true"/>
               <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.quantity')}" dataField="amountDisp" itemRenderer="com.nri.rui.core.renderers.NegativeNumberRenderer" labelFunction="extractPrecisionedValue"/>
               <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.price')}" dataField="formattedPrice" itemRenderer="com.nri.rui.core.renderers.NegativeNumberRenderer" labelFunction="extractPrecisionedValue"/>                       
               <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.balance')}" dataField="balanceDisp" itemRenderer="com.nri.rui.core.renderers.NegativeNumberRenderer" labelFunction="extractPrecisionedValue"/>
               <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.principalamount')}"  dataField="principalAmount" itemRenderer="com.nri.rui.core.renderers.NegativeNumberRenderer" labelFunction="extractPrecisionedValue" />
               <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.refno')}" dataField="transactionRefNo" itemRenderer="com.nri.rui.cam.renderers.CamTransactionDetailRenderer" />
               <!--mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.movementquery.label.form')}" dataField="form" visible="false"/>
               <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('cam.cashsecurity.label.accountbalancetype')}" dataField="accountBalanceTypeDesc" visible="false"/-->               
            </mx:columns>
         </mx:DataGrid>
     
     </mx:VBox>
</mx:Module>

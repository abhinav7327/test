<?xml version="1.0" encoding="utf-8"?>

<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:flexlib="http://code.google.com/p/flexlib/"
		   layout="vertical"
		   xmlns:cntrls="com.nri.rui.core.controls.*"
		   xmlns:controls="*"
		   width="100%"
		   height="100%"
		   creationComplete="submitQueryResult()">

	<mx:Script>
		<![CDATA[
			import com.nri.rui.core.utils.ProcessResultUtil;
			import mx.collections.XMLListCollection;
			import com.nri.rui.core.containers.SummaryPopup;
			import mx.rpc.events.ResultEvent;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import com.nri.rui.core.controls.XenosAlert;
			import com.nri.rui.core.utils.XenosPopupUtils;
			import mx.utils.StringUtil;
			private var sortUtil: ProcessResultUtil= new ProcessResultUtil();
			
			
			[Bindable]
			private var contractPkStr:String;
			[Bindable]
			private var queryResult:ArrayCollection = new ArrayCollection();
			
			
			
			public function submitQueryResult():void
			{
				parseUrlString();
				var requestObj:Object = new Object();
				requestObj.method = 'submitQuery';
				requestObj.contractPK = contractPkStr;
				requestObj.SCREEN_KEY = 11103;
				ActionHistoryDetailRequest.request = requestObj;
				ActionHistoryDetailRequest.send();
				PopUpManager.centerPopUp(this);
			}
			
			public function parseUrlString():void
			{
				try
				{
					// Remove everything before the question mark, including
					// the question mark.
					var myPattern:RegExp = /.*\?/;
					var s:String = this.loaderInfo.url.toString();
					s = s.replace(myPattern, "");
					// Create an Array of name=value Strings.
					var params:Array = s.split("&");
					// Print the params that are in the Array.
					var keyStr:String;
					var valueStr:String;
					var paramObj:Object = params;
					// Set the values of the salutation.
					for (var i:int = 0; i < params.length; i++)
					{
						var tempA:Array = params[i].split("=");
						if (tempA[0] == "contractPK")
						{
							contractPkStr = tempA[1];
						}
					}
				}
				catch (e:Error)
				{
					trace(e);
				}
			}
			
			/**
			 * This method works as the result handler of the Submit Query Http Services.
			 *
			 */
			public function LoadResultPage(event:ResultEvent):void
			{
				var rs:XML = XML(event.result);
			
				if (null != event) {
					if(rs.child("row").length()>0) {
						errPage.clearError(event);
			            queryResult.removeAll();
						try {
						    for each ( var rec:XML in rs.row ) {
			 				    queryResult.addItem(rec);
						    }
						    
						    //changeCurrentState();
				            qh.setOnResultVisibility();
				            qh.setPrevNextVisibility((rs.prevTraversable == "true")?true:false,(rs.nextTraversable == "true")?true:false );
				            qh.PopulateDefaultVisibleColumns();
				            
			     	        //replace null objects in datagrid with empty string
			            	queryResult=ProcessResultUtil.process(queryResult,resultSummary.columns);
			            	queryResult.refresh();
			            	qh.pdf.enabled = false;
			            	qh.xls.enabled = false;
			            	//qh.print.enabled = false;
						}catch(e:Error){
						    //XenosAlert.error(e.toString() + e.message);
						    XenosAlert.error(this.parentApplication.xResourceManager.getKeyValue('inf.label.query.noresult'));
					    }
					 } else if(rs.child("Errors").length()>0) {
		                //some error found
					 	queryResult.removeAll(); // clear previous data if any as there is no result now.
					 	var errorInfoList : ArrayCollection = new ArrayCollection();
		                //populate the error info list 			 	
					 	for each ( var error:XML in rs.Errors.error ) {
			 			   errorInfoList.addItem(error.toString());
						}
					 	errPage.showError(errorInfoList);//Display the error
					 } else {
					 	XenosAlert.info(this.parentApplication.xResourceManager.getKeyValue('inf.label.query.noresult'));
					 	queryResult.removeAll(); // clear previous data if any as there is no result now.
					 	errPage.removeError(); //clears the errors if any
					 }
				
		        }
			}
			
			 private function populateAltSecCode(item:Object,column : DataGridColumn):String{
             	if(item.alternateSecurityId!=null&&StringUtil.trim(item.alternateSecurityId)!=""){
             		return item.alternateSecurityId+"/"+item.alternateInstrumentCodeType;
             	}
             	else{
             		return null;
             	}
            }
            
            
		     private function doPrev():void { 
				var reqObj : Object = new Object();
		        reqObj.method = "doPrevious";
		        reqObj.rnd = Math.random()+"";
		        ActionHistoryDetailRequest.request = reqObj;
		        ActionHistoryDetailRequest.send();
		    }
		    
		    private function doNext():void { 
				var reqObj : Object = new Object();
		        reqObj.method = "doPrevious";
		        reqObj.rnd = Math.random()+"";
		        ActionHistoryDetailRequest.request = reqObj;
		        ActionHistoryDetailRequest.send();
		    }
		    
		    /**
		    * This will generate the Xls report for the entire query result set 
		    * and will open in a separate window.
		    */
		     private function generateXls():void {
		     	
		    } 
		    /**
		    * This will generate the Pdf report for the entire query result set 
		    * and will open in a separate window.
		    */
		     private function generatePdf():void {
		
		    } 
		    /**
		    * This is for the Print button which at a  time will print all the data 
		    * in the dataprovider of the Datagrid object
		    */
		     private function doPrint():void{
		        
		    }
		    
		    /**
             * This method should be called on creationComplete of the datagrid 
             */ 
             private function bindDataGrid():void {
                qh.dgrid = resultSummary;
            }
			
			
			]]>
			</mx:Script>
			
			<cntrls:XenosHTTPService id="ActionHistoryDetailRequest"
							 showBusyCursor="true"
							 method="POST"
							 url="slr/ActionHistoryDetailDispatch.action?"
							 result="LoadResultPage(event)"
							 fault="XenosAlert.error(this.parentApplication.xResourceManager.getKeyValue('slr.label.erroroccured') + event.fault.faultString)"
							 useProxy="false"
							 resultFormat="e4x">
	</cntrls:XenosHTTPService>
	
	<mx:Canvas width="100%" height="100%">
    <mx:VBox width="100%" height="100%" styleName="Padding">
         <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
   	
    		
    	<mx:HBox width="100%">
    		<mx:Box width="100%" paddingRight="1">
    		<cntrls:QueryResultHeader id="qh" pdfFunction="generatePdf" xlsFunction="generateXls" printFunction="doPrint" previousFunction="doPrev" nextFunction="doNext" />
	    		<mx:DataGrid id="resultSummary" dataProvider="{queryResult}" width="100%" height="100%" rowCount="{queryResult.length}" creationComplete="bindDataGrid()">
					<mx:columns>
						<mx:DataGridColumn textAlign="center" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.contract.label.actiontype')}" dataField="actionType" visible="true" sortCompareFunction="sortUtil.sortString" itemRenderer="com.nri.rui.slr.renderers.ActionDetailRenderer"/>
						<mx:DataGridColumn textAlign="center" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.contract.label.valuedate')}" dataField="valueDateStr" sortCompareFunction="sortUtil.sortString" />
						<mx:DataGridColumn textAlign="center" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.action.label.seccode')}"  dataField="securityId"  sortCompareFunction="sortUtil.sortString" />
						<mx:DataGridColumn textAlign="center" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.action.label.alternatesecuritycode')}" labelFunction="populateAltSecCode" sortCompareFunction="sortUtil.sortString" />
						<mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.action.label.rate')}" dataField="rateStr" sortCompareFunction="sortUtil.sortString" />
						<mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.action.label.price')}" dataField="priceStr" sortCompareFunction="sortUtil.sortString" />
						<mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('slr.action.label.principalamt')}" dataField="principalAmountStr" sortCompareFunction="sortUtil.sortString" />
						
					</mx:columns>
				</mx:DataGrid>
        	</mx:Box>
		</mx:HBox>
    </mx:VBox>
     </mx:Canvas>
     </mx:Module>
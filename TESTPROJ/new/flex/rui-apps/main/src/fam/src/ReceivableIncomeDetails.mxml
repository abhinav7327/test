<?xml version="1.0" encoding="utf-8"?>


<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
		   layout="vertical"
		   xmlns:cntrls="com.nri.rui.core.controls.*"
		   width="100%"
		   height="100%"
		   creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import com.nri.rui.core.Globals;
			import com.nri.rui.core.containers.SummaryPopup;
			import com.nri.rui.core.controls.XenosAlert;
			import com.nri.rui.core.controls.XenosHTTPServiceForSpring;
			import com.nri.rui.core.utils.PrintUtils;
			import com.nri.rui.core.utils.ProcessResultUtil;
			import com.nri.rui.core.utils.XenosPopupUtils;
			import com.nri.rui.fam.FamConstants;
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.DataGridEvent;
			import mx.managers.FocusManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;

			[Bindable]
			private var baseDate:String=Globals.EMPTY_STRING;
			[Bindable]
			private var commandFormId:String=Globals.EMPTY_STRING;

			[Bindable]
			private var fundPk:String=Globals.EMPTY_STRING;
			[Bindable]
			private var instrumentPk:String=Globals.EMPTY_STRING;

			[Bindable]
			private var portfolioBalanceQueryCommandForm:Object=null;


			[Bindable]
			private var rcvData:ArrayCollection=new ArrayCollection();

			[Bindable]
			private var tempColl:ArrayCollection=new ArrayCollection();
			private var sortUtil:ProcessResultUtil=new ProcessResultUtil();
			
			/**
			* datagrid header release event handler to handle datagridcolumn sorting
			*/
			public function dataGrid_headerRelease(evt:DataGridEvent):void
			{
				var dg:DataGrid=DataGrid(evt.currentTarget);
				sortUtil.clickedColumn=dg.columns[evt.columnIndex];
			}

			/**
			 * Extracts the parameters and set them to some variables for query criteria from the Module Loader Info.
			 *
			 */
			public function parseUrlString():void
			{
				try
				{
					// Remove everything before the question mark, including
					// the question mark.
					var myPattern:RegExp=/.*\?/;
					var s:String=this.loaderInfo.url.toString();
					s=s.replace(myPattern, "");
					// Create an Array of name=value Strings.
					var params:Array=s.split(Globals.AND_SIGN);
					// Print the params that are in the Array.
					var keyStr:String;
					var valueStr:String;
					var paramObj:Object=params;

					// Set the values of the salutation.
					for (var i:int=0; i < params.length; i++)
					{
						var tempA:Array=params[i].split("=");
						if (tempA[0] == Globals.FUND_PK)
						{
							fundPk=tempA[1];
						}
						if (tempA[0] == Globals.INSTRUMENT_PK)
						{
							instrumentPk=tempA[1];
						}
						if (tempA[0] == Globals.BASE_DATE)
						{
							baseDate=tempA[1];
						}
						if (tempA[0] == Globals.COMMAND_FORM_ID)
						{
							commandFormId=tempA[1];
						}
					}
				}
				catch (e:Error)
				{
					trace(e);
				}

			}

			// Adds the property 'commandFormId' to the object 'obj'
			private function addCommandFormId(parent:XML):void
			{
				var child:XML=<commandFormId>{commandFormId}</commandFormId>
				parent.appendChild(child);
			}

			// Fills 'collection' from 'object'
			private function fillCollection(collection:ArrayCollection, object:Object):void
			{
				if (object != null && object is XMLList)
				{
					var tempList:XMLList=object as XMLList;
					for each (var itemXml:XML in tempList)
					{
						addCommandFormId(itemXml); //Adds the property 'commandFormId'
						collection.addItem(itemXml);
					}
				}
			}

			/**
			 * Error Handler for the submit request.
			 *
			 */
			private function httpService_fault(evt:FaultEvent):void
			{
				XenosAlert.error(evt.fault.faultDetail);
			}

			/**
			 * Result handler for the submit Request.
			 *
			 */
			private function httpService_result(event:ResultEvent):void
			{
				var result:XML=XML(event.result);
				var tmp:XML=XML(result.child("receivableIncomeDetailsPages"));
				errPage.clearError(event);
				rcvData.removeAll();
				tempColl.removeAll();

				for each (var rec:XML in tmp.receivableIncomeDetailsPage)
				{
					tempColl.addItem(rec);
				}
			}

			/**
			 * Initializes the module and send the submit request.
			 *
			 */
			private function init():void
			{
				parseUrlString();
				var rndNo:Number=Math.random();
				httpService.url="fam/portfolioBalanceQuery.spring?rnd=" + rndNo;

				var req:Object=new Object();
				req.method="viewReceivableIncomeDetails";
				req["fundPk"]=this.fundPk;
				req["instrumentPk"]=this.instrumentPk;
				req["baseDateForRcv"]=this.baseDate;
				httpService.request=req;

				httpService.send();
				PopUpManager.centerPopUp(this);
			}

			private function populate(event:ResultEvent):void
			{
				rcvData.removeAll();

			}
		]]>
	</mx:Script>

	<cntrls:XenosHTTPServiceForSpring id="httpService"
									  commandFormId="{commandFormId}"
									  useProxy="false"
									  resultFormat="xml"
									  fault="httpService_fault(event);"
									  result="httpService_result(event)"
									  showBusyCursor="true">
	</cntrls:XenosHTTPServiceForSpring>

	<mx:VBox width="100%"
			 height="0%">
		<mx:HBox width="100%"
				 styleName="ButtonBackPanel"
				 horizontalAlign="right">
			<mx:Button id="Print"
					   styleName="PrintBtnStyle"
					   toolTip="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.print')}"
					   click="PrintUtils.printDetail(this.detail)"/>
		</mx:HBox>
	</mx:VBox>

	<mx:Canvas width="100%"
			   height="100%">
		<mx:VBox width="100%"
				 height="100%"
				 id="detail">

			<cntrls:XenosErrors id="errPage"
								width="100%"
								color="#FF0000"
								backgroundAlpha="0"
								borderStyle="none"
								paddingLeft="10"
								paddingRight="10"/>

			<mx:DataGrid id="receivableIncomeDetails"
						 width="100%"
						 height="100%"
						 sortableColumns="true"
						 variableRowHeight="true"
						 headerRelease="dataGrid_headerRelease(event)"
						 dataProvider="{tempColl}">
				<mx:columns>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.fundcode')}"
									   itemRenderer="com.nri.rui.core.renderers.FundDetailsRenderer"
									   sortCompareFunction="sortUtil.sortString"
									   dataField="fundCodeStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.securitycode')}"
									   itemRenderer="com.nri.rui.core.renderers.InstrumentDetailsRenderer"
									   sortCompareFunction="sortUtil.sortString"
									   dataField="securityCodeStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.basedate')}"
									   sortCompareFunction="sortUtil.sortString"
									   dataField="baseDateStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.eligiblequantity')}"
									   textAlign="right"
									   sortCompareFunction="sortUtil.sortNumeric"
									   dataField="eligibleQuantityStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.allotmentamount')}"
									   textAlign="right"
									   sortCompareFunction="sortUtil.sortNumeric"
									   dataField="allottedAmount"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.executiondate')}"
									   sortCompareFunction="sortUtil.sortString"
									   dataField="executionDateStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.paymentdate')}"
									   sortCompareFunction="sortUtil.sortString"
									   dataField="paymentDateStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.receivableincomelc')}"
									   textAlign="right"
									   sortCompareFunction="sortUtil.sortNumeric"
									   dataField="receivableIncomeLcStr"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('fam.portfoliobalance.result.label.receivableincomebc')}"
									   textAlign="right"
									   sortCompareFunction="sortUtil.sortNumeric"
									   dataField="receivableIncomeBcStr"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
	</mx:Canvas>
</mx:Module>


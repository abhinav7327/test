<?xml version="1.0" encoding="utf-8"?>

<!-- MXML module for Unmatch Operation.  -->
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:cntrls="com.nri.rui.core.controls.*" 
    percentWidth="100" percentHeight ="100" horizontalScrollPolicy="off" 
    verticalScrollPolicy="off" creationComplete="init()">
    <mx:Script>
        <![CDATA[
            import mx.events.CloseEvent;            
            import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        	import com.nri.rui.core.utils.XenosStringUtils;            
            import mx.collections.ArrayCollection;
            import com.nri.rui.core.controls.XenosAlert;            
            import mx.managers.PopUpManager;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;            
            import com.nri.rui.core.Globals;

            [Bindable]private var cashUnmatchViews:ArrayCollection;
            [Bindable]private var cashUnmatchViews1:ArrayCollection;
            [Bindable]
            private var objForm:Object = null;
            
            [Bindable]private var movArray : Array = new Array();
            [Bindable]private var fromPage : String = "";
            [Bindable]private var accNo : String = " ";
                       
            public var usrRmks:String = ""; //for using in the CashAdjust Item renderer.    
		    
		    [Bindable]
		    private var rs:XML = new XML();
		    
		    [Bindable]
		    private var rsUsrConf:XML = new XML();
		    
            /**
             * Extracts the parameters and set them to some variables for query criteria from the Module Loader Info.
             * 
             */ 
            public function parseUrlString():void {
                try {
                    // Remove everything before the question mark, including
                    // the question mark.
                    var myPattern:RegExp = /.*\?/; 
                    var s:String = this.loaderInfo.url.toString();
                    s = s.replace(myPattern, "");
                    // Create an Array of name=value Strings.
                    var params:Array = s.split(Globals.AND_SIGN); 
                     // Print the params that are in the Array.
                    var keyStr:String;
                    var valueStr:String;
                    var paramObj:Object = params;
                  
                    // Set the values of the salutation.
                    for (var i:int = 0; i < params.length; i++) {
                        var tempA:Array = params[i].split("=");  
                        if (tempA[0] == "movArray") {
                            movArray = tempA[1].split(",");
                        }else if(tempA[0] == "fromPage"){
                            fromPage = tempA[1];
                        } 
                    }                    

                } catch (e:Error) {
                    trace(e);
                }               
            }
            /**
             * Initializes the module and send the submit request.
             * 
             */     
            private function init():void{
                
                parseUrlString();
                
                var rndNo:Number = Math.random();
                initUnmatchUsrCfm.url= "rec/cashReferResultDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.SCREEN_KEY = 11072;
                req.method="showUnmatchConfirm";
                req.movArray=movArray;
                req.fromPage="fromPage";
                initUnmatchUsrCfm.request=req;
                
                initUnmatchUsrCfm.send();
                PopUpManager.centerPopUp(this);
                forceMatchListViewPage.selectedChild = userConfirm;
            }
            /**
             * Error Handler for the submit request.
             * 
             */ 
            private function httpService_fault(evt:FaultEvent):void {                
                XenosAlert.error("Unable to Perform the requested operation." + evt.fault.faultString + evt.fault.faultDetail);
            }            
           
            /**
             * Go back to the previous page with the modifications done.
             * 
             */  
            private function backDtlQuery(event:MouseEvent):void{
                
                this.parentDocument.dispatchEvent(new Event("RefreshChanges"));   
                this.parentDocument.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
            }
            
            /**
             * Error Handler for the submit request.
             * 
             */ 
            private function usrCnfrm_fault(evt:FaultEvent):void {
            	if(submitCnf!=null)  
            	{
            		submitCnf.enabled=true;            		
            	}
                XenosAlert.error("Unable to Perform the requested operation." + evt.fault.faultString + evt.fault.faultDetail);
            }
            /**
             * Result handler for the submit Request. 
             * 
             */ 
            private function usrCnfrm_result(event:ResultEvent):void {     
            	if(submitCnf!=null)  
            	{
            		submitCnf.enabled=true;            		
            	}
		 		rsUsrConf = XML(event.result);
                var tempResult:ArrayCollection = new ArrayCollection();     
		 		if (null != event) {
		 			if(rsUsrConf.child("Errors").length()>0){ 
						// i.e. Must be error, display it .
						var errorInfoList : ArrayCollection = new ArrayCollection();
						//populate the error info list 			 	
						for each ( var error:XML in rsUsrConf.Errors.error ) {
							errorInfoList.addItem(error.toString());
						}
						errPage.showError(errorInfoList);//Display the error
						//Disable the submit button if there is error
						this.submitCnf.enabled = false;
			      	}else {
			      	 	errPage.removeError();	 
                        objForm = rsUsrConf;
                       
                        if(XenosStringUtils.equals("userConfirm",objForm.modeOfOperation)){
                            forceMatchListViewPage.selectedChild = userConfirm;
                            parentDocument.title = "Unmatch" + " " + this.parentApplication.xResourceManager.getKeyValue('inf.title.entry.user.confirmation');
                        }else if(XenosStringUtils.equals("systemConfirm",objForm.modeOfOperation)){
                            forceMatchListViewPage.selectedChild = userConfirm;
                            parentDocument.title = "Unmatch" + " " + this.parentApplication.xResourceManager.getKeyValue('inf.title.entry.system.confirmation');
                            currentState = "confirm";
                            parentDocument.showCloseButton = false;
                        }                       
                                        
                        
					    for each ( var rec:XML in rsUsrConf.cashUnmatchViews.cashUnmatchView ) {
		 				    tempResult.addItem(rec);
					    }
                        cashUnmatchViews1 = tempResult;
                       
                        if(cashUnmatchViews1.length == 0){
                        	XenosAlert.info("No Records to Submit.");
                        }
                    } 
                }else {
                    cashUnmatchViews1.removeAll();
                    XenosAlert.info("No Results Found !");
                }
                       
            }
            /**
             * Request for submitUserConfirm i.e. for System confirmation
             * 
             */ 
            private function submitUserConfirm(event:MouseEvent):void{
            	submitCnf.enabled=false;
                var rndNo:Number = Math.random();
                var reqObj:Object = new Object();
                reqObj.SCREEN_KEY = 11073;
                reqObj.method = "submitUnmatchConfirm";
                viewUnmatchUsrCfm.url= "rec/cashReferResultDispatch.action?rnd=" + rndNo;
                viewUnmatchUsrCfm.request = reqObj;
                viewUnmatchUsrCfm.send();
            }
            
            /**
             * Request for the System Confirmation completion.
             * 
             */  
            private function submitSysConfirm(event:MouseEvent):void{
                var rndNo:Number = Math.random();
                UnmatchSysCfm.url= "rec/cashReferResultDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.method="submitSysConfirm";
                UnmatchSysCfm.request=req;
                
                UnmatchSysCfm.send();
            }
            /**
             * Extract the value of the colum cell removing the prefix added at '0'th index.
             */ 
            private function getAccountNo(item:Object, column:AdvancedDataGridColumn):String{
              	 return accNo;
            }
            /**
             * Result handler for the System Confirmation completion. 
             * After System Confirmation completion we need to go back to the Query page.
             * 
             */ 
            private function sysOkCnfrm_result(event:ResultEvent):void {                 
                if(null != event){
                    if(null == event.result.recCashReferResultActionForm){
                        if(null == event.result.XenosErrors){ // i.e. No result but no Error found.
                            errPage.clearError(event); //clears the errors if any
                            XenosAlert.info("No Result Found !");
                        } else { // Must be error
                            errPage.displayError(event);    
                        }          
                    }
                    this.parentDocument.dispatchEvent(new Event("OkSystemConfirm"));
                    this.parentDocument.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
                }      
            }   
            
			/**
             * Extract the value of the colum cell removing the prefix added at '0'th index.
             */ 
            private function extractPrecisionedValue(item:Object, column:AdvancedDataGridColumn):String{
                var strData:String = item[column.dataField];
                if(!XenosStringUtils.isBlank(strData) && strData.charAt(0)=="F"){
                    if(strData.length == 1)
                        return XenosStringUtils.EMPTY_STR;
                    else
                        return strData.substring(1);
                }else{
                    return item[column.dataField];                    
                }
            }   
            
             /**
             * Refresh the results when return to this window.
             */             
            public function refreshData(event:MouseEvent):void{
                var rndNo:Number = Math.random();
                backFromUnmatchUsrCfm.url= "rec/cashReferResultDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.method="backUnmatchConfirm";
                this.parentDocument.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
                backFromUnmatchUsrCfm.request=req;
                
                backFromUnmatchUsrCfm.send();
            }   
            
            
            /**
             * Just for supprot Server side implementation
             * Blank method
             * 
             */ 
            private function usrCnfrm_result_blank(evt:ResultEvent):void {
            }   
            /**
             * Label Function for the matchStatus column in the result.
             * 
             */   
            private function getMatchStatus(item:Object, column:AdvancedDataGridColumn):String {
                if(item.matchStatus == "UNMATCHED"){                   
                   return "UNMATCHED";
                }else if(item.matchStatus == "UNPAIRED"){                   
                   return "UNPAIRED";
                }else if(item.matchStatus == "FORCE_MATCHED"){                   
                   return "FORCE MATCHED";
                }else if(item.matchStatus == "MATCHED"){                   
                   return " ";
                }else{
                    return "";
                }
                
            }
        ]]>
    </mx:Script>
    
    <mx:states>
        <mx:State name="confirm">
            <mx:SetProperty target="{submitCnf}" name="includeInLayout" value="false"/>
            <mx:SetProperty target="{submitCnf}" name="visible" value="false"/>
            <mx:SetProperty target="{backCnf}" name="includeInLayout" value="false"/>
            <mx:SetProperty target="{backCnf}" name="visible" value="false"/>
            <mx:SetProperty target="{hb}" name="includeInLayout" value="true"/>
            <mx:SetProperty target="{hb}" name="visible" value="true"/>
            <mx:SetProperty target="{okCnf}" name="includeInLayout" value="true"/>
            <mx:SetProperty target="{okCnf}" name="visible" value="true"/>
        </mx:State>
    </mx:states> 
     
     <cntrls:XenosHTTPService id="initUnmatchUsrCfm"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="usrCnfrm_result(event)" showBusyCursor="true"   resultFormat="xml">
     </cntrls:XenosHTTPService>     
     <cntrls:XenosHTTPService id="backFromUnmatchUsrCfm" url="rec/cashReferResultDispatch.action?"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="usrCnfrm_result_blank(event)" showBusyCursor="true"   resultFormat="xml">  
     </cntrls:XenosHTTPService>
     <cntrls:XenosHTTPService id="viewUnmatchUsrCfm"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="usrCnfrm_result(event)" showBusyCursor="true"   resultFormat="xml">
     </cntrls:XenosHTTPService>
     <cntrls:XenosHTTPService id="UnmatchSysCfm"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="sysOkCnfrm_result(event)" showBusyCursor="true">
     </cntrls:XenosHTTPService>
    
 <mx:VBox width="100%" height="100%" id="adjustment" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        
        <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none" paddingLeft="10" paddingRight="10"/>
           
        <mx:ViewStack id="forceMatchListViewPage" width="100%" height="100%" >  
            
            <mx:VBox width="100%" height="100%" id="userConfirm" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
              <mx:HBox id="hb" styleName="ButtonBackPanel" verticalGap="0" horizontalGap="0" width="100%" height="32" visible="false" verticalAlign="middle" includeInLayout="false">
	    		<mx:Image source="@Embed('../../assets/themes/default/skin/alert_info.png')" width="28" height="28" verticalAlign="middle"/>
	    		<mx:Label text=" Transaction Completed Successfully." fontWeight="bold" selectable="true"/>	
	    	 </mx:HBox>               
                <mx:AdvancedDataGrid id="adjUserConfirmDg" dataProvider="{this.cashUnmatchViews1}" width="100%" height="100%" sortableColumns="false" variableRowHeight="true" wordWrap="true">
                    <mx:groupedColumns> 
                    	<mx:AdvancedDataGridColumn headerText="Bank A/C No" dataField="act" itemRenderer="com.nri.rui.core.renderers.AccountDetailsRendererAdg"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.label.date')}" dataField="date"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.custentrydate')}" dataField="valueDate"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ccy')}" dataField="ccy"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ncmamount')}" dataField="ncmBalDisp" labelFunction="extractPrecisionedValue" textAlign="right"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.custamount')}" dataField="custBalDisp" labelFunction="extractPrecisionedValue" textAlign="right"/>              
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ncmtype')}" dataField="ncmTrn"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ncmrefno')}" dataField="txnRefNo" itemRenderer="com.nri.rui.rec.renderers.NcmTxnDetailsRenderer"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.custtype')}" dataField="custTrn"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.custref')}" dataField="custRef"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.mtchstatus')}" dataField="matchStatus" labelFunction="getMatchStatus" color="#FF0000"/>                   
                                      
                    </mx:groupedColumns>
    			</mx:AdvancedDataGrid>               
                
            <mx:HBox id="hbConfirm" width="100%" styleName="ButtonBackPanel" horizontalAlign="left">            
                <mx:Button id="submitCnf" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" styleName="BtnStyle" click="submitUserConfirm(event)"/>               
                <mx:Button id="backCnf" label="{this.parentApplication.xResourceManager.getKeyValue('rec.form.button.label.back')}" styleName="BtnStyle" click="refreshData(event)"/>
                <mx:Button id="okCnf" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.ok')}" styleName="BtnStyle" click="submitSysConfirm(event)" visible="false" includeInLayout="false"/>
            </mx:HBox>               	
           </mx:VBox>   
             
        </mx:ViewStack>    
    </mx:VBox>
</mx:Module>

<?xml version="1.0" encoding="utf-8"?>

<!--Mxml file for Cam Movement Query Implementation -->
 
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.nri.rui.core.containers.*" xmlns:flexlib="http://code.google.com/p/flexlib/" xmlns:cntrls="com.nri.rui.core.controls.*" xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" layout="vertical" percentWidth="100" percentHeight ="100" horizontalScrollPolicy="off" verticalScrollPolicy="off" creationComplete="loadAll()">

    <mx:Script>
        <![CDATA[
        	import mx.events.DataGridEvent;
            import com.nri.rui.core.utils.XenosStringUtils;
            import mx.containers.TitleWindow;
            import mx.collections.ArrayCollection;
            import mx.events.CloseEvent;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.controls.CheckBox;
            import mx.managers.PopUpManager;
            
            import com.nri.rui.core.controls.XenosAlert;
            
            private function changeCurrentState():void{
                currentState = "result";
            }
            
            /**
 			*  datagrid header release event handler to handle datagridcolumn sorting
 			*/
			public function dataGrid_headerRelease(evt:DataGridEvent):void {				
				var dg:DataGrid = DataGrid(evt.currentTarget);
                sortUtil.clickedColumn = dg.columns[evt.columnIndex];	
			}
            
        ]]>
    </mx:Script>
    
    <mx:Script source="actionscripts/ReRecon.as"/>
   
    <mx:states>
    	<mx:State name="result">
            <mx:SetProperty target="{qry}" name="width" value="0%"/>
            <mx:SetProperty target="{rslt}" name="width" value="100%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{resultSubmit}"/>
        </mx:State>
        <mx:State name="qryres">
            <mx:SetProperty target="{qry}" name="width" value="50%"/>
            <mx:SetProperty target="{rslt}" name="width" value="50%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
        <mx:State name="">
        	<mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
    </mx:states>
    <!-- Define Transition array with one Transition object.-->
    <mx:transitions>
        <!-- A transition for changing from any state to any state. -->
        <mx:Transition id="qryTransition" fromState="*" toState="*">
            <!-- Define a Parallel effect as the top-level effect.-->
            <mx:Parallel id="t1" targets="{[qry,rslt]}">
                <!-- Define a Move and Resize effect.-->
                <mx:Move  duration="400"/>
                
            </mx:Parallel>
        </mx:Transition>
    </mx:transitions>

    <cntrls:XenosHTTPService id="initializeReReconQuery" fault="XenosAlert.error('Error Occured Initialize :  ' + event.fault.faultString)" 
             method="POST" useProxy="false" result="initPage(event)" showBusyCursor="true"/> 
             
    <cntrls:XenosHTTPService id="loadBankAndBankAccountForFund" fault="XenosAlert.error('Error Occured  :  ' + event.fault.faultDetail)" url="rec/recXenosReReconcile.action?method=loadBankAndBankAccountFromFund"
             result="populateBankAndBankAccount(event)" showBusyCursor="true" resultFormat="xml"/>        
    
    <cntrls:XenosHTTPService id="loadBankAccount" fault="XenosAlert.error('Error Occured  :  ' + event.fault.faultDetail)" url="rec/recXenosReReconcile.action?method=loadBankAccountFromBank"
             result="populateBankAccount(event)" showBusyCursor="true" resultFormat="xml"/>   

    <cntrls:XenosHTTPService id="cashReconQueryRequest" 
         url="rec/recXenosReReconcile.action?" 
         fault="XenosAlert.error('Error Occured :  ' + event.fault.faultString)"
         result="LoadSummaryPage(event)" showBusyCursor="true" resultFormat="xml">
   
    </cntrls:XenosHTTPService>
    <cntrls:XenosHTTPService id="cashReconConfirmQueryRequest" 
         url="rec/recXenosReReconcile.action?method=showResult" 
         fault="XenosAlert.error('Error Occured :  ' + event.fault.faultString)"
         result="LoadConfirmationOueryPage(event)" showBusyCursor="true">
    </cntrls:XenosHTTPService>
    
    
    <cntrls:XenosHTTPService id="cashReconResetQueryRequest" url="rec/recXenosReReconcile.action?method=resetQuery"
        result="initPage(event)" showBusyCursor="true">
    </cntrls:XenosHTTPService>
    
    
    <mx:Validator source="{dateFrom}" required="true" property="text" />
    <mx:Validator source="{dateTo}" required="true" property="text" />
    
    <mx:VBox width="100%" verticalGap="0" horizontalGap="0">    
    <mx:HBox width="100%" styleName="ExCoBgPanel">
    	<mx:Image source="@Embed('../../assets/img/show_query.png')" toolTip="Query" buttonMode="true" click="currentState='';app.submitButtonInstance = submit;" />    	
    	<mx:Image source="@Embed('../../assets/img/show_result.png')" toolTip="Result" buttonMode="true" click="currentState='result'" />
    	<mx:Image source="@Embed('../../assets/img/show_query_result.png')" toolTip="QueryResult" buttonMode="true" click="currentState='qryres'"/>    	
    </mx:HBox>
    <mx:HRule strokeColor="#d2d9dc" strokeWidth="1" width="100%" />
    </mx:VBox>
    
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
    
    <mx:VBox width="100%" height="100%">    
    <mx:HDividedBox id="hdbox1" styleName="Padding4" width="100%" height="100%" liveDragging="true" creationComplete="initPageStart()">
        <mx:VBox label="Query Criteria" width="100%" height="100%" id="qry" styleName="HDivideStyle" >
            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('inf.title.search.criteria')}" fontWeight="bold"/>
            <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
            <mx:HRule strokeColor="#94acb7" strokeWidth="2" width="100%" />
                <mx:Grid width="100%" borderThickness="0">
                    <mx:GridRow width="100%">
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.datefrom')}" styleName="ReqdLabel" />
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
                            <mx:HBox width="100%">
                                   <mx:DateField id="dateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
                                   <mx:DateField id="dateTo" formatString="YYYYMMDD" editable="true" width="90"/>
                            </mx:HBox>
                        </mx:GridItem> 
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.accountno')}" />
                        </mx:GridItem>
                        <mx:GridItem id="grdItem" width="30%" borderThickness="0">
					 		<xenospopup:AccountPopUpHbox id="stlAccForFundPopUp" retContextItem="{returnContextItem}" recContextItem="{stlAccForFundContextList}" />
					 	</mx:GridItem>
                        
                    </mx:GridRow>
                    
              
                    <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
					 		<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.fund.label.fundcode')}" />
					 	</mx:GridItem>
					 	<mx:GridItem width="30%" borderThickness="0">
					 		<xenospopup:FundPopUpHbox id="fundPopUp" focusOut="inputHandler();"/>
					 	</mx:GridItem>
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.bank')}" />
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
					 		<xenospopup:finInstForFundPopUpHBox id="fininstPopUp" retContextItem="{returnFinContext}" recContextItem="{finContextList}"/>
					 	</mx:GridItem>
                        
                    </mx:GridRow>
                    
              
                    <mx:GridRow width="100%">
                    	<mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.officeid')}"/>
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
                        <mx:ComboBox id="officeId" labelField="label" prompt="Select"/>
                        </mx:GridItem> 
                        
                    </mx:GridRow>
                    
                </mx:Grid>                  
            
           
            <mx:HBox width="100%" styleName="ButtonBackPanel">            
                <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submit" styleName="BtnStyle" click="this.submitQuery();" />
                <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.reset')}" styleName="BtnStyle"  click="this.resetQuery();"/>                    
            </mx:HBox>
            
        </mx:VBox>
        <mx:VBox width="0%" height="100%" id="rslt" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="HDivideStyle" >            
                             
	        <cntrls:QueryResultHeader id="qh" pdfFunction="generatePdf" xlsFunction="generateXls" printFunction="doPrint" previousFunction="doPrev" nextFunction="doNext" width="100%" />
	        <mx:Label textAlign="center" width="100%" fontWeight="bold" id="resultHead" text=""/>
	        <mx:DataGrid id="movementSummary" width="100%" height="100%" dataProvider="{summaryResult}" sortableColumns="true" variableRowHeight="true" horizontalScrollPolicy="auto" creationComplete="bindDataGrid()" headerRelease="dataGrid_headerRelease(event)">
	            <mx:columns> 
	               <mx:DataGridColumn textAlign="center" headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.label.select')}" dataField="othersArray" width="40" draggable="false" resizable="false" itemRenderer="com.nri.rui.core.renderers.SelectItem" headerRenderer="com.nri.rui.core.renderers.SelectAllItem" sortable="false"/>
	               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.date')}" dataField="asOfDateDisp" width="200" sortCompareFunction="sortUtil.sortString"/>
	               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.fund.label.fundcode')}" dataField="fundCode" width="200" itemRenderer="com.nri.rui.core.renderers.FundDetailsRenderer" sortCompareFunction="sortUtil.sortString"/>
	               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.bank')}" dataField="bank" width="200" itemRenderer="com.nri.rui.core.renderers.FinancialInstitutionDetailsRenderer" sortCompareFunction="sortUtil.sortString"/>
	               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.bankname')}" dataField="bankShortName" width="200" sortCompareFunction="sortUtil.sortString"/>
	               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.cash.re.query.label.accountno')}" dataField="accountNo" width="300" itemRenderer="com.nri.rui.core.renderers.AccountDetailsRenderer" sortCompareFunction="sortUtil.sortString"/>
	               
	            </mx:columns>
	         </mx:DataGrid>  
	         <mx:HBox width="100%" styleName="ButtonBackPanel">            
                <cntrls:XenosButton id="resultSubmit" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" styleName="BtnStyle" click="this.showResult(event);"/>
            </mx:HBox>          
        </mx:VBox>
        
    </mx:HDividedBox>
    
    </mx:VBox>
    
    </mx:Canvas> 
    
</mx:Module>

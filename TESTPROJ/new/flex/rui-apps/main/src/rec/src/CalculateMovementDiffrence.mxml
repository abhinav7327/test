<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:cntrls="com.nri.rui.core.controls.*"
       xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" xmlns:renderers="com.nri.rui.core.renderers.*" creationComplete="init()">
 
    <mx:Script>
        <![CDATA[
        
        import com.nri.rui.core.startup.XenosApplication;
        	import mx.validators.StringValidator;
        	import mx.utils.StringUtil;
            import mx.events.CloseEvent;            
            import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        	import com.nri.rui.core.utils.XenosStringUtils;            
            import mx.collections.ArrayCollection;
            import com.nri.rui.core.controls.XenosAlert;            
            import mx.managers.PopUpManager;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;            
            import com.nri.rui.core.Globals;

            [Bindable]private var queryResult:ArrayCollection =new ArrayCollection();
            
            [Bindable]private var movArray : Array = new Array();
            [Bindable]private var fromPage : String = "";
            [Bindable]private var accNo : String = " ";
            
		    [Bindable]
		    private var rs:XML = new XML();
		    
		    [Bindable]
		    private var rsUsrConf:XML = new XML();
           
           [Bindable]           
           public var indexCounter:int = -1;
           [Bindable]
           public var isIncremented:Boolean = false;
		    
            /**
             * Extracts the parameters and set them to some variables for query criteria from the Module Loader Info.
             * 
             */ 
            public function parseUrlString():void {
                try {
                    // Remove everything before the question mark, including
                    // the question mark.
                    var myPattern:RegExp = /.*\?/; 
                    var s:String = this.loaderInfo.url.toString();
                    s = s.replace(myPattern, "");
                    // Create an Array of name=value Strings.
                    var params:Array = s.split(Globals.AND_SIGN); 
                     // Print the params that are in the Array.
                    var keyStr:String;
                    var valueStr:String;
                    var paramObj:Object = params;
                  
                    // Set the values of the salutation.
                    for (var i:int = 0; i < params.length; i++) {
                        var tempA:Array = params[i].split("=");  
                        if (tempA[0] == "movArray") {
                           // XenosAlert.info("movArray param = " + tempA[1]);
                            movArray = tempA[1].split(",");
                        }else if(tempA[0] == "fromPage"){
                            fromPage = tempA[1];
                        } 
                    }                    

                } catch (e:Error) {
                    trace(e);
                }               
            }
            /**
             * Initializes the module and send the submit request.
             * 
             */     
            private function init():void{
                
                parseUrlString();
                
                var rndNo:Number = Math.random();
                cashRefDtlHttpService.url= "rec/cashReferResultDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.SCREEN_KEY = 11010;
                req.method="calculateMovDiff";
                req.movArray = movArray;
                req.fromPage="fromPage";
                cashRefDtlHttpService.request=req;
                
                cashRefDtlHttpService.send();
                //PopUpManager.centerPopUp(this);
                //XenosAlert.info("UserId :" + event.result.recCashReferResultActionForm.userIdTypeArrayColl.userIdTypeArray);
            }
            /**
             * Error Handler for the submit request.
             * 
             */ 
            private function httpService_fault(evt:FaultEvent):void {                
                XenosAlert.error("Unable to Perform the requested operation." + evt.fault.faultString + evt.fault.faultDetail);
            }
            /**
             * Result handler for the submit Request. 
             * 
             */ 
            private function httpService_result(event:ResultEvent):void {         
		 		rs = XML(event.result);
                var tempResult:ArrayCollection = new ArrayCollection();     
		 		if (null != event) {
		 			if(rs.child("Errors").length()>0){ 
						// i.e. Must be error, display it .
						var errorInfoList : ArrayCollection = new ArrayCollection();
						//populate the error info list 			 	
						for each ( var error:XML in rs.Errors.error ) {
							errorInfoList.addItem(error.toString());
						}
						errPage.showError(errorInfoList);//Display the error
			      	}else {			      		
			      	 	errPage.removeError();
			      	 	
			            queryResult.removeAll();
						try {
						    for each ( var rec:XML in rs.movementDiffrenceList.movementDiffrence ) {
			 				    queryResult.addItem(rec);
						    }
						}catch(e:Error){
				         //XenosAlert.error(e.toString() + e.message);
				         XenosAlert.error("No result found");
			             }	
			      		
			      	}
               }
            }
                 
        ]]>
    </mx:Script>
    <cntrls:XenosHTTPService id="cashRefDtlHttpService" 
            useProxy="false"
            fault="httpService_fault(event);"
            result="httpService_result(event)" showBusyCursor="true"  resultFormat="xml">      
     </cntrls:XenosHTTPService>
   <mx:VBox>   
      <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none" paddingLeft="10" paddingRight="10"/>
      <mx:DataGrid id="resultSummary" width="100%" height="100%" dataProvider="{queryResult}" sortableColumns="true" variableRowHeight="true" horizontalScrollPolicy="auto">
		    <mx:columns>
	               <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.account')}" dataField="accountNo" width="150"/>
                   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ccy')}" dataField="ccyCode"/>
                   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.balanceDiff')}" dataField="diffValueStr" sortable="false" textAlign="right"/>               
		    </mx:columns>
	  </mx:DataGrid>
   </mx:VBox>
      		
</mx:Module>

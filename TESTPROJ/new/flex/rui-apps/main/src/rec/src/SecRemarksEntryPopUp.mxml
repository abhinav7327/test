<?xml version="1.0" encoding="utf-8"?>
<!--



-->

<!-- MXML module for Remarks Entry.  -->
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:cntrls="com.nri.rui.core.controls.*" 
	xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
    percentWidth="100" percentHeight ="100" horizontalScrollPolicy="off" 
    verticalScrollPolicy="off" creationComplete="init()">
    <mx:Script>
        <![CDATA[
        	import com.nri.rui.core.startup.XenosApplication;
        	import mx.validators.StringValidator;
        	import mx.utils.StringUtil;
            import mx.events.CloseEvent;            
            import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        	import com.nri.rui.core.utils.XenosStringUtils;            
            import mx.collections.ArrayCollection;
            import com.nri.rui.core.controls.XenosAlert;            
            import mx.managers.PopUpManager;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;            
            import com.nri.rui.core.Globals;

            [Bindable]private var cashDtlQueryViewsColl:ArrayCollection;
            [Bindable]private var recCashDtlQueryRemarksViews:ArrayCollection =new ArrayCollection();
            [Bindable]
            private var objForm:Object = null;
            [Bindable]
            private var objActQryView:Object = null;
            [Bindable]
            private var objBalQryView:Object = null;
            
		    [Bindable]
		    public var adjdate:String;
		    [Bindable]
		    public var balanceBasis:String;
            
            [Bindable]private var movArray : Array = new Array();
            [Bindable]private var fromPage : String = "";
            
            [Bindable]public var rmksArray : Array ;//= new Array();
            
            [Bindable]public var usrIdArray : Array; // = new Array();
           
            public var reasonCode:String = ""; //for using in the CashAdjust Item renderer.   
		    
		    [Bindable]
		    private var rs:XML = new XML();
		    
		    [Bindable]
		    private var rsUsrConf:XML = new XML();
		    
            [Bindable]
            public var isIncremented:Boolean = false;
           
           [Bindable]           
           public var indexCounter:int = -1;
		    
            /**
             * Extracts the parameters and set them to some variables for query criteria from the Module Loader Info.
             * 
             */ 
            public function parseUrlString():void {
                try {
                    // Remove everything before the question mark, including
                    // the question mark.
                    var myPattern:RegExp = /.*\?/; 
                    var s:String = this.loaderInfo.url.toString();
                    s = s.replace(myPattern, "");
                    // Create an Array of name=value Strings.
                    var params:Array = s.split(Globals.AND_SIGN); 
                     // Print the params that are in the Array.
                    var keyStr:String;
                    var valueStr:String;
                    var paramObj:Object = params;
                  
                    // Set the values of the salutation.
                    for (var i:int = 0; i < params.length; i++) {
                        var tempA:Array = params[i].split("=");  
                        if (tempA[0] == "movArray") {
                            //XenosAlert.info("movArray param = " + tempA[1]);
                            movArray = tempA[1].split(",");
                        }else if(tempA[0] == "fromPage"){
                            fromPage = tempA[1];
                        } 
                    }                    

                } catch (e:Error) {
                    trace(e);
                }               
            }
            /**
             * Initializes the module and send the submit request.
             * 
             */     
            private function init():void{
                
                parseUrlString();
                
                var rndNo:Number = Math.random();
                cashRefDtlHttpService.url= "rec/recXenosSecBalDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.method="showRemarksEntryResult";
                req.movArray=movArray;
                req.fromPage="fromPage";
                req.SCREEN_KEY = 11020;
                cashRefDtlHttpService.request=req;
                
                cashRefDtlHttpService.send();
                PopUpManager.centerPopUp(this);
                remarksEntry.selectedChild = rslt;
                //XenosAlert.info("UserId :" + event.result.recXenosSecBalActionForm.userIdTypeArrayColl.userIdTypeArray);
            }
            /**
             * Error Handler for the submit request.
             * 
             */ 
            private function httpService_fault(evt:FaultEvent):void {                
                XenosAlert.error("Unable to Perform the requested operation." + evt.fault.faultString + evt.fault.faultDetail);
            }
            /**
             * Result handler for the submit Request. 
             * 
             */ 
            private function httpService_result(event:ResultEvent):void {       
		 		rs = XML(event.result);
                var tempResult:ArrayCollection = new ArrayCollection();     
		 		if (null != event) {
		 			if(rs.child("Errors").length()>0){ 
						// i.e. Must be error, display it .
						var errorInfoList : ArrayCollection = new ArrayCollection();
						//populate the error info list 			 	
						for each ( var error:XML in rs.Errors.error ) {
							errorInfoList.addItem(error.toString());
						}
						errPage.showError(errorInfoList);//Display the error
			      	}else {
			      	 	errPage.removeError();	      	 	
                        
                        objForm = rs;
                        
                        if(null == rs.recXenosSecBalActView){ //means Audit Object is null
                            //XenosAlert.info("Security A/C Level View Details Not Found!"); 
                        }else{                          
                            //populate the Transaction Object value
                            objActQryView =  rs.recXenosSecBalActView;
                        }
                        //Handle the Transaction Object  objBalQryView
                        if(null == rs.recXenosSecBalQueryView){ //means Audit Object is null
                            XenosAlert.info("Security Balance Level View Details Not Found!"); 
                        }else{                          
                            //populate the Transaction Object value
                            objBalQryView =  rs.recXenosSecBalQueryView;
                            adjdate = rs.date;
                            balanceBasis = rs.balanceBasis;
                        }
                        /* if(event.result.recXenosSecBalActionForm.remarksEntryList != null && event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem != null){ 
                        	if(event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem is ArrayCollection) {
	                                tempResult = event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem as ArrayCollection;
	                        } else {
	                        		tempResult.removeAll();
	                                tempResult.addItem(event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem);
	                        }
                        } */                                             
                        
					    for each ( var rec:XML in rs.remarksEntryList.remarksEntryListItem ) {
		 				    tempResult.addItem(rec);
					    }
					    
                        cashDtlQueryViewsColl = tempResult;
						usrIdArray = new Array(tempResult.length);
						rmksArray = new Array(tempResult.length);
                        for (var i:int = 0; i < this.cashDtlQueryViewsColl.length; i++) {
                        	//usrIdArray[i] = cashDtlQueryViewsColl[i].userId != null? cashDtlQueryViewsColl[i].userId : XenosStringUtils.EMPTY_STR;
                        	
                        		usrIdArray[i] = XenosStringUtils.EMPTY_STR;
                        	
                        		rmksArray[i] = XenosStringUtils.EMPTY_STR;
                        	
                        }
                                                
                    } 
                }else {
                    cashDtlQueryViewsColl.removeAll();
                    XenosAlert.info("No Results Found");
                }
            }
            
            
            /**
             * Label Function for the matchStatus column in the result.
             * 
             */   
            private function getMatchStatus(item:Object, column:AdvancedDataGridColumn):String {
                if(item.matchStatus == "UNMATCHED"){                   
                   return "UNMATCHED";
                }else if(item.matchStatus == "UNPAIRED"){                   
                   return "UNPAIRED";
                }else if(item.matchStatus == "FORCE_MATCHED"){                   
                   return "FORCE MATCHED";
                }else if(item.matchStatus == "MATCHED"){                   
                   return " ";
                }else{
                    return "";
                }
                
            }
            /**
             * Request for the User Confirmation Page.
             */           
            private function viewUserConfirm(event:MouseEvent):void{
            	// validation for mandatory field 'Remarks'
                    for (var i:int = 0; i < this.rmksArray.length; i++) {
                    	if(StringUtil.trim(this.rmksArray[i].toString().valueOf())== Globals.EMPTY_STRING){  
                    		XenosAlert.info("Please enter Remarks");
                    		return;
                    	}
                    }                    
            	
                var reqObj : Object = new Object();
            	reqObj.method = "viewRemarksEntryUserConfirm";
                reqObj.SCREEN_KEY = 11021;
            	// population of Remarks & User Id array 
            	reqObj['remarksTypeArray'] = this.rmksArray;
            	reqObj['userIdTypeArray'] = this.usrIdArray;
            	
                var rndNo:Number = Math.random();
                cashRefDtlHttpServiceUsrCnfrm.url= "rec/recXenosSecBalDispatch.action?rnd=" + rndNo;
                cashRefDtlHttpServiceUsrCnfrm.request = reqObj;
                cashRefDtlHttpServiceUsrCnfrm.send();
                
            }
            /**
             * Go back to the previous page with the modifications done.
             * 
             */  
            private function backDtlQuery(event:MouseEvent):void{
                
                this.parentDocument.dispatchEvent(new Event("RefreshChanges"));   
                this.parentDocument.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
            }
            
            /**
             * Error Handler for the submit request.
             * 
             */ 
            private function usrCnfrm_fault(evt:FaultEvent):void {
            	if(submitCnf!=null)
            	{
            		submitCnf.enabled=true;
            	}
                XenosAlert.error("Unable to Perform the requested operation." + evt.fault.faultString + evt.fault.faultDetail);
            }
            /**
             * Result handler for the submit Request. 
             * 
             */ 
            private function usrCnfrm_result(event:ResultEvent):void {     
            	if(submitCnf!=null)
            	{
            		submitCnf.enabled=true;
            	}    
		 		rsUsrConf = XML(event.result);
                var tempResult:ArrayCollection = new ArrayCollection();     
		 		if (null != event) {
		 			if(rsUsrConf.child("Errors").length()>0){ 
						// i.e. Must be error, display it .
						var errorInfoList : ArrayCollection = new ArrayCollection();
						//populate the error info list 			 	
						for each ( var error:XML in rsUsrConf.Errors.error ) {
							errorInfoList.addItem(error.toString());
						}
						errPage.showError(errorInfoList);//Display the error
			      	}else {
			      	 	errPage.removeError();	 
                        objForm = rsUsrConf;
                        
                        reasonCode = objForm.reasonCode;
                        
                        
                        if(null == rsUsrConf.recXenosSecBalActView){ //means Audit Object is null
                            //XenosAlert.info("Security A/C Level View Details Not Found!"); 
                        }else{                          
                            //populate the Transaction Object value
                            objActQryView =  rsUsrConf.recXenosSecBalActView;
                        }
                        //Handle the Transaction Object  objBalQryView
                        if(null == rsUsrConf.recXenosSecBalQueryView){ //means Audit Object is null
                            //XenosAlert.info("Security Balance Level View Details Not Found!"); 
                        }else{                          
                            //populate the Transaction Object value
                            objBalQryView =  rsUsrConf.recXenosSecBalQueryView;
                            adjdate = rsUsrConf.date;
                            balanceBasis = rsUsrConf.balanceBasis;
                        }
                        
                        //XenosAlert.info("modeOfOperation : "+objForm.modeOfOperation); 
                        if(XenosStringUtils.equals("userConfirm",objForm.modeOfOperation)){
                        	//XenosAlert.info("Security Balance Level View Details Not Found!"); 
                            remarksEntry.selectedChild = userConfirm;
                            //parentDocument.title="Adjustment Entry - User Confirmation"
                            parentDocument.title = this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.remarks') + " " + this.parentApplication.xResourceManager.getKeyValue('inf.title.entry.user.confirmation');
                        }else if(XenosStringUtils.equals("systemConfirm",objForm.modeOfOperation)){
                            remarksEntry.selectedChild = userConfirm;
                            //parentDocument.title="Adjustment Entry - System Confirmation"
                            parentDocument.title = this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.remarks') + " " + this.parentApplication.xResourceManager.getKeyValue('inf.title.entry.system.confirmation');
                            currentState = "confirm";
                            parentDocument.showCloseButton = false;
                        }
                        
                       /*  if(event.result.recXenosSecBalActionForm.remarksEntryList != null && event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem != null){ 
                        	if(event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem is ArrayCollection) {
	                                tempResult = event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem as ArrayCollection;
	                        } else {
	                        		tempResult.removeAll();
	                                tempResult.addItem(event.result.recXenosSecBalActionForm.remarksEntryList.remarksEntryListItem);
	                        }
                        } */
                                             
                        
					    for each ( var rec:XML in rsUsrConf.remarksEntryList.remarksEntryListItem ) {
		 				    tempResult.addItem(rec);
					    }
                        recCashDtlQueryRemarksViews = tempResult;
                        if(recCashDtlQueryRemarksViews.length == 0)
                            XenosAlert.info("No Result Found !");;
                    } 
                }else {
                    recCashDtlQueryRemarksViews.removeAll();
                    XenosAlert.info("No Results Found");
                }
                       
            }
            /**
             * Request for submitUserConfirm i.e. for System confirmation
             * 
             */ 
            private function submitUserConfirm(event:MouseEvent):void{
            	submitCnf.enabled=false;
                var rndNo:Number = Math.random();
                cashRefDtlHttpServiceSysCnfrm.url= "rec/recXenosSecBalDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.method="submitRemarksEntryConfirm";
                req.SCREEN_KEY = 11022;
                cashRefDtlHttpServiceSysCnfrm.request=req;
                
                cashRefDtlHttpServiceSysCnfrm.send();                
            }
            /**
             * Go back to the user confirmation page.
             */ 
            private function backToUserConfirm(event:MouseEvent):void{                
                remarksEntry.selectedChild = rslt;
                parentDocument.title="Remarks Entry"                
            }
            /**
             * Request for the System Confirmation completion.
             * 
             */  
            private function submitSysConfirm(event:MouseEvent):void{
                var rndNo:Number = Math.random();
                cashRefDtlHttpServiceOkSysCnfrm.url= "rec/recXenosSecBalDispatch.action?rnd=" + rndNo;
                
                var req : Object = new Object();
                req.method="submitSysConfirm";
                cashRefDtlHttpServiceOkSysCnfrm.request=req;
                
                cashRefDtlHttpServiceOkSysCnfrm.send();                 
                               
            }
            /**
             * Result handler for the System Confirmation completion. 
             * After System Confirmation completion we need to go back to the Query page.
             * 
             */ 
            private function sysOkCnfrm_result(event:ResultEvent):void {                 
                if(null != event){
                    if(null == event.result.recXenosSecBalActionForm){
                        if(null == event.result.XenosErrors){ // i.e. No result but no Error found.
                            errPage.clearError(event); //clears the errors if any
                            XenosAlert.info("No Result Found!");
                        } else { // Must be error
                            errPage.displayError(event);
                        }          
                    }
                    this.parentDocument.dispatchEvent(new Event("OkSystemConfirm"));
                    this.parentDocument.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
                }      
            }   
            
			/**
             * Extract the value of the colum cell removing the prefix added at '0'th index.
             */ 
            private function extractPrecisionedValue(item:Object, column:AdvancedDataGridColumn):String{
                var strData:String = item[column.dataField];
                if(!XenosStringUtils.isBlank(strData) && strData.charAt(0)=="F"){
                    if(strData.length == 1)
                        return XenosStringUtils.EMPTY_STR;
                    else
                        return strData.substring(1);
                }else{
                    return item[column.dataField];                    
                }
            }         
        ]]>
    </mx:Script>
    
    <mx:states>
        <mx:State name="confirm">
            <mx:SetProperty target="{submitCnf}" name="includeInLayout" value="false"/>
            <mx:SetProperty target="{submitCnf}" name="visible" value="false"/>
            <mx:SetProperty target="{backCnf}" name="includeInLayout" value="false"/>
            <mx:SetProperty target="{backCnf}" name="visible" value="false"/>
            <mx:SetProperty target="{hb}" name="includeInLayout" value="true"/>
            <mx:SetProperty target="{hb}" name="visible" value="true"/>
            <mx:SetProperty target="{okCnf}" name="includeInLayout" value="true"/>
            <mx:SetProperty target="{okCnf}" name="visible" value="true"/>
        </mx:State>
    </mx:states> 
    
    <cntrls:XenosHTTPService id="cashRefDtlHttpService" 
            useProxy="false"
            fault="httpService_fault(event);"
            result="httpService_result(event)" showBusyCursor="true"  resultFormat="xml">
     <!--       <mx:request >
                <method>showRemarksEntryResult</method>
                <movArray>{movArray}</movArray>
                <fromPage>fromPage</fromPage>
            </mx:request>  -->            
     </cntrls:XenosHTTPService>
     <cntrls:XenosHTTPService id="cashRefDtlHttpServiceRefresh" url="rec/recXenosSecBalDispatch.action?"
            useProxy="false"
            fault="httpService_fault(event);"
            result="httpService_result(event)" showBusyCursor="true"  resultFormat="xml">            
            <!--<mx:request >
                <method>backUserConfirm</method>
            </mx:request>-->
     </cntrls:XenosHTTPService>
     <cntrls:XenosHTTPService id="cashRefDtlHttpServiceUsrCnfrm"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="usrCnfrm_result(event)" showBusyCursor="true"  resultFormat="xml">
          <!--  <mx:request>
                <method>viewRemarksEntryUserConfirm</method>
            </mx:request>  -->
     </cntrls:XenosHTTPService>
     <cntrls:XenosHTTPService id="cashRefDtlHttpServiceSysCnfrm"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="usrCnfrm_result(event)" showBusyCursor="true"  resultFormat="xml">
         <!--   <mx:request>
                <method>submitRemarksEntryConfirm</method>
            </mx:request>  -->
     </cntrls:XenosHTTPService>
     <cntrls:XenosHTTPService id="cashRefDtlHttpServiceOkSysCnfrm"
            useProxy="false"
            fault="usrCnfrm_fault(event);"
            result="sysOkCnfrm_result(event)" showBusyCursor="true">
        <!--    <mx:request>
                <method>submitSysConfirm</method>
            </mx:request>  -->
     </cntrls:XenosHTTPService>
    
    <mx:VBox width="100%" height="100%" id="adjustment" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        
        <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none" paddingLeft="10" paddingRight="10"/>
           
        <mx:ViewStack id="remarksEntry" width="100%" height="100%" >   

            <mx:VBox width="100%" height="100%" id="rslt" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        
                <mx:Grid width="100%" horizontalGap="0" verticalGap="0">
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.balancebasis')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{balanceBasis==null? '' : balanceBasis}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.date')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{adjdate==null? '' : adjdate}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.sec.mov.label.accountno')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.accountNo==null? '' : objBalQryView.accountNo}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.bank')}" styleName="FormLabelHeading"/>
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.bankCode==null? '' : objBalQryView.bankCode}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.officeid')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%" >
		                    <mx:Text text="{objForm.serviceOffice==null? '' : objForm.serviceOffice}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.sec.mov.label.matchingstatus')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.matchStatus==null? '' : objBalQryView.matchStatus}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.securitycode')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%" >
		                    <mx:Text text="{objBalQryView.securityCode==null? '' : objBalQryView.securityCode}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.fundcode')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objActQryView.FundCode==null? '' : objActQryView.fundCode}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.common.label.alternatesecurityid')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%" >
		                    <mx:Text text="{XenosStringUtils.isBlank(objBalQryView.alternateSecurityCodeDisp)? XenosStringUtils.EMPTY_STR : objBalQryView.alternateSecurityCodeDisp}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor"/>
		                <mx:GridItem width="30%"/>
		            </mx:GridRow>
                </mx:Grid>
                
                <mx:AdvancedDataGrid id="adjEntryDg" dataProvider="{this.cashDtlQueryViewsColl}" width="100%" height="100%" sortableColumns="false" variableRowHeight="true" wordWrap="true">
                    <mx:groupedColumns>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.rectype')}" dataField="recType"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.date')}" dataField="asOfDateDisp"/>
		                <mx:AdvancedDataGridColumnGroup headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.amount')}">
		                    <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ncm')}" dataField="ncmQuantityDisp" labelFunction="extractPrecisionedValue"/>
		                    <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.cust')}" dataField="custQuantityDisp" labelFunction="extractPrecisionedValue"/>
		                </mx:AdvancedDataGridColumnGroup>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.difference')}" dataField="differenceDisp" labelFunction="extractPrecisionedValue"/>
		                
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.txnrefno')}" dataField="txnRefNo"/>
		                
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.txntype')}" dataField="txnType"/>
		                
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.mtchstatus')}" dataField="matchStatus" labelFunction="getMatchStatus" color="#FF0000"/>
                        <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.label.remarks')}" editable="true" width="150" itemRenderer="com.nri.rui.rec.renderers.RemarksEntryRenderer"/>
                        
                        <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.label.userId')}" editable="true" width="150" itemRenderer="com.nri.rui.rec.renderers.UserIdForRemarksRenderer" textAlign="center"/>
                   </mx:groupedColumns>
                </mx:AdvancedDataGrid>  
                <mx:HBox width="100%" styleName="ButtonBackPanel" horizontalAlign="left">            
                    <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" styleName="BtnStyle" click="viewUserConfirm(event)"/>
                    <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('rec.form.button.label.back')}" styleName="BtnStyle" click="backDtlQuery(event)"/>
                </mx:HBox>
             
            </mx:VBox>
            
            <mx:VBox width="100%" height="100%" id="userConfirm" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        
              <mx:HBox id="hb" styleName="ButtonBackPanel" verticalGap="0" horizontalGap="0" width="100%" height="32" visible="false" verticalAlign="middle" includeInLayout="false">
	    		<mx:Image source="@Embed('../../assets/themes/default/skin/alert_info.png')" width="28" height="28" verticalAlign="middle"/>
	    		<mx:Label text=" Transaction Completed Successfully." fontWeight="bold" selectable="true"/>	
	    	 </mx:HBox>
                <mx:Grid width="100%" horizontalGap="0" verticalGap="0">
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.balancebasis')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{balanceBasis==null? '' : balanceBasis}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.date')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{adjdate==null? '' : adjdate}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.sec.mov.label.accountno')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.accountNo==null? '' : objBalQryView.accountNo}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.bank')}" styleName="FormLabelHeading"/>
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.bankCode==null? '' : objBalQryView.bankCode}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.officeid')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%" >
		                    <mx:Text text="{objForm.serviceOffice==null? '' : objForm.serviceOffice}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.sec.mov.label.matchingstatus')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.matchStatus==null? '' : objBalQryView.matchStatus}" />
		                </mx:GridItem>
		            </mx:GridRow>
		            
		            <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.securitycode')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%" >
		                    <mx:Text text="{objBalQryView.securityCode==null? '' : objBalQryView.securityCode}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.fundcode')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%">
		                    <mx:Text text="{objBalQryView.FundCode==null? '' : objBalQryView.fundCode}" />
		                </mx:GridItem>
		            </mx:GridRow>
                    <mx:GridRow width="100%">
		                <mx:GridItem width="20%" styleName="LabelBgColor">
		                    <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.common.label.alternatesecurityid')}" styleName="FormLabelHeading" />
		                </mx:GridItem>
		                <mx:GridItem width="30%" >
		                    <mx:Text text="{XenosStringUtils.isBlank(objBalQryView.alternateSecurityCodeDisp)? XenosStringUtils.EMPTY_STR : objBalQryView.alternateSecurityCodeDisp}" />
		                </mx:GridItem>
		                <mx:GridItem width="20%" styleName="LabelBgColor"/>
		                <mx:GridItem width="30%"/>
		            </mx:GridRow>
                </mx:Grid>
                
                
                <mx:AdvancedDataGrid id="adjUserConfirmDg" dataProvider="{this.recCashDtlQueryRemarksViews}" width="100%" height="100%" sortableColumns="false" variableRowHeight="true" wordWrap="true">
                    <mx:groupedColumns>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.rectype')}" dataField="recType"/>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.date')}" dataField="asOfDateDisp"/>
		                <mx:AdvancedDataGridColumnGroup headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.amount')}">
		                    <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.ncm')}" dataField="ncmQuantityDisp"    labelFunction="extractPrecisionedValue"/>
		                    <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.cust')}" dataField="custQuantityDisp"    labelFunction="extractPrecisionedValue"/>
		                </mx:AdvancedDataGridColumnGroup>
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.difference')}" dataField="differenceDisp"   labelFunction="extractPrecisionedValue"/>
		                
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.txnrefno')}" dataField="txnRefNo"/>
		                
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.txntype')}" dataField="txnType"/>
		                
		                <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.cash.label.mtchstatus')}" dataField="matchStatus" labelFunction="getMatchStatus" color="#FF0000"/>
                        <!--<mx:AdvancedDataGridColumn headerText="Remarks" dataField="remarks"/>-->
                        <mx:AdvancedDataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('rec.xenos.sec.bal.label.remarks')}">
         					<mx:itemRenderer>
         						<mx:Component>
         							<mx:VBox maxHeight="100" maxWidth="200" >
         								<mx:TextArea text="{data.remarks}" width="100%" maxHeight="100" editable="false" selectable="true"/>	
         							</mx:VBox>         						
         						</mx:Component>
         					</mx:itemRenderer>
         				</mx:AdvancedDataGridColumn>
                        <mx:AdvancedDataGridColumn headerText="User ID" dataField="userId"/>                     
                    </mx:groupedColumns>
                </mx:AdvancedDataGrid>        
                
                <mx:HBox id="hbConfirm" width="100%" styleName="ButtonBackPanel" horizontalAlign="left">            
                    <mx:Button id="submitCnf" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" styleName="BtnStyle" click="submitUserConfirm(event)"/>
                    <mx:Button id="backCnf" label="{this.parentApplication.xResourceManager.getKeyValue('rec.form.button.label.back')}" styleName="BtnStyle" click="backToUserConfirm(event)"/>
                    <mx:Button id="okCnf" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.ok')}" styleName="BtnStyle" click="submitSysConfirm(event)" visible="false" includeInLayout="false"/>
                </mx:HBox>
             
            </mx:VBox>
        </mx:ViewStack>    
    </mx:VBox>
</mx:Module>

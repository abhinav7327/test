<?xml version="1.0" encoding="utf-8"?>


<mx:Module  xmlns:mx="http://www.adobe.com/2006/mxml" 
            xmlns:tabs="*" 
            xmlns:containers="com.nri.rui.core.containers.*" 
            xmlns:flexlib="http://code.google.com/p/flexlib/" 
            xmlns:cntrls="com.nri.rui.core.controls.*" 
            xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
            layout="vertical" 
            percentWidth="100" 
            percentHeight ="100" 
            horizontalScrollPolicy="off" 
            verticalScrollPolicy="off" 
            creationComplete="init()">
            
    <mx:Script>
        <![CDATA[
        	import mx.rpc.events.FaultEvent;
        	import com.nri.rui.core.controls.XenosHTTPService;
        	import mx.collections.ArrayCollection;
        	import mx.rpc.events.ResultEvent;
        	import com.nri.rui.core.utils.XenosStringUtils;
        	import mx.utils.StringUtil;
        	import com.nri.rui.core.controls.TreeCombo;
            import com.nri.rui.core.controls.CustomChangeEvent;
            import mx.events.ChildExistenceChangedEvent;
            import flash.utils.getQualifiedClassName;
            import flash.utils.getDefinitionByName;
            import com.nri.rui.core.controls.XenosAlert;
            import com.nri.rui.core.controls.WizardPage;
            import mx.events.IndexChangedEvent;
            import mx.events.FlexEvent;
            import mx.resources.ResourceBundle;
            import com.nri.rui.core.Globals;
            import mx.core.Application;
            
            [Bindable] public var submitResult:XML;
            [Bindable] public var mode:String;
            [Bindable] public var initUrl:String;
            private var instrumentPk:String;
            private var instrumentTree:TreeCombo;
            private var instrumentTypeOrig:String = XenosStringUtils.EMPTY_STR;
            private var instrumentTypeValidationCheck:XenosHTTPService = new XenosHTTPService();
            
            /**
             * Initialize the module.
             */
            private function init():void {

                parseLoaderUrl();
                addEventListener("confirmOk",confirmOkHandler);
                addEventListener("typeChangeEvent", instrumentTypeSelectionHandler);
                wizard.viewStackInstance.addEventListener(ChildExistenceChangedEvent.CHILD_ADD, childAdded);
                registerClassAlias("InstrumentOtherTab", InstrumentOtherTab);
                registerClassAlias("InstrumentBondDetailsTab", InstrumentBondDetailsTab);
                registerClassAlias("InstrumentWarrantsDetailsTab", InstrumentWarrantsDetailsTab); 
                registerClassAlias("InstrumentMbsTab", InstrumentMbsTab);
                registerClassAlias("InstrumentRestrictionTab", InstrumentRestrictionTab); 
                registerClassAlias("InstrumentDerivativesTab", InstrumentDerivativesTab);
                registerClassAlias("InstrumentCbDetailsTab", InstrumentCbDetailsTab);
                wizard.dispatchEvent(new Event("moduleCreationComplete"));          
                
            }
            
            private function confirmOkHandler(event:CustomChangeEvent):void{                
                parentDocument.dispatchEvent(new Event("OkSystemConfirm"));
            }
            
            /**
             * Instantiates the child tabs and populates them in the viewstack.
             */
            public function populateTabs():void {
                var tabArray:Array = wizard.visibleTabs;
                var indx:int = 0;
                if(tabArray.length != 0) {
                    for (var count:int = 1; count < tabArray.length; count++) {
                        var obj:Object = tabArray[count];
                        var dispObjClass:Class =  getDefinitionByName(obj['label'].toString()) as Class;
                        var myInstance:Object = new dispObjClass();
                        wizard.viewStackInstance.addChild(WizardPage(myInstance));
                    }
                }
            }
            
            /**
            * Event handler for 'typeChangeEvent'
            * 
            */ 
            private function instrumentTypeSelectionHandler(e:CustomChangeEvent):void {
            	instrumentTree = TreeCombo(e.targetInstance);
            	instrumentTypeOrig = String(e.targetParams.oldInstrumentType);
            	trace("instrumentTypeSelectionHandler :: " + instrumentTypeOrig + " :: " + e.targetParams);
                var rndNo:int = Math.random();
                instrumentTypeValidationCheck.url = "ref/instrumentAmendDispatch.action?method=modifyInstrumentType&rnd=" + rndNo;
                instrumentTypeValidationCheck.addEventListener(FaultEvent.FAULT, handleError);
                instrumentTypeValidationCheck.addEventListener(ResultEvent.RESULT, handleResult);
                instrumentTypeValidationCheck.showBusyCursor = true;
                instrumentTypeValidationCheck.resultFormat = "xml";
                instrumentTypeValidationCheck.method = "POST";
                var reqObj:Object = new Object();
                reqObj['instrumentPage.tempInstrumentType'] = e.targetParams.newInstrumentType;
                instrumentTypeValidationCheck.request = reqObj;
                instrumentTypeValidationCheck.send();
            }
            
            /**
             * This is the handler of HTTPService for instrument type validation.
             */             
            private function handleResult(event:ResultEvent):void{
                var rs:XML = XML(event.result);
                if(rs.child("Errors").length() > 0) {
                    var errorInfoList : ArrayCollection = new ArrayCollection();
                    //populate the error info list              
                    for each ( var error:XML in rs.Errors.error ) {
                       errorInfoList.addItem(error.toString());
                    }
                    //Display the error
                    wizard.errPage.showError(errorInfoList);
                    instrumentTree.text = instrumentTypeOrig;
                    trace("handleResult :: " + instrumentTypeOrig);
                 } else {
                 	 wizard.errPage.removeError();
                     instrumentTypeOrig = rs.instrumentPage.instrumentType;  
                     //added for XGA-566
                     wizard.populateVisibleTabs(rs);
                     populateTabs(); 
                     /////
                }
            }
            
            /**
            * This is the fault handler of HTTPService
            */ 
            private function handleError(event:FaultEvent){
                XenosAlert.error(Application.application.xResourceManager.getKeyValue('ref.msg.common.info.errorfaultstr', new Array(event.fault.faultDetail)));
            }
            
            /**
             * Event handler for ChildExistenceChangedEvent.CHILD_ADD event.
             */
            public function childAdded(event:ChildExistenceChangedEvent):void {
                trace("childAdded ::" + wizard.viewStackInstance.numChildren);
                wizard.trailArray.push(WizardPage(wizard.viewStackInstance.getChildAt(wizard.viewStackInstance.numChildren - 1)).shortTitle);
                trace("trailArray ::" + wizard.trailArray);
                trace("trailArray.length ::" + wizard.trailArray.length);
                wizard.buttonBar.dataProvider = wizard.trailArray;
            }
            
            private function doViewStackChange(event:IndexChangedEvent):void {
                if(event.newIndex==1){
                    confirmTab.confirmInitXML=wizard.submitResult;  
                    confirmTab.dispatchEvent(new CustomChangeEvent("visibleTabsEvent",wizard.visibleTabs));                             
                }
            }
            
            /**
             * Extracts the mode and entity PK.
             */ 
            public function parseLoaderUrl():void {
                
                try {
                    var myPattern:RegExp = /.*\?/; 
                    var s:String = this.loaderInfo.url.toString();
                    
                    s = s.replace(myPattern, "");
                    var params:Array = s.split(Globals.AND_SIGN); 
                    var keyStr:String;
                    var valueStr:String;
                    var paramObj:Object = params;
                    
                    var entityPkName:String;
                    var entityPkValue:String;
                  
                    if(params != null){
                        for (var i:int = 0; i < params.length; i++) {
                            var temp:Array = params[i].split("=");  
                            if (temp[0] == "mode") {
                                this.mode = temp[1];
                            } else {
                                this.instrumentPk = temp[1];
                            }
                        }                       
                    } else {
                        this.mode = "entry";
                    }
                        wizard.initUrl = wizard.initUrl + "&instrumentPk=" + instrumentPk;
                        wizard.mode = this.mode;
                        wizard.viewMode = "amend";
                    
                } catch (e:Error) {
                    trace(e);
                }
            }            
            
        ]]>
    </mx:Script>

    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        <mx:VBox width="100%" height="100%" styleName="Padding">
            <mx:ViewStack width="100%" height="100%" id="vstack" creationPolicy="auto" change="doViewStackChange(event)">
                <cntrls:WizardControl id="wizard" width="100%" height="100%" defaultTab="{WizardPage(new InstrumentGeneralInfoTab())}"
                                      initUrl="ref/instrumentAmendDispatch.action?method=instrumentAmendExecute"
                                      submitUrl="ref/instrumentAmendDispatch.action?method=confirm"
                                      switchTabUrl="ref/instrumentAmendDispatch.action?method=switchTab"
                                      resetUrl="ref/instrumentAmendDispatch.action?method=resetAmend"
                                      submitResult="{submitResult}" 
                                      targetPagePropertyName = "targetPageNo"
                                      loaderUrl="{this.loaderInfo.url.toString()}" />
                <tabs:InstrumentConfirmTab id="confirmTab"  confirmInitXML="{submitResult}" mode="amend"/>
            </mx:ViewStack>
        </mx:VBox>
    </mx:Canvas>
</mx:Module>
<?xml version="1.0" encoding="utf-8"?>


<mx:Module  xmlns:mx="http://www.adobe.com/2006/mxml" 
            xmlns:tabs="*" xmlns:containers="com.nri.rui.core.containers.*" 
            xmlns:flexlib="http://code.google.com/p/flexlib/" 
            xmlns:cntrls="com.nri.rui.core.controls.*" 
            xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
            layout="vertical" 
            percentWidth="100" 
            percentHeight ="100" 
            horizontalScrollPolicy="off" 
            verticalScrollPolicy="off" 
            creationComplete="init()">
            
    <mx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.rpc.events.FaultEvent;
            import com.nri.rui.core.controls.XenosHTTPService;
            import mx.rpc.events.ResultEvent;
            import com.nri.rui.core.controls.CustomChangeEvent;
            import com.nri.rui.core.controls.TreeCombo;
            import flash.utils.getQualifiedClassName;
            import flash.utils.getDefinitionByName;
            import com.nri.rui.core.controls.XenosAlert;
            import com.nri.rui.core.controls.WizardPage;
            import com.nri.rui.core.controls.CustomChangeEvent;
            
            import mx.events.ChildExistenceChangedEvent;
            import mx.events.IndexChangedEvent;
            import mx.events.FlexEvent;
            import mx.resources.ResourceBundle;
            import mx.core.Application;
            
            [Bindable]
            public var submitResult:XML;
            
            private var noOfLoadedClasses:int = 0;
            
            private var childsArray:Array = new Array();
            
            private var populateTabsRequest:XenosHTTPService = new XenosHTTPService();
            
            
            private function init():void {
                addEventListener("typeChangeEvent", instrumentTypeSelectionHandler);
                addEventListener("confirmOk",confirmOkHandler);
                
                registerClassAlias("InstrumentOtherTab", InstrumentOtherTab);
                registerClassAlias("InstrumentBondDetailsTab", InstrumentBondDetailsTab);
                registerClassAlias("InstrumentWarrantsDetailsTab", InstrumentWarrantsDetailsTab); 
                registerClassAlias("InstrumentMbsTab", InstrumentMbsTab);
                registerClassAlias("InstrumentRestrictionTab", InstrumentRestrictionTab); 
                registerClassAlias("InstrumentDerivativesTab", InstrumentDerivativesTab);
                registerClassAlias("InstrumentCbDetailsTab", InstrumentCbDetailsTab);
                wizard.dispatchEvent(new Event("moduleCreationComplete"));
            }
            
            private function confirmOkHandler(event:CustomChangeEvent):void{
                vstack.selectedIndex = 0;
                wizard.dispatchEvent(new Event("entryConfirmOk"));
            }
            
            private function instrumentTypeSelectionHandler(e:CustomChangeEvent):void {
                var rndNo:int = Math.random();
                populateTabsRequest.url = "ref/instrumentEntryDispatch.action?method=populateRUITabsForInstrumentType&rnd=" + rndNo;
                populateTabsRequest.addEventListener(FaultEvent.FAULT, handleError);
                populateTabsRequest.addEventListener(ResultEvent.RESULT, handleResult);
                populateTabsRequest.showBusyCursor = true;
                populateTabsRequest.resultFormat = "xml";
                populateTabsRequest.method = "POST";
                var reqObj:Object = new Object();
                reqObj = WizardPage(wizard.viewStackInstance.selectedChild).populateRequest();
                delete reqObj['instrumentPage.instrumentType'];
                reqObj['instrumentPage.tempInstrumentType'] = e.targetParams;
                populateTabsRequest.request = reqObj;
                populateTabsRequest.send();
            }
            
            /**
             * This is the handler of HTTPService for tab population.
             */             
            private function handleResult(event:ResultEvent):void{
                var rs:XML = XML(event.result);
                if(rs.child("Errors").length() > 0) {
                    var errorInfoList : ArrayCollection = new ArrayCollection();
                    //populate the error info list              
                    for each ( var error:XML in rs.Errors.error ) {
                       errorInfoList.addItem(error.toString());
                    }
                    wizard.submitbtn.enabled = false;
                    wizard.next.enabled = false;
                    //Display the error
                    wizard.errPage.showError(errorInfoList);
                 } else {
                        wizard.populateVisibleTabs(rs);
                        //wizard.populateVisibleTabs(rs);
                        populateTabs();
                }
            }
            
            /* private function childRemoved(event:Event):void{
                trace("childRemoved :: " + wizard.viewStackInstance.numChildren);
                if(wizard.viewStackInstance.numChildren <= 1){
                    populateTabs();
                    wizard.viewStackInstance.removeEventListener("childrenChanged", childRemoved);
                }
            } */
            
            /**
            * This is the fault handler of HTTPService
            */ 
            private function handleError(event:FaultEvent){
                XenosAlert.error(Application.application.xResourceManager.getKeyValue('ref.msg.common.info.errorfaultstr', new Array(event.fault.faultDetail)));
            }
            
            /* private function loadComplete(e:Event):void{
                noOfLoadedClasses++;
                if(noOfLoadedClasses >= wizard.visibleTabs.length){
                    initChilds();
                }
                trace("classLoader.contentLoaderInfo.url ::  " + classLoader.contentLoaderInfo.url);
            } */
            
            public function populateTabs():void{
                var tabArray:Array = wizard.visibleTabs;
                var indx:int = 0;
                if(tabArray.length != 0){
                    for (var count:int = 1; count < tabArray.length; count++) {
                        var obj:Object = tabArray[count];
                        //indx++;
                        //WizardPage(myInstance).addEventListener(FlexEvent.INITIALIZE, childInitialize,false,indx);
                        var dispObjClass:Class =  getDefinitionByName(obj['label'].toString()) as Class;
                        
                        var myInstance:Object = new dispObjClass();
                         wizard.viewStackInstance.addChild(WizardPage(myInstance));
                    }
                    //wizard.changeButtonState();
                }
            }
            
            public function childAdded(event:ChildExistenceChangedEvent):void{
            } 
            
            private function doViewStackChange(event:IndexChangedEvent):void{
                if(event.newIndex==1){
                    confirmTab.confirmInitXML=wizard.submitResult;                  
                    confirmTab.dispatchEvent(new CustomChangeEvent("visibleTabsEvent",wizard.visibleTabs));             
                }
            }
        ]]>
    </mx:Script>

    <mx:ViewStack width="100%" height="100%" id="vstack" creationPolicy="auto" change="doViewStackChange(event)">
        <cntrls:WizardControl id="wizard" width="100%" height="100%" defaultTab="{WizardPage(new InstrumentGeneralInfoTab())}"
                              targetPagePropertyName = "targetPageNo"
                              initUrl="ref/instrumentEntryDispatch.action?method=initialExecute"
                              submitUrl="ref/instrumentEntryDispatch.action?method=confirm"
                              switchTabUrl="ref/instrumentEntryDispatch.action?method=switchTab"
                              resetUrl="ref/instrumentEntryDispatch.action?method=resetTab"
                              populateTabsUrl="ref/instrumentEntryDispatch.action?method=populateRUITabsForInstrumentType"
                              submitResult="{submitResult}" />
        <tabs:InstrumentConfirmTab id="confirmTab" width="100%" height="100%" confirmInitXML="{submitResult}"/>
    </mx:ViewStack>
</mx:Module>

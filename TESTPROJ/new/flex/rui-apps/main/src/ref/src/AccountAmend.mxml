<?xml version="1.0" encoding="utf-8"?>


<mx:Module  xmlns:mx="http://www.adobe.com/2006/mxml" 
            xmlns:tabs="*" 
            xmlns:containers="com.nri.rui.core.containers.*" 
            xmlns:flexlib="http://code.google.com/p/flexlib/" 
            xmlns:cntrls="com.nri.rui.core.controls.*" 
            xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
            layout="vertical" 
            percentWidth="100" 
            percentHeight ="100" 
            horizontalScrollPolicy="off" 
            verticalScrollPolicy="off" 
            creationComplete="init()">
            
    <mx:Script>
        <![CDATA[
            import com.nri.rui.core.controls.CustomChangeEvent;
            import mx.events.ChildExistenceChangedEvent;
            import flash.utils.getQualifiedClassName;
            import flash.utils.getDefinitionByName;
            import com.nri.rui.core.controls.XenosAlert;
            import com.nri.rui.core.controls.WizardPage;
            import mx.events.IndexChangedEvent;
            import mx.events.FlexEvent;
            import mx.resources.ResourceBundle;
            import com.nri.rui.core.Globals;
            
            [Bindable] public var submitResult:XML;
            [Bindable] public var mode:String;
            [Bindable] public var initUrl:String;
            [Bindable] public var urlMode;
            [Bindable] public var initMethod;
            [Bindable] public var resetMethod;
            private var accountPk:String;
            [Bindable] private var reopenFlag:String;
            private var imEntry:String = "";
            private var counterPartyType:String = "";
            
            /**
             * Initialize the module.
             */
            private function init():void {

                parseLoaderUrl();
                addEventListener("confirmOk", confirmOkHandler);
                wizard.viewStackInstance.addEventListener(ChildExistenceChangedEvent.CHILD_ADD, childAdded);
				registerClassAlias("AccountFundTab", AccountFundTab);
				registerClassAlias("AccountGeneralTab", AccountGeneralTab);
				registerClassAlias("AccountContractTab", AccountContractTab); 
				registerClassAlias("AccountDocumentTab", AccountDocumentTab);
				registerClassAlias("AccountAddressTab", AccountAddressTab); 
				registerClassAlias("AccountEaddressTab", AccountEaddressTab);
				registerClassAlias("AccountCommissionTab", AccountCommissionTab);
				registerClassAlias("AccountRestrictionTab", AccountRestrictionTab); 
				registerClassAlias("AccountWithholdingTaxTab", AccountWithholdingTaxTab);
				registerClassAlias("AccountCustodianTab", AccountCustodianTab);
                wizard.dispatchEvent(new Event("moduleCreationComplete"));          
                
            }
            
            private function confirmOkHandler(event:CustomChangeEvent):void{                
                parentDocument.dispatchEvent(new Event("OkSystemConfirm"));
            }
            
            /**
             * Instantiates the child tabs and populates them in the viewstack.
             */
            public function populateTabs():void {
                var tabArray:Array = wizard.visibleTabs;
                var indx:int = 0;
                if(tabArray.length != 0) {
                    for (var count:int = 0; count < tabArray.length; count++) {
                        var obj:Object = tabArray[count];
                        var dispObjClass:Class =  getDefinitionByName(obj['label'].toString()) as Class;
                        var myInstance:Object = new dispObjClass();
                        if ((this.mode == "copy" && this.imEntry == "true") || (this.mode == "amend" && this.counterPartyType == "FUND")) {
                        	wizard.viewStackInstance.selectedIndex=1;
                        }
                        wizard.viewStackInstance.addChild(WizardPage(myInstance));
                    }
                }
            }
            
            /**
             * Event handler for ChildExistenceChangedEvent.CHILD_ADD event.
             */
            public function childAdded(event:ChildExistenceChangedEvent):void {
                trace("childAdded ::" + wizard.viewStackInstance.numChildren);
                wizard.trailArray.push(WizardPage(wizard.viewStackInstance.getChildAt(wizard.viewStackInstance.numChildren - 1)).shortTitle);
                trace("trailArray ::" + wizard.trailArray);
                trace("trailArray.length ::" + wizard.trailArray.length);
                wizard.buttonBar.dataProvider = wizard.trailArray;
            }
            
            private function doViewStackChange(event:IndexChangedEvent):void {
                if(event.newIndex==1){
                    confirmTab.confirmInitXML=wizard.submitResult;  
                    confirmTab.dispatchEvent(new CustomChangeEvent("visibleTabsEvent",wizard.visibleTabs));                       
                }
            }
            
            /**
             * Extracts the mode and entity PK.
             */ 
            private function parseLoaderUrl():void {
                
                try {
                    var myPattern:RegExp = /.*\?/; 
                    var s:String = this.loaderInfo.url.toString();
                    
                    s = s.replace(myPattern, "");
                    var params:Array = s.split(Globals.AND_SIGN); 
                    var keyStr:String;
                    var valueStr:String;
                    var paramObj:Object = params;
                    
                    if(params != null){
                        for (var i:int = 0; i < params.length; i++) {
                            var temp:Array = params[i].split("=");  
                            if (temp[0] == "mode") {
                                this.mode = temp[1];
                            } else if (temp[0] == "accountPk") {
                                this.accountPk = temp[1];
                            } else if(temp[0] == Globals.ACCOUNT_IM_ENTRY_FLAG) {
                            	this.imEntry = temp[1];
                            } else if(temp[0] == "reopenFlag"){
                                this.reopenFlag = temp[1];
                            } else if(temp[0] == "counterPartyType"){
                            	this.counterPartyType = temp[1];
                            }
                        }                       
                    } else {
                        this.mode = "entry";
                    }
                    
                    // set the modes and URLs
                    
                    if (this.mode == "amend") {
                    	
						this.urlMode = "Amend";
						this.initMethod = "amendAccountDetails";
						this.resetMethod = "resetAccountAmend";
						
	                    confirmTab.restoreXmlRequest.url = "ref/accountAmendDispatch.action?method=submitAccountConfirm";
                        wizard.initUrl = wizard.initUrl + "&accountPk=" + accountPk + "&reopenFlag=" + reopenFlag+"&SCREEN_KEY=65";
                        wizard.switchTabUrl="ref/account"+urlMode+"Dispatch.action?method=switchEntryTab&SCREEN_KEY=65"
                        wizard.mode = this.mode;
                        wizard.viewMode = this.mode;
						
						
	                } else if (this.mode == "copy") {
	                	
						if (this.imEntry == "true") {
							
							this.urlMode = "IMEntry";
							this.initMethod = "doImFundAccountInit";
							this.resetMethod = "resetAccountCopy";
							
		                    confirmTab.restoreXmlRequest.url = "ref/accountIMEntryDispatch.action?method=submitAccountConfirm";
							
						} else if (this.imEntry == "false") {
							
							this.urlMode = "Copy";
							this.initMethod = "copyAccountDetails";
							this.resetMethod = "resetAccountCopy";
							
		                    confirmTab.restoreXmlRequest.url = "ref/accountCopyDispatch.action?method=submitAccountConfirm";
							
						}
						
                    	wizard.initUrl = wizard.initUrl + "&accountPk=" + accountPk+"&SCREEN_KEY=926";
                    	wizard.switchTabUrl="ref/account"+urlMode+"Dispatch.action?method=switchEntryTab&SCREEN_KEY=926"
                        wizard.mode = this.mode;
                        wizard.viewMode = "amend";
						
	                }  else if (this.mode == "reopen") {
	                	
						this.urlMode = "Reopen";
						this.initMethod = "amendAccountDetails";
						this.resetMethod = "resetAccountAmend";
						
	                    confirmTab.restoreXmlRequest.url = "ref/accountReopenDispatch.action?method=confirmAccountReopen";
	                    confirmTab.restoreCancelXmlRequest.url = "ref/accountReopenDispatch.action?method=backToAccountReopen";
                        wizard.initUrl = wizard.initUrl + "&accountPk=" + accountPk + "&reopenFlag=" + reopenFlag+"&SCREEN_KEY=65";
                        wizard.switchTabUrl="ref/account"+urlMode+"Dispatch.action?method=switchEntryTab&SCREEN_KEY=65"
                        wizard.mode = "amend";
                        wizard.viewMode = "amend";
						
	                }
	                confirmTab.urlModeBind = this.urlMode;
                    confirmTab.mode = this.mode;
                    
                } catch (e:Error) {
                    trace(e);
                }
            }
            
        ]]>
    </mx:Script>
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        <mx:VBox width="100%" height="100%" styleName="Padding">
            <mx:ViewStack width="100%" height="100%" id="vstack" creationPolicy="auto" change="doViewStackChange(event)">
                <cntrls:WizardControl id="wizard" width="100%" height="100%"
                                      initUrl="ref/account{urlMode}Dispatch.action?method={initMethod}" 
                                      switchTabUrl="ref/account{urlMode}Dispatch.action?method=switchEntryTab"
                                      resetUrl="ref/account{urlMode}Dispatch.action?method={resetMethod}"
                                      submitUrl="ref/account{urlMode}Dispatch.action?method=submitAccountEntry"
                                      targetPagePropertyName = "targetTabNo"
                                      submitResult="{submitResult}" 
                                      loaderUrl="{this.loaderInfo.url.toString()}" />
                <tabs:AccountConfirmTab id="confirmTab" confirmInitXML="{submitResult}" urlModeBind="{urlMode}"/>
            </mx:ViewStack>
        </mx:VBox>
    </mx:Canvas>
</mx:Module>
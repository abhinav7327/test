<?xml version="1.0" encoding="utf-8"?>

<!--Mxml file for Swift Message Search Query Implementation -->

<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" 
	                         xmlns:containers="com.nri.rui.core.containers.*" 
	                         xmlns:flexlib="http://code.google.com/p/flexlib/"
	                         xmlns:cntrls="com.nri.rui.core.controls.*" 
	                         xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
	                         layout="vertical" 
	                         percentWidth="100" 
	                         percentHeight ="100" 
	                         horizontalScrollPolicy="off" 
	                         verticalScrollPolicy="off">
    
	<mx:Script>
		<![CDATA[
		    import com.nri.rui.core.renderers.ImgSummaryRenderer;
			import com.nri.rui.core.RendererFectory;
			import mx.events.DataGridEvent;			
			import mx.resources.ResourceBundle;
			import com.nri.rui.ref.renderers.SwiftFileContentDetailRenderer;
			    
		    /**
			 * This method should be called on creationComplete of the datagrid 
			 */ 
			 private function bindDataGrid():void {
				qh.dgrid = resultSummary;
			}
        
	        private function changeCurrentState():void {
                currentState = "result";
                app.submitButtonInstance = null;
	        }
			
			/**
 			*  datagrid header release event handler to handle datagridcolumn sorting
 			*/
			public function dataGrid_headerRelease(evt:DataGridEvent):void {				
				var dg:CustomDataGrid = CustomDataGrid(evt.currentTarget);
                sortUtil.clickedColumn = dg.columns[evt.columnIndex];			
			}			
		]]>
	</mx:Script>
		
	<mx:Script source="actionscripts/SwiftMessageQueryModule.as"/>
	    
    <mx:states>
    	<mx:State name="result">
            <mx:SetProperty target="{qry}" name="width" value="0%"/>
            <mx:SetProperty target="{rslt}" name="width" value="100%"/>
        </mx:State>
        <mx:State name="qryres">
            <mx:SetProperty target="{qry}" name="width" value="50%"/>
            <mx:SetProperty target="{rslt}" name="width" value="50%"/>
        </mx:State>
        <mx:State name="">
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
    </mx:states>
    <!-- Define Transition array with one Transition object.-->
    <mx:transitions>
        <!-- A transition for changing from any state to any state. -->
        <mx:Transition id="qryTransition" fromState="*" toState="*">
            <!-- Define a Parallel effect as the top-level effect.-->
            <mx:Parallel id="t1" targets="{[qry,rslt]}">
                <!-- Define a Move and Resize effect.-->
                <mx:Move  duration="400"/>
                <!--<mx:Resize duration="400"/>-->
            </mx:Parallel>
        </mx:Transition>
    </mx:transitions>    
    
    <cntrls:XenosHTTPService id="initializeSwiftSearch" fault="XenosAlert.error('Error Occured Initialize :  ' + event.fault.faultString)" 
             method="POST" useProxy="false" result="initPage(event)" showBusyCursor="true"/>	

    <cntrls:XenosHTTPService id="swiftSearchRequest" 
         url="ref/swiftMsgQueryDispatch.action?method=doQuery"
         fault="XenosAlert.error('Error Occured :  ' + event.fault.faultString)" method="POST"
         result="loadResultPage(event)" resultFormat="e4x">
    </cntrls:XenosHTTPService>
    
    <cntrls:XenosHTTPService id="swiftSearchResetQueryRequest" url="ref/swiftMsgQueryDispatch.action?method=resetSwiftMsgQueryForm"
        result="initPage(event)" showBusyCursor="true" useProxy="false">
    </cntrls:XenosHTTPService>
    
    <cntrls:XenosHTTPService id="doPreviousRequest" 
         url="ref/swiftMsgQueryDispatch.action?method=doPrevious"
         fault="XenosAlert.error('Error Occured :  ' + event.fault.faultString)" method="POST"
         result="loadResultPage(event)" resultFormat="e4x">
    </cntrls:XenosHTTPService>
    
    <cntrls:XenosHTTPService id="doNextRequest" 
         url="ref/swiftMsgQueryDispatch.action?method=doNext"
         fault="XenosAlert.error('Error Occured :  ' + event.fault.faultString)" method="POST"
         result="loadResultPage(event)" resultFormat="e4x">
    </cntrls:XenosHTTPService>
       
    <mx:VBox width="100%" verticalGap="0" horizontalGap="0" id="screenNavigater">    
    <mx:HBox width="100%" styleName="ExCoBgPanel">
    	<mx:Image source="@Embed('../../assets/img/show_query.png')" toolTip="{this.parentApplication.xResourceManager.getKeyValue('frx.tooltip.query')}" buttonMode="true" click="currentState='';app.submitButtonInstance = submit;" />    	
    	<mx:Image source="@Embed('../../assets/img/show_result.png')" toolTip="{this.parentApplication.xResourceManager.getKeyValue('frx.tooltip.result')}" buttonMode="true" click="currentState='result'" />
    	<mx:Image source="@Embed('../../assets/img/show_query_result.png')" toolTip="{this.parentApplication.xResourceManager.getKeyValue('frx.tooltip.qryrslt')}" buttonMode="true" click="currentState='qryres';app.submitButtonInstance = submit;"/>    	
    </mx:HBox>
    <mx:HRule strokeColor="#d2d9dc" strokeWidth="1" width="100%" />
    </mx:VBox>
	
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto"  verticalScrollPolicy="auto">
	<mx:VBox width="100%" height="100%">
	<mx:HDividedBox id="hdbox1" width="100%" height="100%" styleName="Padding4" liveDragging="true" creationComplete="initPageStart()" >
	<!--<containers:CollapsibleHDividedBox id="hdbox1" width="100%" height="100%" x="0" y="0" liveDragging="true" creationComplete="{}" paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6" >-->
		
		<mx:Canvas id="qry" width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
		<mx:VBox label="Swift Message Search" width="100%" height="100%" styleName="HDivideStyle" >
			<mx:Label text="Query Criteria" fontWeight="bold"/>
			<cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
		
			<!--<flexlib:WindowShade id="ws1" tabChildren="{ws1.opened=false}" styleName="linkButtonWindowShade" label="Optional Fields - Group 1" width="100%">-->
			<mx:Grid width="100%" borderThickness="0">
                    <mx:GridRow width="100%">
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.senderrefno')}"/>
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
                           <mx:TextInput id="senderRefNo" restrict="{Globals.INPUT_PATTERN}"/>      
                        </mx:GridItem> 
                        <mx:GridItem width="20%" borderThickness="0">
                        </mx:GridItem>
	                    <mx:GridItem width="30%" borderThickness="0">
	                    </mx:GridItem>     
                    </mx:GridRow>	
               	 	<mx:GridRow width="100%">
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.msgtype')}" />
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
                            <mx:ComboBox id="msgType" labelField="label" prompt=" " editable="true"/>             
                        </mx:GridItem>
                        <mx:GridItem width="20%" borderThickness="0">
	                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.receivedatetofrom')}"  styleName="ReqdLabel"/>
	                     </mx:GridItem>
	                     <mx:GridItem width="30%" borderThickness="0">
	                            <mx:HBox>
	                       			<mx:DateField id="receiveDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
	                       			<mx:DateField id="receiveDateTo" formatString="YYYYMMDD" editable="true" width="90"/>
	                            	<mx:TextInput id="receiveTimeFrom" restrict="{Globals.INPUT_PATTERN}" width="40" maxChars="4" visible="false"/>
	                            	<mx:TextInput id="receiveTimeTo" restrict="{Globals.INPUT_PATTERN}" width="40" maxChars="4" visible="false"/>
	            				</mx:HBox>                         
	                        </mx:GridItem>                       
                    </mx:GridRow>
             	    <mx:GridRow width="100%">
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.receiverbic')}"/>
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
	                        <mx:TextInput id="receiverBic"  restrict="{Globals.INPUT_PATTERN}"/>      
	                    </mx:GridItem>   
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.senderbic')}" />
                        </mx:GridItem>
                        <mx:GridItem width="30%" borderThickness="0">
                             <mx:TextInput  id="senderBic" restrict="{Globals.INPUT_PATTERN}"/>                               
                        </mx:GridItem>
                    </mx:GridRow>
                  </mx:Grid>
                    <mx:Grid width="100%" borderThickness="0">
                     <mx:GridRow width="100%">
                        <mx:GridItem width="20%" borderThickness="0">
                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.searchtext')}"/>
                        </mx:GridItem>
                        <mx:GridItem width="80%" borderThickness="0">
	                         <mx:TextInput width="80%" id="searchText"/>
	                    </mx:GridItem>  
                    </mx:GridRow>
	              </mx:Grid>
	                
            <flexlib:WindowShade id="ws3" tabChildren="{ws3.opened}" styleName="linkButtonWindowShade" label="Sort Order Fields" opened="true" width="100%">
				<mx:Grid width="100%" borderThickness="0">
					<mx:GridRow width="100%">
						<mx:GridItem width="100%" borderThickness="0">
							<mx:HBox width="100%">
								<mx:ComboBox id="sortField1" labelField="label" change="sortOrder1Update()"></mx:ComboBox>
								<mx:ComboBox id="sortField2" labelField="label" change="sortOrder2Update()"></mx:ComboBox>
								<mx:ComboBox id="sortField3" labelField="label"></mx:ComboBox>
							</mx:HBox>						
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
			</flexlib:WindowShade>

			<mx:HBox width="100%" styleName="ButtonBackPanel">
   	           <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submit" styleName="BtnStyle" click="this.submitQuery();"/>
               <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.reset')}" styleName="BtnStyle"  click="this.resetQuery();"/>
	        </mx:HBox>

		</mx:VBox>		
		</mx:Canvas>
				
		<mx:VBox width="0%" height="100%" id="rslt" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="HDivideStyle" >			
	        <cntrls:QueryResultHeader id="qh" pdfFunction="generatePdf" xlsFunction="generateXls" width="100%" previousFunction="dispatchPrevEvent" nextFunction="dispatchNextEvent" visible="true"/>
			<cntrls:CustomDataGrid id="resultSummary" width="100%" height="100%" dataProvider="{queryResult}" sortableColumns="true" headerRelease="dataGrid_headerRelease(event)" variableRowHeight="true" horizontalScrollPolicy="auto" creationComplete="bindDataGrid()"> 
			    <cntrls:columns>
			    	   <mx:DataGridColumn headerText="" width="40" draggable="false" resizable="false" id="imgRenderer" itemRenderer="{new RendererFectory(SwiftFileContentDetailRenderer, mode)}" />
			    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.receivedate')}" dataField="receivedDateStr" width="100" sortCompareFunction="sortUtil.sortString"/>
			    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.msgtype')}" dataField="messageTypeStr" width="100" sortCompareFunction="sortUtil.sortString"/>
			    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.senderrefno')}" dataField="senderReferenceNo" width="150" sortCompareFunction="sortUtil.sortString"/>
			    	 		 <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.receiverbic')}" dataField="receiverBIC" width="120" visible="true" sortCompareFunction="sortUtil.sortString"/>
			    	 		 <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.senderbic')}" dataField="senderBIC" width="120" sortCompareFunction="sortUtil.sortString"/>
			    	 	 	 <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.currency')}" dataField="currency" width="70" sortCompareFunction="sortUtil.sortString"/>
			    	 	 	 <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.amount')}" dataField="amount" width="90" sortCompareFunction="sortUtil.sortString" textAlign="right"/>
			    	 	 	 <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.valuedate')}" dataField="valueDate" width="80" sortCompareFunction="sortUtil.sortString"/>
			    	 		 <!--<mx:DataGridColumn headerText="Source" dataField="sourceQueueId" width="90" sortCompareFunction="sortUtil.sortString"/>-->
			    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.swiftmessage.label.receivetime')}" dataField="receiveTime" editable="true" width="125" visible="true"/>
	            </cntrls:columns>
			</cntrls:CustomDataGrid>
		</mx:VBox>
		
	</mx:HDividedBox>
    </mx:VBox>    
    </mx:Canvas>		 
</mx:Module>

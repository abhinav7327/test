<?xml version="1.0" encoding="utf-8"?>

<!--Mxml file for Receive Notice Query CA Implementation -->

<containers:XenosQueryModule xmlns:mx="http://www.adobe.com/2006/mxml" 
                             xmlns:containers="com.nri.rui.core.containers.*" 
                             xmlns:flexlib="http://code.google.com/p/flexlib/" 
                             xmlns:cntrls="com.nri.rui.core.controls.*" 
                             xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
                             xmlns:frmtrs="com.nri.rui.core.formatters.*" 
                             xmlns:valdtrs="com.nri.rui.core.validators.*" 
                             layout="vertical" percentWidth="100" 
                             percentHeight ="100" horizontalScrollPolicy="off" 
                             verticalScrollPolicy="off">
    
    <mx:Script>
        <![CDATA[
            import com.nri.rui.core.renderers.SelectItem;
            import com.nri.rui.core.utils.XenosPopupUtils;
            import mx.core.UIComponent;
            import mx.controls.DataGrid;
            import com.nri.rui.core.Globals;
            import mx.containers.TitleWindow;
            import mx.collections.ArrayCollection;
            import mx.events.CloseEvent;            
            import mx.controls.CheckBox;
            import mx.managers.PopUpManager;
            
            import com.nri.rui.core.controls.XenosAlert;
            import mx.events.DataGridEvent;
            
            [Embed(source="../../assets/img/inf/addcolunm.png")]
            [Bindable]
            private var icoColumns:Class;
            [Bindable]
            private var operatopnArray:ArrayCollection = new ArrayCollection();
            
            public static var popupColumns:TitleWindow = null;
            public var gridColumns:ArrayCollection = new ArrayCollection();
            private function changeCurrentState():void{
                currentState = "result";
                app.submitButtonInstance = null;
            }
            private function getReferenceNo(item:Object, column:DataGridColumn):String{
                if(item.typeOfRecord == "S"){
                    return item.settlementReferenceNo;
                } else { //if(item.typeOfRecord == "R")
                    if(item.messageStatus == "FORCE_MATCHED")
                        return item.rcvdCompNoticeRefNo;   //verify this case
                    else
                        return item.rcvdCompNoticeRefNo;
                }
            }            
            private function getNetAmt(item:Object,column : DataGridColumn):String{
                
                if(item.typeOfRecord == "S"){
                    return item.amountStr;
                } else { //if(item.typeOfRecord == "R") 
                    return item.receiveNoticeAmountStr;
                }
                
            }            
            private function getCompletedAmount(item:Object,column : DataGridColumn):String {                
                return item.completedAmountStr;                
            }
            private function getGrossAmount(item:Object,column : DataGridColumn):String {                
                return item.grossAmountStr;                
            }
            private function getCompletionStatus(item:Object,column : DataGridColumn):String {
                
                if(item.typeOfRecord == "S"){
                    return item.settlementStatus;
                } else { //if(item.typeOfRecord == "R") 
                    return "";
                }
            }
            
            private function getMessageStatus(item:Object,column : DataGridColumn):String {
                
                if(item.typeOfRecord == "S"){
                    return ""
                } else { //if(item.typeOfRecord == "R") 
                    return item.messageStatus;
                }
            }           
			private function getFirmBank(item:Object,column : DataGridColumn):String {
				return item.firmBank;
			}
            private function getUnderlyingSecurityId(item:Object,column : DataGridColumn):String {
            	return item.underlyingSecurityId;
            }
            /*private function getEligibleBalance(item:Object,column : DataGridColumn):String{
                
                if(item.typeOfRecord == "S"){
                    return "";
                } else { //if(item.typeOfRecord == "R") 
                    return item.eligibleBalanceStr;
                }
                
            }*/  
            /**
             *  datagrid header release event handler to handle datagridcolumn sorting
             */
            public function dataGrid_headerRelease(evt:DataGridEvent):void {                
                //sortUtil.clickedColumn=evt.dataField;
                var dg:DataGrid = DataGrid(evt.currentTarget);
                sortUtil.clickedColumn = dg.columns[evt.columnIndex];        
            }
            public function showSettlementDetail(stlPk:String):void{
                var viewMode:String = "Instruction"; // Must be specified
                var parentApp :UIComponent = UIComponent(this.parentApplication);                
                XenosPopupUtils.showSettlementDetails(stlPk, 
                									  parentApp,
                									  this.parentApplication.xResourceManager.getKeyValue('stl.stlqry.label.settlementviewheader'),
                									  viewMode);
            }            
            public function showReceiveNoticeDetail(receiveNoticePk:String):void{                
                var parentApp :UIComponent = UIComponent(this.parentApplication);                
                XenosPopupUtils.showCaxReceiveNoticeDetail(receiveNoticePk,parentApp);
            }
            
            public function handleCheckBox(data:Object,prevStatSelection:Boolean):Boolean{
                var i:int;
                var obj:Object;
                if(prevStatSelection){ // deselected
                    for(i=0; i<operatopnArray.length; i++){
                        obj = operatopnArray[i];
//                         XenosAlert.info("obj [" + obj.clientSettlementInfoPk + "," + obj.receivedCompNoticeInfoPk + "] and data [" + data.clientSettlementInfoPk + "," + data.receivedCompNoticeInfoPk + "]" );
                        if(data.clientSettlementInfoPk != "-1"){
                            if(data.clientSettlementInfoPk == obj.clientSettlementInfoPk){
                                operatopnArray.removeItemAt(i);
                                return true;
                            }
                                
                        }else{
                            if(data.receivedCompNoticeInfoPk == obj.receivedCompNoticeInfoPk){
                                operatopnArray.removeItemAt(i);
                                return true;
                            }
                        }
                        
                    }
                    return false;
                }else{ //selected
                    if(operatopnArray.length > 0){
                        if(data.clientSettlementInfoPk != "-1" && isStlAlreadySelected()){
                            
                            XenosAlert.info(this.parentApplication.xResourceManager.getKeyValue('stl.message.error.alreadtstlrecordselected'));
                            return false;
                        }
                        operatopnArray.addItem(data);
                        return true; 
                    }else{
                        operatopnArray.addItem(data);
                        return true;   
                    }
                }
            }
            public function isStlAlreadySelected():Boolean{
                var obj:Object = null;
                for(var i:int=0; i<operatopnArray.length; i++){
                    obj = operatopnArray[i];
                    if(obj.clientSettlementInfoPk != "-1"){
                        return true;                            
                    }
                }
                return false;
            }
        ]]>
    </mx:Script>
    
    <mx:Script source="actionscripts/CaxReceiveNoticeQuery.as"/>
    <mx:Script source="actionscripts/CaxReceiveNoticeForceMatchHelper.as"/>
    
    <containers:states>
        <mx:State name="result">
            <mx:SetProperty target="{qry}" name="width" value="0%"/>
            <mx:SetProperty target="{rslt}" name="width" value="100%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{null}"/>
        </mx:State>
        <mx:State name="qryres">
            <mx:SetProperty target="{qry}" name="width" value="50%"/>
            <mx:SetProperty target="{rslt}" name="width" value="50%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
        <mx:State name="">
        	<mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
    </containers:states>
    <!-- Define Transition array with one Transition object.-->
    <containers:transitions>
        <!-- A transition for changing from any state to any state. -->
        <mx:Transition id="qryTransition" fromState="*" toState="*">
            <!-- Define a Parallel effect as the top-level effect.-->
            <mx:Parallel id="t1" targets="{[qry,rslt]}">
                <!-- Define a Move and Resize effect.-->
                <mx:Move  duration="400"/>
                <!--<mx:Resize duration="400"/>-->
            </mx:Parallel>
        </mx:Transition>
    </containers:transitions> 

    <cntrls:XenosHTTPService id="caxRcvdNoticeForceMatchRequest" 
         url="stl/caxReceiveNoticeDispatch.action?" 
         fault="XenosAlert.error(this.parentApplication.xResourceManager.getKeyValue('inf.label.error.occurred') + event.fault.faultString)" method="POST"
         result="loadResultPage(event)" resultFormat="xml">
    </cntrls:XenosHTTPService>
    <cntrls:XenosHTTPService id="caxRcvdNoticeCxlForceMatchRequest" 
         url="stl/caxReceiveNoticeDispatch.action?" 
         fault="XenosAlert.error(this.parentApplication.xResourceManager.getKeyValue('inf.label.error.occurred') + event.fault.faultString)" method="POST"
         result="loadResultPage(event)" resultFormat="xml">
    </cntrls:XenosHTTPService>    
    
    <mx:VBox width="100%" verticalGap="0" horizontalGap="0">    
    <mx:HBox width="100%" styleName="ExCoBgPanel">
        <mx:Image source="@Embed('../../assets/img/show_query.png')" toolTip="Query" buttonMode="true" click="currentState='';app.submitButtonInstance = submit;" />        
        <mx:Image source="@Embed('../../assets/img/show_result.png')" toolTip="Result" buttonMode="true" click="currentState='result'" />
        <mx:Image source="@Embed('../../assets/img/show_query_result.png')" toolTip="QueryResult" buttonMode="true" click="currentState='qryres'"/>        
    </mx:HBox>
    <mx:HRule strokeColor="#d2d9dc" strokeWidth="1" width="100%" />
    </mx:VBox>    
    
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
    <mx:VBox width="100%" height="100%">
    <mx:HDividedBox id="hdbox1" width="100%" height="100%" styleName="Padding4" liveDragging="true" creationComplete="{this.loadAll()}">    
        <mx:Canvas id="qry" width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">        
        <mx:VBox label="Query Criteria" width="100%" height="100%" styleName="HDivideStyle" >
            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('inf.title.search.criteria')}" fontWeight="bold"/>
            <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
            
            <mx:Grid width="100%" borderThickness="0">
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.eventtype')}" />
                    </mx:GridItem>
                    <mx:GridItem width="80%" borderThickness="0">
                        <mx:ComboBox id="eventTypes" labelField="label" prompt="Select"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.fundcode')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <xenospopup:FundPopUpHbox id="fundCodePop"/>
                    </mx:GridItem>
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.lmoffice')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:ComboBox id="lmOffice" labelField="label" prompt="Select"/>
                    </mx:GridItem>
                </mx:GridRow>    
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.ourbank')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <xenospopup:FinInstitutePopUpHbox id="ourBank" recContextItem="{populateFinInstRole()}"/>
                    </mx:GridItem>
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.ourbankac')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">                        
                        <xenospopup:AccountPopUpHbox id="ourSettleAccount" retContextItem="{returnContextItem}" recContextItem="{populateInvActContext()}"/>                           
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%">                        
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.stlqry.label.settledatefromto')}"/>
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:HBox>
                               <mx:DateField id="settlementDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
                               <mx:DateField id="settlementDateTo" formatString="YYYYMMDD" editable="true" width="90"/>
                        </mx:HBox>
                    </mx:GridItem> 
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.stlqry.label.tradedatefromto')}"/>
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:HBox>
                               <mx:DateField id="tradeDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
                               <mx:DateField id="tradeDateTo" formatString="YYYYMMDD" editable="true" width="90"/>
                        </mx:HBox>
                    </mx:GridItem>
                </mx:GridRow>                
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.stlqry.label.settlementccy')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <cntrls:CurrencyHBox id="ccy"/>                                            
                    </mx:GridItem>                    
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.underlyingsecuritycode')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <xenospopup:InstrumentPopUpHbox id="undSecurityId"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.stlqry.label.senderreferenceno')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:TextInput id="senderReferenceNo" restrict="{Globals.INPUT_PATTERN}"/>
                    </mx:GridItem>
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.settlementreferenceno')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:TextInput id="settleReferenceNo" restrict="{Globals.INPUT_PATTERN}"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%">                     
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.receivenoticerefno')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:TextInput id="rcvdCompNoticeRefNo" restrict="{Globals.INPUT_PATTERN}"/>                           
                    </mx:GridItem>
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.receivenoticeqry.label.msgstatus')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:ComboBox id="messageStatus" labelField="label" prompt="Select"/>
                    </mx:GridItem>
                </mx:GridRow>
            </mx:Grid>
            <mx:HBox width="100%" styleName="ButtonBackPanel">                              
                  <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submit" styleName="BtnStyle" click="{this._mode == 'query' ?  this.dispatchEvent(new Event('querySubmit')) : ''}" />
                  <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.reset')}" styleName="BtnStyle" click="{this._mode == 'query' ?  this.dispatchEvent(new Event('queryReset')) : ''}" />
                  <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('stl.receivenotice.btn.underOverReport')}" styleName="BtnStyle" click="generateOverUnderPdf()" />
            </mx:HBox>            
        </mx:VBox>        
        </mx:Canvas>
                
        <mx:VBox width="0%" height="100%" id="rslt" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="HDivideStyle" >
                <cntrls:XenosErrors id="errPage2" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
                <cntrls:QueryResultHeader  width="100%" id="qh" pdfFunction="dispatchPdfEvent" xlsFunction="dispatchXlsEvent" printFunction="dispatchPrintEvent" previousFunction="dispatchPrevEvent" nextFunction="dispatchNextEvent" startIndex="2"/>                
                <cntrls:XenosDataGrid id="receiveNoticeOutQueryResult" width="100%" height="90%" dataProvider="{queryResult}" sortableColumns="true" headerRelease="dataGrid_headerRelease(event)" variableRowHeight="true" horizontalScrollPolicy="auto" creationComplete="bindDataGrid()">                    
                    <cntrls:columns>
                        <mx:DataGridColumn textAlign="center" headerText="" dataField="selected" width="40" sortable="false" itemRenderer="com.nri.rui.stl.renderers.CenteredCheckBoxItemRenderer"/>                        
                        <mx:DataGridColumn headerText="" width="40" draggable="false" resizable="false" itemRenderer="com.nri.rui.core.renderers.ImgSummaryRenderer" sortable="false"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.eventtype')}" dataField="subEventTypeDescription" sortCompareFunction="sortUtil.sortString" minWidth="180"/>           
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.receivenoticeqry.label.datasource')}" width="120" dataField="dataSource" sortCompareFunction="sortUtil.sortString" itemRenderer="com.nri.rui.stl.renderers.CaxRcvdNoticeSwiftViewRenderer"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.referenceno')}" dataField="settlementReferenceNo" sortCompareFunction="sortUtil.sortString" itemRenderer="com.nri.rui.stl.renderers.CaxRcvdRefNoRenderer"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.receivenoticerefno')}" dataField="rcvdCompNoticeRefNo" sortCompareFunction="sortUtil.sortString"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.underlyingsecurity')}" dataField="underlyingInstrumentPk" labelFunction="getUnderlyingSecurityId" showDataTips="true" dataTipField="underlyingSecurityShortName" sortCompareFunction="sortUtil.sortString" itemRenderer="com.nri.rui.core.renderers.AdvInstrumentDetailsRenderer"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.underlyingsecurityname')}" dataField="underlyingSecurityShortName" sortCompareFunction="sortUtil.sortString"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.common.label.alternatesecurityid')}" dataField="alternateSecurityId" sortCompareFunction="sortUtil.sortString"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.lmoffice')}" dataField="lmOffice" sortCompareFunction="sortUtil.sortString" visible="false" minWidth="70"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.fund')}" dataField="fundCode" sortCompareFunction="sortUtil.sortString" itemRenderer="com.nri.rui.core.renderers.FundDetailsRenderer"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.ourbank')}" dataField="firmBankPk" labelFunction="getFirmBank" sortCompareFunction="sortUtil.sortString" itemRenderer="com.nri.rui.core.renderers.AdvFinancialInstitutionDetailsRenderer"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.ccy')}" dataField="ccyCode" sortCompareFunction="sortUtil.sortString"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.exdate')}" dataField="tradeDateStr" sortCompareFunction="sortUtil.sortString"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.paymentdate')}" dataField="valueDateStr"  sortCompareFunction="sortUtil.sortString"/>
                        <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.eligiblebalance')}" dataField="eligibleBalanceStr" sortCompareFunction="sortUtil.sortNumeric"/>
                        <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.couponrate')}" dataField="couponRate" visible="false" sortCompareFunction="sortUtil.sortNumeric" />
                        <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.cashrate')}" dataField="cashRate" visible="false" sortCompareFunction="sortUtil.sortNumeric"/>
                        <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.grossamount')}" dataField="" labelFunction="getGrossAmount" visible="false" sortCompareFunction="sortUtil.sortNumeric"/>
                        <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.stlqry.label.netamt')}" dataField="" labelFunction="getNetAmt"  sortCompareFunction="sortUtil.sortNumeric"/>
                        <mx:DataGridColumn textAlign="right" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.completedamount')}" dataField="" labelFunction="getCompletedAmount" sortCompareFunction="sortUtil.sortNumeric"/>
                        <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.completionstatus')}" dataField="" labelFunction="getCompletionStatus" visible="false" sortCompareFunction="sortUtil.sortString"/>
                       <mx:DataGridColumn textAlign="left" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.receivenoticeqry.label.msgstatus')}" dataField="" labelFunction="getMessageStatus" sortCompareFunction="sortUtil.sortString"/>                                                  

        
                    </cntrls:columns>
                 </cntrls:XenosDataGrid>    
                <mx:ControlBar width="100%">
                    <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.forcematch')}" click="doForceMatch()"/>
                    <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.markasmatch')}" click="doMarkAsMatch()"/>
                    <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.cxlforematch')}" click="doCxlForceMatch()"/>
                    <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('stl.label.receivenoticeqryca.cxlmarkasmatch')}" click="doCxlMarkAsMatch()"/>
                </mx:ControlBar>
                                
        </mx:VBox>    
    </mx:HDividedBox>
    </mx:VBox>    
    </mx:Canvas>
</containers:XenosQueryModule>

<?xml version="1.0" encoding="utf-8"?>
<containers:XenosQueryModule 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:containers="com.nri.rui.core.containers.*" 
	xmlns:frmtrs="com.nri.rui.core.formatters.*" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:cntrls="com.nri.rui.core.controls.*" 
	xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
	xmlns:valdtrs="com.nri.rui.core.validators.*" 
	layout="vertical" 
	percentWidth="100" 
	percentHeight ="100" 
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import mx.events.ValidationResultEvent;
			import com.nri.rui.core.utils.XenosStringUtils;
			import mx.utils.StringUtil;
			import com.nri.rui.core.controls.XenosAlert;
			import com.nri.rui.core.renderers.StatusRenderer;
			import com.nri.rui.core.RendererFectory;
			import com.nri.rui.stl.renderers.BankTransferQueryRenderer;
			import com.nri.rui.core.renderers.ImgSummaryRenderer;
			
			    
		    /**
			 * This method should be called on creationComplete of the datagrid 
			 */ 
			private function bindDataGrid():void {
				qh.dgrid = resultSummary;
			}
		]]>
	</mx:Script>
	<mx:Script source="actionscripts/BankTransferQueryModule.as"/>
	
    
     <containers:states>
    	<mx:State name="result">
            <mx:SetProperty target="{qry}" name="width" value="0%"/>
            <mx:SetProperty target="{rslt}" name="width" value="100%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{null}"/>
        </mx:State>
        <mx:State name="qryres">
            <mx:SetProperty target="{qry}" name="width" value="50%"/>
            <mx:SetProperty target="{rslt}" name="width" value="50%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
        <mx:State name="">
        	<mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
    </containers:states>
    <!-- Define Transition array with one Transition object.-->
    <containers:transitions>
        <!-- A transition for changing from any state to any state. -->
        <mx:Transition id="qryTransition" fromState="*" toState="*">
            <!-- Define a Parallel effect as the top-level effect.-->
            <mx:Parallel id="t1" targets="{[qry,rslt]}">
                <!-- Define a Move and Resize effect.-->
                <mx:Move  duration="400"/>
                <!--<mx:Resize duration="400"/>-->
            </mx:Parallel>
        </mx:Transition>
    </containers:transitions> 
    
    <frmtrs:XenosNumberFormatter id="numberFormatter" useThousandsSeparator="true" />
	
        
    <mx:VBox width="100%" verticalGap="0" horizontalGap="0" id="screenNavigater">    
    <mx:HBox width="100%" styleName="ExCoBgPanel">
    	<mx:Image source="@Embed('../../assets/img/show_query.png')" toolTip="Query" buttonMode="true" click="currentState='';"  />    	
    	<mx:Image source="@Embed('../../assets/img/show_result.png')" toolTip="Result" buttonMode="true" click="currentState='result'" />
    	<mx:Image source="@Embed('../../assets/img/show_query_result.png')" toolTip="QueryResult" buttonMode="true" click="currentState='qryres'"/>    	
    </mx:HBox>
    </mx:VBox>
	
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto"  verticalScrollPolicy="auto">
		<mx:VBox width="100%" height="100%">
		<mx:HDividedBox id="hdbox1" width="100%" height="100%" styleName="Padding4" liveDragging="true" creationComplete="{this.loadAll()}"  >
		<!--<containers:CollapsibleHDividedBox id="hdbox1" width="100%" height="100%" x="0" y="0" liveDragging="true" creationComplete="{}" paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6" >-->
			
			<mx:Canvas id="qry" width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
			<mx:VBox label="Query Criteria" width="100%" height="100%" styleName="HDivideStyle" >
				<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('inf.title.search.criteria')}" fontWeight="bold"/>
				<cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
			
	            <mx:HRule strokeColor="#d2d9dc" strokeWidth="1" width="100%" />
				<!--<flexlib:WindowShade id="ws1" tabChildren="{ws1.opened=false}" styleName="linkButtonWindowShade" label="Optional Fields - Group 1" width="100%">-->
				<mx:Grid width="100%" borderThickness="0">
	                    <mx:GridRow width="100%">
	                        <mx:GridItem width="20%" borderThickness="0">
	                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.settlementreferenceno')}"/>
	                        </mx:GridItem>
	                        <mx:GridItem width="30%" borderThickness="0">
	                            <mx:TextInput id="stlRefNo" restrict="{Globals.INPUT_PATTERN}"/>
	                        </mx:GridItem> 
	                        <mx:GridItem width="20%" borderThickness="0">
	                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.securitycode')}"/>
	                        </mx:GridItem>
	                        <mx:GridItem width="30%" borderThickness="0">
	                           <xenospopup:InstrumentPopUpHbox id="security"/>
	                        </mx:GridItem>
	                    </mx:GridRow>	
	                    
	               	 	<mx:GridRow width="100%">
		                        <mx:GridItem width="20%" borderThickness="0">
		                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.settlementaccountno')}" />
		                        </mx:GridItem>
		                        <mx:GridItem width="30%" borderThickness="0">
		                           <xenospopup:AccountPopUpHbox 
			                           	id="stlAccountNo" 
			                           	recContextItem="{populateContext()}"/>
		                        </mx:GridItem>
		                        <mx:GridItem width="20%" borderThickness="0">
		                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.transactiontype')}" />
		                        </mx:GridItem>
		                        <mx:GridItem width="30%" borderThickness="0">
		                           <mx:ComboBox id="transactionType" labelField="label"/>
		                        </mx:GridItem>                         
	                    </mx:GridRow>
	                    
	                   <mx:GridRow width="100%">
	                        <mx:GridItem width="20%" borderThickness="0">
	                            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('stl.label.valuedatefromto')}" />
	                        </mx:GridItem>
	                        <mx:GridItem width="30%" borderThickness="0">
	                             <mx:DateField id="valueDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
	                             <mx:DateField id="valueDateTo"  formatString="YYYYMMDD" editable="true" width="90"/>
	                        </mx:GridItem>
	                        <mx:GridItem width="20%" borderThickness="0"/>
	                        <mx:GridItem width="30%" borderThickness="0"/>
	                   </mx:GridRow>
	                   
		            </mx:Grid>
		            
		            <!-- Sort Order -->
					<flexlib:WindowShade id="ws3" tabChildren="{ws3.opened}" styleName="linkButtonWindowShade" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.label.sortorder.fields')}" opened="true" width="100%">
		                <mx:Grid width="100%" borderThickness="0">
		                    <mx:GridRow width="100%">
		                        <mx:GridItem width="100%" borderThickness="0">
		                            <mx:HBox width="100%">
		                                <mx:ComboBox id="sortField1" labelField="label" change="sortOrder1Update()"/>
			                            <mx:ComboBox id="sortField2" labelField="label" change="sortOrder2Update()"/>
			                            <mx:ComboBox id="sortField3" labelField="label" change="sortOrder3Update()"/>
		                            </mx:HBox> 
		                        </mx:GridItem>                         
		                    </mx:GridRow>
		                </mx:Grid>
		            </flexlib:WindowShade>
	
				<mx:HBox width="100%" styleName="ButtonBackPanel">
	   	           <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submit" styleName="BtnStyle" click="{this.dispatchEvent(new Event('querySubmit'))}" />
	               <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.reset')}" styleName="BtnStyle" click="{this.dispatchEvent(new Event('queryReset'))}" />
		        </mx:HBox>
	
			</mx:VBox>
			
			</mx:Canvas>
					
			<mx:VBox width="0%" height="100%" id="rslt" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="HDivideStyle" >			
		         <cntrls:QueryResultHeader id="qh" printFunction="dispatchPrintEvent" previousFunction="dispatchPrevEvent" nextFunction="dispatchNextEvent" startIndex="{this.mode == 'query' ? 1 : 2}" creationComplete="pdfXlsHide()"/>
			
				<mx:DataGrid id="resultSummary" width="100%" height="100%" dataProvider="{queryResult}" sortableColumns="true" variableRowHeight="true" horizontalScrollPolicy="auto" creationComplete="bindDataGrid()" headerRelease="dataGrid_headerRelease(event)"> 
				    <mx:columns>
				    	   <mx:DataGridColumn headerText="" width="40" draggable="false" resizable="false" id="imgRenderer" itemRenderer="{mode == 'query' ? new RendererFectory(ImgSummaryRenderer) : new RendererFectory(BankTransferQueryRenderer,mode)}" />
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.settlementreferenceno')}" dataField="settlementReferenceNo" itemRenderer="com.nri.rui.stl.renderers.SettlementInstructionDetailRenderer" width="200"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.securitycode')}" dataField="instrumentPk" labelFunction="getSecurityCode" width="150" itemRenderer="com.nri.rui.core.renderers.AdvInstrumentDetailsRenderer"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.securityname')}" dataField="securityShortName" width="200"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('ref.common.label.alternatesecurityid')}" dataField="alternateSecurityId" width="200"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.quantity')}" dataField="quantityDispStr" width="150" textAlign="right"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.valuedate')}" dataField="valueDateStr" width="100"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.frombanksettleaccount')}" dataField="ourSettleAcPk" labelFunction="getOurBankSettleAcc" width="200" itemRenderer="com.nri.rui.core.renderers.AdvAccountDetailsRenderer"/>
				    	   <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.tobanksettleaccount')}" dataField="cpIntSettleAcPk" labelFunction="getCpBankSettleAcc" width="200" itemRenderer="com.nri.rui.core.renderers.AdvAccountDetailsRenderer"/>
				    	   <mx:DataGridColumn id="statusCol" headerText="{this.parentApplication.xResourceManager.getKeyValue('stl.label.status')}" dataField="status" width="200"/>
		           </mx:columns>
				 </mx:DataGrid>
			</mx:VBox>
		</mx:HDividedBox>
	    </mx:VBox>
    
    </mx:Canvas>  
		 
</containers:XenosQueryModule>

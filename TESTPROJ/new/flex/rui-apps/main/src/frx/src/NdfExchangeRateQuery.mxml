<?xml version="1.0" encoding="utf-8"?>
<containers:XenosQueryModule xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:containers="com.nri.rui.core.containers.*" xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:cntrls="com.nri.rui.core.controls.*" xmlns:frmtrs="com.nri.rui.core.formatters.*" 
	xmlns:valdtrs="com.nri.rui.core.validators.*" xmlns:xenospopup="com.nri.rui.ref.popupImpl.*" 
	layout="vertical" percentWidth="100" percentHeight ="100" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
	<mx:Script>
		<![CDATA[
			import com.nri.rui.core.controls.XenosDate;
			import com.nri.rui.core.utils.XenosStringUtils;
			import mx.utils.StringUtil;
			import com.nri.rui.core.controls.XenosAlert;
			import com.nri.rui.core.RendererFectory;
			import com.nri.rui.frx.renderers.NdfExchangeRateCancelRenderer;
			import com.nri.rui.core.renderers.ImgSummaryRenderer;
			import mx.core.Application;
	       	import mx.events.ValidationResultEvent;
			import com.nri.rui.core.renderers.StatusRenderer;	       	

			    
    /**
	 * This method should be called on creationComplete of the datagrid 
	 */ 
	 private function bindDataGrid():void {
		qh.dgrid = resultSummary;
	}
   public function validateDate(event:FocusEvent,data:Object):void{
 	if(this.mode=="amend" && data.hasOwnProperty("selected") && (data.selected=='true' || data.selected==true)){
    var targetObj:DateField = DateField(event.currentTarget);
    	dateval1.source = targetObj;  
    	var dateStr : String = targetObj.data.baseDate; 
    	if(!XenosStringUtils.isBlank(dateStr)){
    		if( dateval1.validate().type!=ValidationResultEvent.VALID){
	        	event.preventDefault();
	    		XenosAlert.error("Enter a valid base date");
	    	}	
    	}     
	    
 	 }  
	}
    public function formatString(event:FocusEvent):void{
        var targetObj:TextInput = TextInput(event.currentTarget);
        numVal1.source = targetObj;
        numVal1.handleNumericField(numberFormatter);
    }


		]]>
	</mx:Script>
	<mx:Script source="actionscripts/NdfExchangeRateQuery.as"/>    
     <containers:states>
    	<mx:State name="result">
            <mx:SetProperty target="{qry}" name="width" value="0%"/>
            <mx:SetProperty target="{rslt}" name="width" value="100%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{null}"/>
        </mx:State>
        <mx:State name="qryres">
            <mx:SetProperty target="{qry}" name="width" value="50%"/>
            <mx:SetProperty target="{rslt}" name="width" value="50%"/>
            <mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State>
        <mx:State name="">
        	<mx:SetProperty target="{app}" name="submitButtonInstance" value="{submit}"/>
        </mx:State> 
    </containers:states>
    <!-- Define Transition array with one Transition object.-->
    <containers:transitions>
        <!-- A transition for changing from any state to any state. -->
        <mx:Transition id="qryTransition" fromState="*" toState="*">
            <!-- Define a Parallel effect as the top-level effect.-->
            <mx:Parallel id="t1" targets="{[qry,rslt]}">
                <!-- Define a Move and Resize effect.-->
                <mx:Move  duration="400"/>
                <!--<mx:Resize duration="400"/>-->
            </mx:Parallel>
        </mx:Transition>
    </containers:transitions>
    <frmtrs:XenosNumberFormatter id="numberFormatter" useThousandsSeparator="true" />
   <valdtrs:XenosNumberValidator id="numVal1" requiredFieldError=""
        invalidCharError="Please enter a valid value for Exchange Rate" exceedsMaxError="10 digits are allowed before decimal point" negativeError="Please enter a valid value for Exchange Rate" separationError="" property="text" 
        allowNegative="false" domain="real" lowerThanMinError="" maxValue="9999999999" minValue="" invalidFormatCharsError="Please enter a valid value for Exchange Rate" decimalPointCountError="Please enter a valid value for Exchange Rate" precision="10" precisionError="10 digits are allowed after decimal point" />
        
   <mx:DateValidator id="dateval1" inputFormat="YYYYMMDD" property="text" required="true" requiredFieldError="Enter a valid date" invalidCharError="Enter a valid date" />

    <mx:VBox width="100%" verticalGap="0" horizontalGap="0" id="screenNavigater">    
    <mx:HBox width="100%" styleName="ExCoBgPanel">
    	<mx:Image source="@Embed('../../assets/img/show_query.png')" toolTip="Query" buttonMode="true" click="currentState='';app.submitButtonInstance = submit;"  />    	
    	<mx:Image source="@Embed('../../assets/img/show_result.png')" toolTip="Result" buttonMode="true" click="currentState='result'" />
    	<mx:Image source="@Embed('../../assets/img/show_query_result.png')" toolTip="QueryResult" buttonMode="true" click="currentState='qryres';app.submitButtonInstance = submit;"/>    	
    </mx:HBox>
    <mx:HRule strokeColor="#d2d9dc" strokeWidth="1" width="100%" />
    </mx:VBox>
	
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto"  verticalScrollPolicy="auto">
	<mx:VBox width="100%" height="100%">
	<mx:HDividedBox id="hdbox1" width="100%" height="100%" styleName="Padding4" liveDragging="true" creationComplete="{this.loadAll()}"  >
	<!--<containers:CollapsibleHDividedBox id="hdbox1" width="100%" height="100%" x="0" y="0" liveDragging="true" creationComplete="{}" paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6" >-->
		
		<mx:Canvas id="qry" width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
		<mx:VBox label="{this.parentApplication.xResourceManager.getKeyValue('core.query.criteria')}" width="100%" height="100%" styleName="HDivideStyle" >
			<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.exchangerate.label.querycriteria')}" fontWeight="bold"/>
			<cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
		
			<!--<flexlib:WindowShade id="ws1" tabChildren="{ws1.opened=false}" styleName="linkButtonWindowShade" label="Optional Fields - Group 1" width="100%">-->
			<mx:Grid width="100%" borderThickness="0">
	    		<mx:GridRow width="100%">
	         		<mx:GridItem width="20%" borderThickness="0">
	              		<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.exchangerate.label.basedatefromto')}" />
	         		</mx:GridItem>
	         		<mx:GridItem width="30%" borderThickness="0">
	              		<mx:HBox>
	           				<mx:DateField id="baseDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
	           				<mx:DateField id="baseDateTo" formatString="YYYYMMDD" editable="true" width="90"/>
				  		</mx:HBox>                         
	          		</mx:GridItem>
	         		<mx:GridItem width="20%" borderThickness="0">
	            		<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.exchangerate.label.revaluationccy')}" />
	        		</mx:GridItem>
	        		<mx:GridItem width="30%" borderThickness="0">
	            		<cntrls:CurrencyHBox id="revaluationCcyBox"/>
	        		</mx:GridItem>       
	    		</mx:GridRow>	                    
	    		<mx:GridRow width="100%">
	        		<mx:GridItem width="20%" borderThickness="0">
	             		<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.exchangerate.label.tradereferenceno')}" />
	        		</mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                       	<mx:TextInput id="tradeReferenceNo" restrict="{Globals.INPUT_PATTERN}"/>
                    </mx:GridItem>
                    <mx:GridItem width="20%" borderThickness="0" visible="{mode == 'query'}">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.label.status')}"/>
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0" visible="{mode == 'query'}">
                       	<mx:ComboBox id="status" labelField="label" prompt="Select" />
                       	<mx:TextInput id="statusTxt" editable="false" includeInLayout="false" visible="false"/>
                    </mx:GridItem>
	    		</mx:GridRow>
	    		<mx:GridRow width="100%">
	         		<mx:GridItem width="20%" borderThickness="0">
	              		<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.exchangerate.label.entrydatefromto')}" />
	         		</mx:GridItem>
	         		<mx:GridItem width="30%" borderThickness="0">
	              		<mx:HBox>
	           				<mx:DateField id="entryDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
	           				<mx:DateField id="entryDateTo" formatString="YYYYMMDD" editable="true" width="90"/>
				  		</mx:HBox>                         
	          		</mx:GridItem>
	         		<mx:GridItem width="20%" borderThickness="0">
	              		<mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('frx.exchangerate.label.updatedatefromto')}" />
	         		</mx:GridItem>
	         		<mx:GridItem width="30%" borderThickness="0">
	              		<mx:HBox>
	           				<mx:DateField id="updateDateFrom"  formatString="YYYYMMDD" editable="true" width="90"/>
	           				<mx:DateField id="updateDateTo" formatString="YYYYMMDD" editable="true" width="90"/>
				  		</mx:HBox>                         
	          		</mx:GridItem>
	    		</mx:GridRow>	                    
	   		</mx:Grid>
	
			<!-- Sort Order -->
			<flexlib:WindowShade id="ws3" tabChildren="{ws3.opened}" styleName="linkButtonWindowShade" label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.label.sortorder.fields')}" opened="true" width="100%">
	        	<mx:Grid width="100%" borderThickness="0">
	            	<mx:GridRow width="100%">
	                	<mx:GridItem width="100%" borderThickness="0">
	                    	<mx:HBox width="100%">
	                        	<mx:ComboBox id="sortField1" labelField="label" change="sortOrder1Update()" width="200" itemRenderer="mx.controls.Label"></mx:ComboBox>
								<mx:ComboBox id="sortField2" labelField="label" change="sortOrder2Update()" width="200" itemRenderer="mx.controls.Label"> </mx:ComboBox>
								<mx:ComboBox id="sortField3" labelField="label" width="200" itemRenderer="mx.controls.Label"> </mx:ComboBox>
	                    	</mx:HBox> 
	                	</mx:GridItem>                         
	            	</mx:GridRow>
	        	</mx:Grid>
	    	</flexlib:WindowShade>

			<mx:HBox width="100%" styleName="ButtonBackPanel">
   	           <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submit" styleName="BtnStyle" click="{this.mode == 'query' ?  this.dispatchEvent(new Event('querySubmit')) : (this.mode == 'amend' ? this.dispatchEvent(new Event('amendSubmit')) : this.dispatchEvent(new Event('cancelSubmit')))}" />
               <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.reset')}" styleName="BtnStyle" click="{this.mode == 'query' ?  this.dispatchEvent(new Event('queryReset')) : (this.mode == 'amend' ? this.dispatchEvent(new Event('amendReset')) : this.dispatchEvent(new Event('cancelReset')))}" />
	        </mx:HBox>
		</mx:VBox>
		
		</mx:Canvas>
				
		<mx:VBox width="0%" height="100%" id="rslt" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="HDivideStyle" >			
	         <cntrls:QueryResultHeader id="qh" printFunction="dispatchPrintEvent" pdfFunction="dispatchPdfEvent" xlsFunction="dispatchXlsEvent" previousFunction="dispatchPrevEvent" nextFunction="dispatchNextEvent" skipColumnArray = "{skippedColumns}" />
		
		<cntrls:CustomDataGrid id="resultSummary" width="100%" height="100%" dataProvider="{queryResult}" variableRowHeight="true" horizontalScrollPolicy="auto" creationComplete="bindDataGrid()" editable="true"> 
		    <cntrls:columns>
                   	<mx:DataGridColumn textAlign="center" headerText="" dataField="selected" width="40" draggable="false" resizable="false" itemRenderer="com.nri.rui.core.renderers.SelectItem" headerRenderer="com.nri.rui.core.renderers.SelectAllItem" sortable="false" visible="{mode == 'amend'}" editable="false"/>		    		    	   
		    	   	<mx:DataGridColumn headerText="" width="40" draggable="false" resizable="false" id="imgRenderer" itemRenderer="{mode == 'cancel'? new RendererFectory(NdfExchangeRateCancelRenderer,mode) : new RendererFectory(ImgSummaryRenderer)}" visible="{mode == 'query' || mode == 'cancel'}" editable="false"/>
		    	    <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.referenceno')}" width="200" dataField="referenceNo" itemRenderer="com.nri.rui.frx.renderers.FrxTradeDetailRenderer" editable="false"/>
		    	    <mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.basedate')}" width="150" dataField="baseDate" visible="{mode == 'query'|| mode == 'cancel'}" editable="false"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.revaluationccy')}" width="230" dataField="revaluationCcy" editable="false"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.calculationtype')}" width="200" dataField="calculationType" editable="false"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.exchangerate')}" visible="{mode == 'query'|| mode == 'cancel'}" dataField="exchangeRate"  editable="false" textAlign="right"/>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.exchangerate')}" width="170" visible="{mode == 'amend'}" dataField="exchangeRate"  editable="true" rendererIsEditor="true" textAlign="right">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:TextInput focusOut="outerDocument.formatString(event);" valueCommit="refreshData(event)" creationComplete="init()">
                                <mx:Script>
                                    
                                    <![CDATA[
                                    	import mx.events.FlexEvent;
                                        import mx.controls.dataGridClasses.DataGridListData;
                                        
                                        public function refreshData(event:FlexEvent):void{
                                        	data.exchangeRate = this.text;
                                        	
                                        }                                      
                                         public override function set data(value:Object):void{
                                            // This will fire off the FlexEvent.DATA_CHANGE Event
                                            
                                            super.data = value;
                                            this.text = data.exchangeRate;
                                            // if the value is null this cell is empty
                                            if(value == null){
                                            // clear all the controls
                                            return;
                                            }
                                            // set the controls with this data
                                            } 
                                        
                                    ]]>
                                </mx:Script>
                                </mx:TextInput> 
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
					<mx:DataGridColumn headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.basedate')}" width="120" dataField="baseDate" visible="{mode == 'amend'}" editable="true" rendererIsEditor="true">
                    <mx:itemRenderer>
                        <mx:Component>
							<mx:DateField textAlign="center" editable="true" formatString="YYYYMMDD" width="90" change="onDateChange()" valueCommit="onDateChange()" dataChange="onDateChange()" focusOut="outerDocument.validateDate(event,data);" >
							    <mx:Script>
							        <![CDATA[
							            import mx.events.FlexEvent;
							            import com.nri.rui.core.utils.XenosStringUtils;
							            private var _data:Object;
							            override public function set data(value:Object):void {
							                _data = value;
							                
							                try {
							                	if(value.baseDate != null){
							                		text = value.baseDate.toString();
								                    selectedDate = stringToDate(text, "YYYYMMDD");
								                    this.dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
							                	}
							                    
							                } catch(e:Error) {
							                    trace(e.message);
							                }
							            }
							                                                
							            override public function get data():Object {
							            	if(_data!=null) {
							            	    //_data.stlDateStr = text;
							            	}
							                return _data;
							            }
							            
							            private function onDateChange():void{
							            	if(!XenosStringUtils.isBlank(text))
							            		selectedDate = stringToDate(text, "YYYYMMDD");
							                 if(_data!=null) {
                                                _data.baseDate = text;
                                            }
                                            
                                            this.enabled=true;
							            }
							        ]]>
							    </mx:Script>
							</mx:DateField>
						</mx:Component>
						</mx:itemRenderer>  
					</mx:DataGridColumn>                 

					<mx:DataGridColumn id="statusCol" headerText="{this.parentApplication.xResourceManager.getKeyValue('frx.label.status')}" itemRenderer="{new ClassFactory(StatusRenderer)}" width="80" dataField="status" visible="{mode == 'query'}"/>
          </cntrls:columns>
		 </cntrls:CustomDataGrid>
		          <mx:HBox visible="{mode == 'amend'}" includeInLayout="{mode == 'amend'}">
            <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submitResult" styleName="BtnStyle" click="showConfirmModule()"/>
            <mx:Button label="Reset"  id="reset" styleName="BtnStyle" click="resetBaseDateCol();resetExchangeRateCol();"/>
         </mx:HBox>

		</mx:VBox>
	</mx:HDividedBox>
    </mx:VBox>    
    </mx:Canvas>  
		 
</containers:XenosQueryModule>

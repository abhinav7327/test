<?xml version="1.0" encoding="utf-8"?>

<!--Mxml file for Interest Rate Swap Query Implementation -->

<containers:XenosQueryModule xmlns:mx="http://www.adobe.com/2006/mxml" 
                            xmlns:containers="com.nri.rui.core.containers.*" 
                            xmlns:flexlib="http://code.google.com/p/flexlib/" 
                            xmlns:cntrls="com.nri.rui.core.controls.*" 
                            xmlns:xenospopup="com.nri.rui.ref.popupImpl.*"                             
                            xmlns:frmtrs="com.nri.rui.core.formatters.*" 
                            xmlns:valdtrs="com.nri.rui.core.validators.*" 
                            layout="vertical" 
                            percentWidth="100" 
                            percentHeight ="100" 
                            horizontalScrollPolicy="off" 
                            verticalScrollPolicy="off" >
    <mx:Script>
        <![CDATA[
            import mx.events.ValidationResultEvent;
            import com.nri.rui.core.Globals;
            import com.nri.rui.core.RendererFectory;
            import com.nri.rui.core.renderers.ImgSummaryRenderer;
            import mx.containers.TitleWindow;
            import mx.collections.ArrayCollection;
            import mx.events.CloseEvent;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.controls.CheckBox;
            import mx.managers.PopUpManager;            
            
            import com.nri.rui.core.controls.XenosAlert;
            import com.nri.rui.core.controls.CustomDataGrid;
            import mx.events.DataGridEvent;
            
            import com.nri.rui.adp.renderers.SegregatedBalanceDetailRenderer
                        
            [Embed(source="../../assets/img/inf/addcolunm.png")]
                
            
            [Bindable]private var icoColumns:Class;
            public static var popupColumns:TitleWindow = null;
            public var gridColumns:ArrayCollection = new ArrayCollection();
            private function changeCurrentState():void{
                currentState = "result";
                app.submitButtonInstance = null;
            }
            
            private function displayVersionNo(item:Object,column : DataGridColumn):String{
                return item.referenceNo+"-"+item.versionNoStr;
                
            }
            
           /**
            *  datagrid header release event handler to handle datagridcolumn sorting
            */
            public function dataGrid_headerRelease(evt:DataGridEvent):void {                
                var dg:CustomDataGrid = CustomDataGrid(evt.currentTarget);
                sortUtil.clickedColumn = dg.columns[evt.columnIndex];       
            }
            
            /**
             * This method should be called on creationComplete of the datagrid 
             */ 
             private function bindDataGrid():void {
                qh.dgrid = resultSummary;
            }
            
        ]]>
    </mx:Script>
    
    <mx:Script source="actionscripts/AdpSegregateBalanceQuery.as"/>
    
    <containers:states>
        <mx:State name="result">
            <mx:SetProperty target="{qry}" name="width" value="0%"/>
            <mx:SetProperty target="{rslt}" name="width" value="100%"/>
        </mx:State>
        <mx:State name="qryres">
            <mx:SetProperty target="{qry}" name="width" value="50%"/>
            <mx:SetProperty target="{rslt}" name="width" value="50%"/>
        </mx:State>
    </containers:states>
    <!-- Define Transition array with one Transition object.-->
    <containers:transitions>
        <!-- A transition for changing from any state to any state. -->
        <mx:Transition id="qryTransition" fromState="*" toState="*">
            <!-- Define a Parallel effect as the top-level effect.-->
            <mx:Parallel id="t1" targets="{[qry,rslt]}">
                <!-- Define a Move and Resize effect.-->
                <mx:Move  duration="400"/>
                <!--<mx:Resize duration="400"/>-->
            </mx:Parallel>
        </mx:Transition>
    </containers:transitions>
        
    <mx:VBox width="100%" verticalGap="0" horizontalGap="0" id="screenNavigater">    
        <mx:HBox width="100%" styleName="ExCoBgPanel">
            <mx:Image source="@Embed('../../assets/img/show_query.png')" toolTip="{this.parentApplication.xResourceManager.getKeyValue('adp.tooltip.query')}" buttonMode="true" click="currentState='';app.submitButtonInstance = submit;"  />      
            <mx:Image source="@Embed('../../assets/img/show_result.png')" toolTip="{this.parentApplication.xResourceManager.getKeyValue('adp.tooltip.result')}" buttonMode="true" click="currentState='result'" />
            <mx:Image source="@Embed('../../assets/img/show_query_result.png')" toolTip="{this.parentApplication.xResourceManager.getKeyValue('adp.tooltip.qryrslt')}" buttonMode="true" click="currentState='qryres';app.submitButtonInstance = submit;"/>     
        </mx:HBox>
        <mx:HRule strokeColor="#d2d9dc" strokeWidth="1" width="100%" />
    </mx:VBox>
    <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
    <mx:VBox width="100%" height="100%">
    <mx:HDividedBox id="hdbox1" width="100%" height="100%" styleName="Padding4" liveDragging="true" creationComplete="{this.loadAll()}"  >   
        
        <mx:Canvas id="qry" width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
        <mx:VBox label="Query Criteria" width="100%" height="100%" styleName="HDivideStyle" >
            <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('inf.title.search.criteria')}" fontWeight="bold"/>         
            <cntrls:XenosErrors id="errPage" width="100%" color="#FF0000" backgroundAlpha="0" borderStyle="none"/>
                
            <mx:Grid width="100%" borderThickness="0">            
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.securityCode')}"/>
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <xenospopup:InstrumentPopUpHbox id="security"/>
                    </mx:GridItem>                    
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.fundCode')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <xenospopup:FundPopUpHbox id="fundPopUp"/>                           
                    </mx:GridItem>
                </mx:GridRow>
                
                <mx:GridRow width="100%">
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.segregateDateFrom')}" />
                    </mx:GridItem>                        
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:DateField id="segregateDateFrom" formatString="YYYYMMDD" editable="true" width="90"/>
                    </mx:GridItem>                    
                    <mx:GridItem width="20%" borderThickness="0">
                        <mx:Label text="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.segregateDateTo')}" />
                    </mx:GridItem>
                    <mx:GridItem width="30%" borderThickness="0">
                        <mx:DateField id="segregateDateTo" formatString="YYYYMMDD" editable="true" width="90"/>                           
                    </mx:GridItem>
                </mx:GridRow>               
             </mx:Grid>            
            
            <mx:HBox width="100%" styleName="ButtonBackPanel">
               <cntrls:XenosButton label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.submit')}" id="submit" styleName="BtnStyle" click="{this.dispatchEvent(new Event('querySubmit'))}" />
               <mx:Button label="{this.parentApplication.xResourceManager.getKeyValue('inf.form.button.label.reset')}" styleName="BtnStyle" click="{this.dispatchEvent(new Event('queryReset'))}" />
            </mx:HBox>
            
        </mx:VBox>      
        </mx:Canvas>
                
        <mx:VBox width="0%" height="100%" id="rslt" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="HDivideStyle" >          
            <cntrls:QueryResultHeader id="qh" printFunction="dispatchPrintEvent" pdfFunction="dispatchPdfEvent" xlsFunction="dispatchXlsEvent" previousFunction="dispatchPrevEvent" nextFunction="dispatchNextEvent" startIndex="{this.mode == 'query' ? 1 : 2}"/>
            <cntrls:CustomDataGrid id="resultSummary" width="100%" height="100%" dataProvider="{queryResult}" sortableColumns="true" headerRelease="dataGrid_headerRelease(event)" variableRowHeight="true" horizontalScrollPolicy="auto" creationComplete="bindDataGrid()">
                <cntrls:columns>
                   <mx:DataGridColumn headerText="" width="40" draggable="false" resizable="false" id="imgRenderer2" itemRenderer="{new RendererFectory(ImgSummaryRenderer)}" />
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="referenceNo" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.referenceNo')}" itemRenderer="com.nri.rui.adp.renderers.SegregatedBalanceDetailRenderer"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="fundCode" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.fundCode')}" itemRenderer="com.nri.rui.core.renderers.FundDetailsRenderer"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="fundName" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.fundName')}"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="securityId" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.securityCode')}"  itemRenderer="com.nri.rui.core.renderers.InstrumentDetailsRenderer"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="securityName" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.securityName')}"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="alternateSecurityId" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.altSecurityCode')}"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="segregateDateFromStr" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.segregateDateFrom')}"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="segregateDateToStr" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.segregateDateTo')}"/>
                   <mx:DataGridColumn textAlign="right" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortNumeric" dataField="quantityStr" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.quanity')}"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="createdBy" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.entryBy')}"/>
                   <mx:DataGridColumn textAlign="left" sortable="true" visible="true" showDataTips="true" sortCompareFunction="sortUtil.sortString" dataField="status" headerText="{this.parentApplication.xResourceManager.getKeyValue('adp.segregatebalance.label.status')}" itemRenderer="com.nri.rui.core.renderers.StatusRenderer"/>                                  
                </cntrls:columns> 
            </cntrls:CustomDataGrid>
        </mx:VBox>
            
    </mx:HDividedBox>
    </mx:VBox>
    
    </mx:Canvas>
    
</containers:XenosQueryModule>

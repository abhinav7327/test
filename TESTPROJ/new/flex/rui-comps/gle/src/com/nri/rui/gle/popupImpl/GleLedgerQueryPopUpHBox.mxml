<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" horizontalGap="0" xmlns:xenos="com.nri.rui.core.controls.*">
     
         <mx:TextInput id="gleCode" restrict="{Globals.INPUT_PATTERN}" width="100"/>
     <!-- The account popup control-->
     <mx:Image id="glePopup" source="@Embed('../../../../../assets/popup_icon.png')" 
               verticalAlign="middle" horizontalAlign="center" click="showPopUp(recContextItem,retContextItem);"/>    
     
     <mx:Script>
        <![CDATA[
        	import com.nri.rui.core.startup.XenosApplication;
        	import com.nri.rui.core.Globals; 
        //start of script   
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;
        import mx.core.UIComponent;
        
        import com.nri.rui.gle.popupImpl.GleLedgerQueryPopUp;
        import com.nri.rui.core.utils.HiddenObject;
        
        
        /*
         * Open the Account PopUp Window.
         * Cast the return value of the createPopUp() method
         * to AccountPopup, the name of the component containing
         *  the PopupWindow container
         */
         
           //Items returning through context - Non display objects
         [Bindable]
           public var retContextItem:ArrayCollection = new ArrayCollection();
           [Bindable]
           //Items receiving through context - Non display objects
           public var recContextItem:ArrayCollection = new ArrayCollection();
           
           private var xApp:XenosApplication = XenosApplication.getInstance(Globals.DEFAULT_ENTERPRISE);
           
        private function showPopUp(recCtxItems:ArrayCollection,
                                   retCtxItem:ArrayCollection):void {
            
            if (recCtxItems == null){
                recCtxItems = new ArrayCollection();
            }
            
            if (retCtxItem == null){
                retCtxItem = new ArrayCollection();
            }
            
            //create the account popup        
            var glePopup:GleLedgerQueryPopUp=GleLedgerQueryPopUp
            (PopUpManager.createPopUp( UIComponent(this.parentApplication), GleLedgerQueryPopUp , true));
        
            // Calculate position of TitleWindow in Application's coordinates. 
                /* popUpPoint.x= accountPopup.x;
                popUpPoint.y= accountPopup.y;                
                popUpPoint = accountPopup.localToGlobal(popUpPoint);
                actPopup.x = popUpPoint.x + accountPopup.width;
                actPopup.y = popUpPoint.y + accountPopup.height; */
            //Center the Popup Window in the Application's container
            PopUpManager.centerPopUp(glePopup);
            /* Pass a reference to the AutoComplete control
             * to the PopUpWindow container so that the 
             * PopUpWindow container can return data to the main application.
             */
            glePopup.retTxtInput=gleCode;
            // Pass a reference to the returnning context items
            glePopup.returnContextItems = retCtxItem;
            // Pass a reference to the popup context items
            glePopup.receiveCtxItems = recCtxItems;
            
            xApp.submitButtonInstance = glePopup.search;
            
            glePopup.initGlePopup();
            
        }
        //end of script
        ]]>
    </mx:Script>
</mx:HBox>


<?xml version="1.0" encoding="utf-8"?>

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" verticalCenter="0" horizontalGap="0" >

<mx:Script>
	<![CDATA[
	    import mx.rpc.events.FaultEvent;
		import mx.rpc.http.HTTPService;
		import mx.rpc.events.ResultEvent;
		import com.nri.rui.core.utils.XenosStringUtils;
		import mx.containers.Canvas;
		import mx.containers.VBox;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		import mx.containers.TitleWindow;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.controls.CheckBox;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.controls.DataGrid;
		import mx.controls.AdvancedDataGrid;
		import com.nri.rui.core.startup.XenosApplication;
		import com.nri.rui.core.Globals;
		import mx.utils.StringUtil;
		import mx.core.UIComponent;
		import mx.collections.XMLListCollection;
		
		[Bindable]
		private var app:XenosApplication = XenosApplication.getInstance(Globals.DEFAULT_ENTERPRISE);
		
		[Embed(source="../../../../../assets/xenosdg_addcolunm.png")]
		[Bindable]
		private var icoColumns:Class;
		[Bindable]
		public var dgrid:DataGrid;
		public var adgrid:AdvancedDataGrid;
		public static var popupColumns:TitleWindow = null;
        public var gridColumns:ArrayCollection = new ArrayCollection();
		public var visibleGridColumns:ArrayCollection = new ArrayCollection();
		private var currentVisibleColumns:Number=0;
		[Bindable]private var _showRecordCount:Boolean = false;
		[Bindable]private var _showResultStatistics:Boolean = false;
		[Bindable]private var _showHelp:Boolean = false;
		
		// This will set the function to call for saving preferences
		
		
		// This will set the function to call for PDF generation
		private var _pdfFunction : Function;
		
		// This will set the function to call for XLS generation
		private var _xlsFunction : Function;
		
		// This will set the function to print the datagrid data
		private var _printFunction : Function;
		
		// This will set the function to open the Help pop-up
		private var _helpFunction : Function;
		
		//Function to call for the server side pagination for previous
		// set of results
		private var _previousFunction : Function;
		
		//Function to call for the server side pagination for next
		// set of results
		private var _nextFunction : Function;
		
		private var _startIndex : int = -1;
		
		private var _endIndex : int = -1;
		
		private var _skipColumnArray : Array = new Array();
		
		[Bindable]
		private var _pageNo :int = 1;
		
	//	private var _screenId:String;
		
		//~***************************************************************************
		[Bindable]private var prefResult:XMLList = null;
        [Bindable]private var prefColumnList:XMLListCollection = null;
        [Bindable]private var prefColumnArray:Array = new Array();
        [Bindable]private var _enablePreference:String = 'false';
		private var _moduleId:String = XenosStringUtils.EMPTY_STR;
		private var _screenId:String = XenosStringUtils.EMPTY_STR;		
		private var _defaultPrefFile:String = XenosStringUtils.EMPTY_STR;
		
		public function get enablePreference():String
		{
		    return _enablePreference;
		}
		
		public function set enablePreference(enablePreference:String):void
		{
		    _enablePreference = enablePreference;
		}
		
		public function get moduleId():String
		{
		    return _moduleId;
		}
		
		public function set moduleId(moduleId:String):void
		{
		    _moduleId = moduleId;
		}
		
		/*public function get screenId():String
		{
			return _screenId;		
		}
		
		public function set screenId(screenId:String):void
		{
			_screenId = screenId;
		}*/
		
		public function get defaultPrefFile():String
		{
		    return _defaultPrefFile;
		}
		
		public function set defaultPrefFile(defaultPrefFile:String):void
		{
		    _defaultPrefFile = defaultPrefFile;
		}
		//~***************************************************************************
		
		
		public function get skipColumnArray():Array
	    {
	        return _skipColumnArray;
	    }
		
		public function set skipColumnArray(columnArray:Array):void
	    {
	        _skipColumnArray = columnArray;
	    }
		
		public function get pageNo():int
	    {
	        return _pageNo;
	    }
		
		public function set pageNo(pNo:int):void
	    {
	        _pageNo = pNo;
	    }
	    
		public function get startIndex():int
	    {
	        return _startIndex;
	    }
		
		public function set startIndex(index:int):void
	    {
	        _startIndex = index;
	    }
		
		public function get endIndex():int
	    {
	        return _endIndex;
	    }
		
		public function set endIndex(index:int):void
	    {
	        _endIndex = index;
	    }
	    
		public function get pdfFunction():Function
	    {
	        return _pdfFunction;
	    }
		public function set pdfFunction(f:Function):void
	    {
	        _pdfFunction = f;
	    }
	    
	    
	    
	   
	    
	    public function get xlsFunction():Function
	    {
	        return _xlsFunction;
	    }
		public function set xlsFunction(f:Function):void
	    {
	        _xlsFunction = f;
	    }
	    
	    public function get printFunction():Function
	    {
	        return _printFunction;
	    }
		public function set printFunction(f:Function):void
	    {
	        _printFunction = f;
	    }
	    
	    public function get helpFunction():Function
	    {
	        return _helpFunction;
	    }
		public function set helpFunction(f:Function):void
	    {
	        _helpFunction = f;
	    }
	    
	    
		public function set previousFunction(f:Function):void
	    {
	        _previousFunction = f;
	    }
	    
	   
		public function set nextFunction(f:Function):void
	    {
	        _nextFunction = f;
	    }
	    
	    public function get showRecordCount():Boolean
	    {
	        return _showRecordCount;
	    }
		
		public function set showRecordCount(showRecordCountFlag:Boolean):void
	    {
	        _showRecordCount = showRecordCountFlag;
	    }
	    
	    public function get showResultStatistics():Boolean {
	        return _showResultStatistics;
	    }
		
		public function set showResultStatistics(showResultStatisticsFlag:Boolean):void {
	        _showResultStatistics = showResultStatisticsFlag;
	    }
	    
	    public function get showHelp():Boolean
	    {
	        return _showHelp;
	    }
		
		public function set showHelp(showHelpFlag:Boolean):void
	    {
	        _showHelp = showHelpFlag;
	    }
		
        public function set screenId(screenId:String):void
        {
            this._screenId = screenId;
        }
        
        public function get screenId():String
        {
            return this._screenId;
        }		
	    
	    
	   
	  
		
			
		private function isSkipped(index:int):Boolean{
			for(var i:int=0; i<skipColumnArray.length; i++){
				if(index == skipColumnArray[i]){
					//XenosAlert.info("skipped :: " + index);
					return true;
				}
			}
			return false;
		}
		/**
		 * This function will populate the default set of visible columns in an array
		 */ 	
		public function PopulateDefaultVisibleColumns():void{
			gridColumns.source = dgrid.columns;
			currentVisibleColumns = 0;
			for(var i:int = 1; i<gridColumns.length ;i++){
				var dgc : DataGridColumn = DataGridColumn(dgrid.columns[i]); 
				if(dgc.visible){
					visibleGridColumns.addItem(dgc);
					currentVisibleColumns+=1;
				}
			}
			setDraggableStatus();
			switch(app.visibleColumnsFrom)
			{
			  case Globals.COLS_VISIBLE_FROM_FIRST:break;
			  case Globals.COLS_VISIBLE_FROM_FIRST:break;
			  case Globals.COLS_VISIBLE_FROM_ANY:break;
			  case "":
			  	app.visibleColumnsFrom=Globals.COLS_VISIBLE_FROM_ANY;
			  	app.minimumVisibleColumns=1;
			  	break;
			}
		}
		
		/**
		 * This function sets the draggable property of the DataGrid columns to false
		 * when the minimum number of columns to be displayed are specified to be
		 * either from the first or from the last. In case "any" is chosen, then the
		 * columns will have their default draggable property.
		 */ 	
		private function setDraggableStatus():void{
			if(app.visibleColumnsFrom==Globals.COLS_VISIBLE_FROM_FIRST)
				for(var i:Number=0;i<app.minimumVisibleColumns;i++)
					DataGridColumn(visibleGridColumns[i]).draggable=false;
				
			if(app.visibleColumnsFrom==Globals.COLS_VISIBLE_FROM_LAST)
				for(var i:Number=1;i<=app.minimumVisibleColumns;i++)
					DataGridColumn(visibleGridColumns[visibleGridColumns.length-i]).draggable=false;
		}	
			
		
		/**
		* Called on click of checkboxes. Hides or Shows columns
		* based on checked status.
		*/			
		private function showhideCol(event:Event):void{
			var dgc:DataGridColumn;
			var bVisible:Boolean=  event.target.selected;
			var cbk:CheckBox=CheckBox(event.currentTarget);
			dgc = dgrid.columns[event.target.id];
			if(app.visibleColumnsFrom==Globals.COLS_VISIBLE_FROM_FIRST){
				for(var i:int=0;i<app.minimumVisibleColumns;i++){
					if(i <= visibleGridColumns.length ){
						var d:DataGridColumn=DataGridColumn(visibleGridColumns[i]);
						if(d.headerText == dgc.headerText){
							XenosAlert.info("Cannot remove any of the first "+app.minimumVisibleColumns.toString() + " visible columns.");
							cbk.selected=true;
							return;
						}
					}
				}
				dgc.visible=bVisible;
			}
			
			if(app.visibleColumnsFrom == Globals.COLS_VISIBLE_FROM_LAST){
				for(var i:int=1;i<=app.minimumVisibleColumns;i++){
					var d:DataGridColumn=DataGridColumn(visibleGridColumns[visibleGridColumns.length-i]);
					if(d.headerText==dgc.headerText){
						XenosAlert.info("Cannot remove any of the last "+ app.minimumVisibleColumns.toString() + " visible columns.");
						cbk.selected=true;
						return;
					}
				}
				dgc.visible=bVisible;
			}
			
			if(app.visibleColumnsFrom == Globals.COLS_VISIBLE_FROM_ANY){
				if(dgrid.columnCount > 1){
					if(bVisible){
						dgc.visible=true;
						currentVisibleColumns+=1;
					}else if(!bVisible) {
						if(currentVisibleColumns > app.minimumVisibleColumns){
							dgc.visible = false;
							currentVisibleColumns-=1;
						}
						else {
							XenosAlert.info("Cannot remove column.A minimum of "+ app.minimumVisibleColumns.toString() + " column/s must be present.");
							cbk.selected=true;
						}
					}	
				}
			}
		}
		private function closePopup(event:CloseEvent):void{
			popupColumns.visible = false;
		}
		
		//~******************************** REPORT PERSONALIZATION - START *********************************
		
		/**
		 * Show the report fields for personalizations in a popup
		 * */
		private function personalizeReports(reportType:String):void{
			var rptPrefPopup:ReportPersonalizeControl = ReportPersonalizeControl(PopUpManager.createPopUp( UIComponent(this.parentApplication), ReportPersonalizeControl , true));
			rptPrefPopup.setReportType(reportType);
			rptPrefPopup.setModuleId(this._moduleId);
			rptPrefPopup.setScreenId(this._screenId);			
			rptPrefPopup.setDefaultPrefFile(this._defaultPrefFile);
            rptPrefPopup.showCloseButton = true;
            PopUpManager.centerPopUp(rptPrefPopup); 
		}
		
		/**
		 * Save the report personalization data and close the window
		 * */
		private function saveReportPersonalization(event:ResultEvent):void{
			XenosAlert.info(this.parentApplication.xResourceManager.getKeyValue('inf.label.excelreportprefs.saved'));
		}
		
		
		
		
		
		
		
		
		
	  
		//~******************************** REPORT PERSONALIZATION - END *********************************
		
		
		
		//send the request for clearing the preference to the server
		
		
		
		
		/**
		 * Enable the screen and excel preference buttons
		 * */
	
		
		
		
	]]>
</mx:Script>
<!--<mx:HBox id="mainquery" width="100%" verticalCenter="0" verticalAlign="middle" horizontalAlign="right" paddingLeft="0" paddingRight="0">-->
		<mx:HBox id="queryResultHeader" width="100%" styleName="ButtonBackPanel" verticalCenter="0" verticalAlign="middle" horizontalAlign="left" paddingLeft="0" paddingRight="0">
		<mx:HBox height="100%" verticalCenter="0" verticalAlign="middle" horizontalAlign="left">
			<mx:Label id="resultHeader" text="" fontWeight="bold" verticalCenter="0" />
			<mx:Label id="recordCount" text="" fontWeight="bold" verticalCenter="0" visible="{showRecordCount}" includeInLayout="{showRecordCount}" height="40"/>
			<mx:TextArea id="resultStatistics" verticalCenter="0" visible="{showResultStatistics}" includeInLayout="{showResultStatistics}" text="" minWidth="600" editable="false" fontWeight="bold"/>
		</mx:HBox>
		
	</mx:HBox>




</mx:HBox>



<?xml version="1.0" encoding="utf-8"?>

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" verticalCenter="0" horizontalGap="0" >

<mx:Script>
	<![CDATA[
		import mx.containers.Canvas;
		import mx.containers.VBox;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		import mx.containers.TitleWindow;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.controls.CheckBox;
		import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
		import mx.controls.AdvancedDataGrid;
		import com.nri.rui.core.startup.XenosApplication;
		import com.nri.rui.core.Globals;
		import mx.utils.StringUtil;
		
		[Bindable]
		private var app:XenosApplication = XenosApplication.getInstance(Globals.DEFAULT_ENTERPRISE);
		
		[Embed(source="../../../../../assets/xenosdg_addcolunm.png")]
		[Bindable]
		private var icoColumns:Class;
		[Bindable]
		public var dgrid:AdvancedDataGrid;
		public static var popupColumns:TitleWindow = null;
        public var gridColumns:ArrayCollection = new ArrayCollection();
		public var visibleGridColumns:ArrayCollection = new ArrayCollection();
		private var currentVisibleColumns:Number=0;
		
		// This will set the function to call for PDF generation
		private var _pdfFunction : Function;
		
		// This will set the function to call for XLS generation
		private var _xlsFunction : Function;
		
		// This will set the function to print the datagrid data
		private var _printFunction : Function;
		
		//Function to call for the server side pagination for previous
		// set of results
		private var _previousFunction : Function;
		
		//Function to call for the server side pagination for next
		// set of results
		private var _nextFunction : Function;
		
		private var _startIndex : int = -1;
		
		private var _endIndex : int = -1;
		
		[Bindable]
		private var _pageNo :int = 1;
		
		public function get pageNo():int
	    {
	        return _pageNo;
	    }
		
		public function set pageNo(pNo:int):void
	    {
	        _pageNo = pNo;
	    }
	    
		public function get startIndex():int
	    {
	        return _startIndex;
	    }
		
		public function set startIndex(index:int):void
	    {
	        _startIndex = index;
	    }
		
		public function get endIndex():int
	    {
	        return _endIndex;
	    }
		
		public function set endIndex(index:int):void
	    {
	        _endIndex = index;
	    }
	    
		public function get pdfFunction():Function
	    {
	        return _pdfFunction;
	    }
		public function set pdfFunction(f:Function):void
	    {
	        _pdfFunction = f;
	    }
	    
	    public function get xlsFunction():Function
	    {
	        return _xlsFunction;
	    }
		public function set xlsFunction(f:Function):void
	    {
	        _xlsFunction = f;
	    }
	    
	    public function get printFunction():Function
	    {
	        return _printFunction;
	    }
		public function set printFunction(f:Function):void
	    {
	        _printFunction = f;
	    }
	    
	    public function get previousFunction():Function
	    {
	    	pageNo--;
	    	page.text = pageNo+"";
	        return _previousFunction;
	    }
		public function set previousFunction(f:Function):void
	    {
	        _previousFunction = f;
	    }
	    
	    public function get nextFunction():Function
	    {
	    	pageNo++;
	        page.text = pageNo+"";
	        return _nextFunction;
	    }
		public function set nextFunction(f:Function):void
	    {
	        _nextFunction = f;
	    }
	    
	    public function setOnResultVisibility():void{
	    	this.pdf.enabled = true;
	    	this.xls.enabled = true;
	    	//this.print.enabled = true;
	    	/* this.sep1.visible = true;
	    	this.sep2.visible = true;
	    	this.columnsButton.visible = true; */
	    }
	    /**
	    * Resets the pageNo
	    */
	    public function resetPageNo():void{
	    	pageNo = 1;
	    	page.text = pageNo+"";
	    	
	    }
	    /**
	    * It sets the enable property of the Next and Previous button
	    * depending on the result set, whether available or not
	    */
	    public function setPrevNextVisibility(prev:Boolean, next:Boolean):void{
	    	
	    	this.btnPrev.enabled = prev;
	    	this.btnNext.enabled = next;
	    	if(prev){
	    		btnPrev.toolTip ="Previous/"+(pageNo-1);
	    	}else{
	    		btnPrev.toolTip = "Previous";
	    	}
	    	if(next){
	    		btnNext.toolTip ="Next/"+(pageNo+1);
	    	}else{
	    		btnNext.toolTip = "Next";
	    	}
	    }
	    /**
	    * This function will create the Column List from the datagrid
	    * and create check boxes with the header Text and set then in the
	    * TitleWindow.
	    */	
			private function columnList():void{
	    		
	    		var start:int;
				var end:int;
				
				trace("start :"+start+ " end: "+end);	
	    		if(popupColumns == null){
					showWindow();
				}else{
					popupColumns.removeAllChildren();
					popupColumns.visible = true;
				}
				var canvas:Canvas = new Canvas();			
					canvas.percentWidth = 100;
					canvas.percentHeight = 100;
					canvas.horizontalScrollPolicy ="off";
				var vbox:VBox = new VBox();
					vbox.percentWidth = 100;
					vbox.percentHeight = 100;
					vbox.horizontalScrollPolicy = "off";
				gridColumns.source = dgrid.columns;
				
				// Check whether startIndex/endIndex is provided by user or not 
				if(startIndex != -1)
					start = startIndex;
				else 
					start = 1;
				if(endIndex != -1)
					end = endIndex;
				else
					end = gridColumns.length;
				//for(var i:int = 1; i<gridColumns.length ;i++){
				for(var i:int = start; i<end ;i++){
					var dgc : AdvancedDataGridColumn = AdvancedDataGridColumn(dgrid.columns[i]); 
					var chkb:CheckBox = new CheckBox(); 
					chkb.id = i.toString();
					chkb.selected=dgc.visible;
					chkb.label = dgc.headerText;
					
					chkb.addEventListener(Event.CHANGE,showhideCol);
					vbox.addChild(chkb);
				}
				canvas.addChild(vbox);
				popupColumns.addChild(canvas);
				PopUpManager.bringToFront(popupColumns);
			}
		/**
		 * This function will populate the default set of visible columns in an array
		 */ 	
		public function PopulateDefaultVisibleColumns():void{
			gridColumns.source = dgrid.columns;
			for(var i:int = 1; i<gridColumns.length ;i++){
				var dgc : AdvancedDataGridColumn = AdvancedDataGridColumn(dgrid.columns[i]); 
				if(dgc.visible){
					visibleGridColumns.addItem(dgc);
					currentVisibleColumns+=1;
				}
			}
			//setDraggableStatus();
			switch(app.visibleColumnsFrom)
			{
			  case Globals.COLS_VISIBLE_FROM_FIRST:break;
			  case Globals.COLS_VISIBLE_FROM_FIRST:break;
			  case Globals.COLS_VISIBLE_FROM_ANY:break;
			  case "":
			  	app.visibleColumnsFrom=Globals.COLS_VISIBLE_FROM_ANY;
			  	app.minimumVisibleColumns=1;
			  	break;
			}
		}
		
		/**
		 * This function sets the draggable property of the AdvancedDataGrid columns to false
		 * when the minimum number of columns to be displayed are specified to be
		 * either from the first or from the last. In case "any" is chosen, then the
		 * columns will have their default draggable property.	
		 * */
		  private function setDraggableStatus():void{
			if(app.visibleColumnsFrom==Globals.COLS_VISIBLE_FROM_FIRST)
				for(var i:Number=0;i<app.minimumVisibleColumns;i++)
					AdvancedDataGridColumn(visibleGridColumns[i]).visible=false;
				
			if(app.visibleColumnsFrom==Globals.COLS_VISIBLE_FROM_LAST)
				for(var i:Number=1;i<=app.minimumVisibleColumns;i++)
					AdvancedDataGridColumn(visibleGridColumns[visibleGridColumns.length-i]).visible=false;
		}	 
			 
		/**
		 * It will create a TitleWindow which will allow the user to check 
		 * which column he would like to see in the dataGrid.
		 */		
		private function showWindow():void{
			var SPACING_X : int = 0;
			var SPACING_Y : int = 0;			
			popupColumns = new TitleWindow();
			popupColumns.id = "cvsColumnList";
			popupColumns.name = "cvsColumnList";
			popupColumns.title = "Select Columns";
			popupColumns.showCloseButton = true;
			popupColumns.addEventListener("close",closePopup);
			popupColumns.height = 410;
			popupColumns.width = 220;
			popupColumns.styleName = "PopupTitleWindow";
			popupColumns.setStyle("horizontalGap",1);

			var rect:Rectangle = columnsButton.getRect(columnsButton);
			var pt:Point = columnsButton.localToGlobal(rect.bottomRight);			

			if((pt.x + SPACING_X + popupColumns.minWidth) > root.width){
				// show side
				popupColumns.x = pt.x - SPACING_X-popupColumns.width;
				popupColumns.y = pt.y - SPACING_Y;
			}
			else { 
				// show below
				popupColumns.x = pt.x - popupColumns.width;
				popupColumns.y = pt.y + SPACING_Y;	
			}
			PopUpManager.addPopUp(popupColumns, columnsButton, true);
		}	
		/**
		* Called on click of checkboxes. Hides or Shows columns
		* based on checked status.
		*/			
		private function showhideCol(event:Event):void{
			var dgc:AdvancedDataGridColumn;
			var bVisible:Boolean=  event.target.selected;
			var cbk:CheckBox=CheckBox(event.currentTarget);
			dgc = dgrid.columns[event.target.id];
			if(app.visibleColumnsFrom==Globals.COLS_VISIBLE_FROM_FIRST){
				for(var i:int=0;i<app.minimumVisibleColumns;i++){
					if(i <= visibleGridColumns.length ){
						var d:AdvancedDataGridColumn=AdvancedDataGridColumn(visibleGridColumns[i]);
						if(d.headerText == dgc.headerText){
							XenosAlert.info("Cannot remove any of the first "+app.minimumVisibleColumns.toString() + " visible columns.");
							cbk.selected=true;
							return;
						}
					}
				}
				dgc.visible=bVisible;
			}
			
			if(app.visibleColumnsFrom == Globals.COLS_VISIBLE_FROM_LAST){
				for(var i:int=1;i<=app.minimumVisibleColumns;i++){
					var d:AdvancedDataGridColumn=AdvancedDataGridColumn(visibleGridColumns[visibleGridColumns.length-i]);
					if(d.headerText==dgc.headerText){
						XenosAlert.info("Cannot remove any of the last "+ app.minimumVisibleColumns.toString() + " visible columns.");
						cbk.selected=true;
						return;
					}
				}
				dgc.visible=bVisible;
			}
			
			if(app.visibleColumnsFrom == Globals.COLS_VISIBLE_FROM_ANY){
				if(dgrid.columnCount > 1){
					if(bVisible){
						dgc.visible=true;
						currentVisibleColumns+=1;
					}else if(!bVisible) {
						if(currentVisibleColumns > app.minimumVisibleColumns){
							dgc.visible = false;
							currentVisibleColumns-=1;
						}
						else {
							XenosAlert.info("Cannot remove column.A minimum of "+ app.minimumVisibleColumns.toString() + " column/s must be present.");
							cbk.selected=true;
						}
					}	
				}
			}
		}
		private function closePopup(event:CloseEvent):void{
			popupColumns.visible = false;
		}
	]]>
</mx:Script>
	<mx:HBox width="100%" styleName="ButtonBackPanel" verticalCenter="0" verticalAlign="middle" horizontalAlign="right" paddingLeft="0" paddingRight="0">
		<mx:HBox height="100%" verticalCenter="0" verticalAlign="middle" horizontalAlign="left">
			<mx:Label text="Query Result" id="resultHeader" fontWeight="bold" verticalCenter="0" />
		</mx:HBox>	
	
		<mx:HBox width="100%" height="100%" horizontalAlign="right" verticalCenter="0" verticalAlign="middle">			
		   	
		   <!--	<mx:Image id="pdf" width="28" height="28" source="@Embed('../../../../../assets/xenosdg_pdf.png')" click="{this.pdfFunction()}" toolTip="Export to PDF" visible="false" buttonMode="true"/>
		   	<mx:Image id="xls" width="28" height="28" source="@Embed('../../../../../assets/xenosdg_excel.png')" click="{this.xlsFunction()}" toolTip="Export to XLS"  visible="false" buttonMode="true"/>
		   	<mx:Image id="print" width="28" height="28" source="@Embed('../../../../../assets/xenosdg_print.png')" toolTip="Print" click="{this.printFunction()}" visible="false" buttonMode="true" enabled="false"/> -->
		   	<mx:Button id="pdf" width="28" height="28" styleName="PdfBtnStyle" click="{this.pdfFunction()}" toolTip="Export to PDF" enabled="false" />
		   	<mx:Button id="xls" width="28" height="28" styleName="XslBtnStyle" click="{this.xlsFunction()}" toolTip="Export to XLS" enabled="false"  />
		   	<!--<mx:Button id="print" width="28" height="28" styleName="PrintBtnStyle" click="{this.printFunction()}" toolTip="Print" enabled="false"  />-->
		   	
		   	<mx:Image id="sep1" width="2" height="30" source="@Embed('../../../../../assets/xenosdg_separator.png')" /> 
		   	<mx:Button id="btnPrev" width="28" height="28" styleName="BtnDatagridPrev" click="{this.previousFunction()}" toolTip="Previous" enabled="false" />
		   	<mx:Button id="btnNext" width="28" height="28" styleName="BtnDatagridNext" click="{this.nextFunction()}" toolTip="Next" enabled="false" />
			<mx:Label id="page" color="red" fontWeight="bold" text="{pageNo}" toolTip="Page No"/>
			<mx:Image id="sep2" width="2" height="30" source="@Embed('../../../../../assets/xenosdg_separator.png')" /> 
			<mx:Image id="columnsButton" click="columnList()" width="28" height="28" source="{icoColumns}" toolTip="Show/Hide Columns" />
		</mx:HBox>
	</mx:HBox>
</mx:HBox>

<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:com="*"
	layout="vertical" width="100%" minWidth="400" height="100%" minHeight="200"
	title="Upload Files" creationComplete="init()">
	
	<mx:Metadata>
		[Event(name="uploadComplete", type="flash.events.Event")]
		[Event(name="uploadProgress", type="flash.events.ProgressEvent")]
		[Event(name="uploadCancel", type="flash.events.Event")]
		[Event(name="uploadIOError", type="flash.events.IOErrorEvent")]
		[Event(name="uploadSecurityError", type="flash.events.SecurityErrorEvent")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			import mx.messaging.management.ObjectInstance;
			import mx.utils.ObjectUtil;
			//import mx.rpc.http.mxml.HTTPService;
			import com.nri.rui.core.controls.XenosHTTPService;
			/*
				
			Written by:
			Dustin Andrew
			dustin@flash-dev.com
			www.flash-dev.com
			
			FileUpload
			
			Panel component for uploading files.
			(Icons from http://www.famfamfam.com)
			
			LAST UPDATED:
			12/15/06
			
			*/
			
			import mx.controls.*;
			import mx.managers.*;
            import mx.events.*;
			import flash.events.*;
			import flash.net.*;
			
			private var _strUploadUrl:String;
			private var _refAddFile:FileReference;	
			private var _refUploadFile:FileReference;
			[Bindable] private var _arrUploadFiles:Array;
			private var _numCurrentUpload:Number = 0;	
			public var _maxFileSize:Number = 1048576;
			private var _uploadToField:String = new String("fileName");		
			private var _httpRequestProcess:XenosHTTPService;
			private var _httpRequestForRemove:XenosHTTPService;
			private var _httpRequestForValidate:XenosHTTPService;
			public var _maxNumOfFiles:int = 1;
			public var _filter:Array = null;
			public var _checkMaxSize = true;
			private var uploadURL:URLRequest;
			private var reqParamArray:Array = null;
			private var _errCntrl:XenosErrors = null;
			private var variables:URLVariables = new URLVariables();
        private var file:FileReference;
		//public var progBar:ProgressBar = new ProgressBar(); 

		//set _maxNumOfFiles
			public function set maxNumOfFiles(numberOfFiles:int):void
			{
				_maxNumOfFiles = numberOfFiles;
			}		
			//get _maxNumOfFiles
			public function get maxNumOfFiles():int
			{
				return _maxNumOfFiles;
			}	
			
			//set _errCntrl
			public function set errCntrl(error:XenosErrors):void
			{
				_errCntrl = error;
			}		
			//get _errCntrl
			public function get errCntrl():XenosErrors
			{
				return _errCntrl;
			}	
			
			//set _httpRequestForRemove
			public function set httpRequestForRemove(httpobj:XenosHTTPService):void
			{
				_httpRequestForRemove = httpobj;
			}
			
			// get _httpRequestForRemove
			public function get httpRequestForRemove():XenosHTTPService
			{
				return _httpRequestForRemove;
			}
			
			//set _httpRequestForValidate
			public function set httpRequestForValidate(httpobj:XenosHTTPService):void
			{
				_httpRequestForValidate = httpobj;
			}
			
			// get _httpRequestForValidate
			public function get httpRequestForValidate():XenosHTTPService
			{
				return _httpRequestForValidate;
			}
			
			//set _httpRequestProcess
			public function set httpProcess(httpobj:XenosHTTPService):void
			{
				_httpRequestProcess = httpobj;
			}
			
			// get _httpRequestProcess
			public function get httpProcess():XenosHTTPService
			{
				return _httpRequestProcess;
			}
			
			//set _uploadToField
			public function set uploadToFiled(strUploadto:String):void
			{
				_uploadToField = strUploadto
			}
			
			public function get uploadToFiled():String
			{
				return _uploadToField;
			}
			//Set whether to check file size
			public function set checkMaxSize(flag:Boolean):void {
				_checkMaxSize = flag;
			}
			
			// Set uploadUrl
			public function set uploadUrl(strUploadUrl:String):void {
				_strUploadUrl = strUploadUrl;
			}
			
			
			//set _arrUploadFiles
			public function set arrUploadFiles(arrUploadFiles:Array):void
			{
				_arrUploadFiles = arrUploadFiles
			}
			
			public function get arrUploadFiles():Array
			{
				return _arrUploadFiles;
			}
			
			
			// Initalize
			private function init():void {
				_arrUploadFiles = new Array();				
				enableUI();
				uploadCheck();
				listFiles.dataProvider = _arrUploadFiles;
				listFiles.selectedIndex = 0;
				httpRequestForValidate.addEventListener(ResultEvent.RESULT, validateFileResultHandler);
			}
			
			private function validateFileResultHandler(event:ResultEvent):void{
				var result:XML = XML(event.result);
				if(result.child("Errors").length()>0) {
					var errorInfoList : ArrayCollection = new ArrayCollection();
					//populate the error info list
					for each (var error:XML in result.Errors.error) {
						errorInfoList.addItem(error.toString());
					}
					
					errCntrl.showError(errorInfoList);//Display the error
				}else{
					errCntrl.removeError();
					_arrUploadFiles.push({
								file: _refAddFile,
								name:_refAddFile.name,
								size:formatFileSize(_refAddFile.size),
								type:_refAddFile.type,
								fundCode: reqParamArray[0],
								officeId: reqParamArray[1],
								date: reqParamArray[2],
								fileType: reqParamArray[3],
								index: _arrUploadFiles.length });
					listFiles.dataProvider = _arrUploadFiles;
					this.dispatchEvent(new Event("resetFields"));
				}
			}
			
			// Called to add file(s) for upload
			private function addFiles():void {
				/* if(_maxNumOfFiles.valueOf() > 0)
				{
					if (_refAddFiles.fileList.length < _maxNumOfFiles)
					{XenosAlert.error("Can only Add ("+_maxNumOfFiles+" Files) At a time!")
					return;}
				} */
				//progBar = new ProgressBar();
				uploadURL = new URLRequest();
	            uploadURL.url = _strUploadUrl + "&unique=" + new Date().getTime();
	            uploadURL.method = "POST";
	            
	            if (parentDocument.hasOwnProperty("reqObj")) {
					trace("parentDocument.hasOwnProperty('reqObj')");
					variables = parentDocument.reqObj;
				}
				
				if (parentDocument.hasOwnProperty("reqParamArray")) {
					reqParamArray = parentDocument.reqParamArray;
				}
	            _refAddFile = new FileReference();
	            _refAddFile.addEventListener(Event.SELECT, selectHandler);
	            _refAddFile.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
	            _refAddFile.addEventListener(ProgressEvent.PROGRESS, progressHandler);
	            _refAddFile.addEventListener(Event.COMPLETE, completeHandler);
	            _refAddFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
	            
	            if(_filter != null)
				{
					_refAddFile.browse(_filter);	
				}
				else
				{
					_refAddFile.browse();
				}
			}
			private function selectHandler(event:Event):void {
				
				/* var arrFoundList:Array = new Array();
					if((_arrUploadFiles.length+1) > _maxNumOfFiles)
					{
						XenosAlert.error("Can only Add ("+_maxNumOfFiles+" Files) At a time!");
						return;
					}
					// Get list of files from fileList, make list of files already on upload list
					for (var i:Number = 0; i < _arrUploadFiles.length; i++) {
						for (var j:Number = 0; j < _refAddFiles.fileList.length; j++) {
							if (_arrUploadFiles[i].name == _refAddFiles.fileList[j].name) {
								arrFoundList.push(_refAddFiles.fileList[j].name);
								_refAddFiles.fileList.splice(j, 1);
								j--;
							}
						}
					}
					if (_refAddFiles.fileList.length >= 1) {				
						for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
							var moreThanLimit:Boolean = true;
							if (_checkMaxSize) {
								moreThanLimit = checkFileSize(_refAddFiles.fileList[k].size);
							}
							if(moreThanLimit)
							{
							_arrUploadFiles.push({
								name:_refAddFiles.fileList[k].name,
								size:formatFileSize(_refAddFiles.fileList[k].size),
								type:_refAddFiles.fileList[k].type,
								file:_refAddFiles.fileList[k]});
							listFiles.dataProvider = _arrUploadFiles;
							listFiles.selectedIndex = _arrUploadFiles.length - 1;
							}
							else
							{
								XenosAlert.error("Selected File Size is Over Allowed Limit ("+_maxFileSize+" bytes). Please select Another File!");
							}
							
						}
						
					}
									
					if (arrFoundList.length >= 1) {
						Alert.show("The file(s): \n\nâ€¢ " + arrFoundList.join("\nâ€¢ ") + "\n\n...are already on the upload list. Please change the filename(s) or pick a different file.", "File(s) already on list");
					} */
					uploadCheck();
	            var file:FileReference = FileReference(event.target);
	            //trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
	            //file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,fileUploadCompleteHandler);
	            variables["dataView.fileName"] = file.name;
	            variables["dataView.fileSize"] = formatFileSize(file.size);
	            variables["dataView.fileExt"] = file.type;
	            uploadURL.data = variables;
	            file.upload(uploadURL, _uploadToField);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
            //clearUpload();
        }

        private function progressHandler(event:ProgressEvent):void {
          //  var file:FileReference = FileReference(event.target);
            var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
			updateProgBar(numPerc);
			//var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
			//dispatchEvent(evt);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
            //btnUpload.enabled = true;
            httpRequestForValidate.send();
            //btnAdd.enabled = false;
        }
        
         private function fileUploadCompleteHandler(event:DataEvent):void {
            trace("fileUploadCompleteHandler: " + event.data);
            //btnUpload.enabled = true;
            //btnAdd.enabled = false;
        }


			
			// Called when a file is selected
			/* private function onSelectFile(event:Event):void {
				var arrFoundList:Array = new Array();
				if((_arrUploadFiles.length+1) > _maxNumOfFiles)
				{
					XenosAlert.error("Can only Add ("+_maxNumOfFiles+" Files) At a time!");
					return;
				}
				// Get list of files from fileList, make list of files already on upload list
				for (var i:Number = 0; i < _arrUploadFiles.length; i++) {
					for (var j:Number = 0; j < _refAddFiles.fileList.length; j++) {
						if (_arrUploadFiles[i].name == _refAddFiles.fileList[j].name) {
							arrFoundList.push(_refAddFiles.fileList[j].name);
							_refAddFiles.fileList.splice(j, 1);
							j--;
						}
					}
				}
				
				
				if (_refAddFiles.fileList.length >= 1) {				
					for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
						
							var moreThanLimit:Boolean = true;
							if (_checkMaxSize) {
								moreThanLimit = checkFileSize(_refAddFiles.fileList[k].size);
							}
							if(moreThanLimit)
							{
							_arrUploadFiles.push({
								name:_refAddFiles.fileList[k].name,
								size:formatFileSize(_refAddFiles.fileList[k].size),
								type:_refAddFiles.fileList[k].type,
								file:_refAddFiles.fileList[k]});
							listFiles.dataProvider = _arrUploadFiles;
							listFiles.selectedIndex = _arrUploadFiles.length - 1;
							}
							else
							{
								XenosAlert.error("Selected File Size is Over Allowed Limit ("+_maxFileSize+" bytes). Please select Another File!");
							}
						
							//XenosAlert.error("Can only Add ("+_maxNumOfFiles+" Files) At a time!")
						
					}
					
				}
								
				if (arrFoundList.length >= 1) {
					Alert.show("The file(s): \n\nâ€¢ " + arrFoundList.join("\nâ€¢ ") + "\n\n...are already on the upload list. Please change the filename(s) or pick a different file.", "File(s) already on list");
				}
				//updateProgBar();
				//scrollFiles();
				uploadCheck();
				
				
			} */
			
			// Called to format number to file size
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1000);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1000) {
					numSize = numSize / 1000;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1000) {
						numSize = numSize / 1000;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}				
				return strReturn;
			}
			
			// Called to remove selected file(s) for upload
			public function removeFiles(obj:Object):void {
				 var arrIndx:int = obj.index;
				/* if (arrSelected.length >= 1) {
					for (var i:Number = 0; i < arrSelected.length; i++) {
						_arrUploadFiles[Number(arrSelected[i])] = null;
					}
					for (var j:Number = 0; j < _arrUploadFiles.length; j++) {
						if (_arrUploadFiles[j] == null) {
							_arrUploadFiles.splice(j, 1);
							j--;
						}
					}
					listFiles.dataProvider = _arrUploadFiles;
					listFiles.selectedIndex = 0;					
				}  */
				var reqObj:Object = new Object();
				reqObj.rowNo = arrIndx;
				httpRequestForRemove.request = reqObj;
				httpRequestForRemove.send();
				_arrUploadFiles.splice(arrIndx,1);
				for(var i:int=0; i<_arrUploadFiles.length; i++){
					_arrUploadFiles[i].index = i;
				}
				listFiles.dataProvider = _arrUploadFiles;
				for(var i:int=0; i<_arrUploadFiles.length; i++){
					trace("_arrUploadFiles :: " + _arrUploadFiles[i]);
				}
				//updateProgBar();
				//scrollFiles();
				uploadCheck();
				btnAdd.enabled = true;
			}
			
			// Called to check if there is at least one file to upload
			private function uploadCheck():void {
				if (_arrUploadFiles.length == 0) {
					//btnUpload.enabled = false;
					listFiles.verticalScrollPolicy = "off";
				} else {
					//btnUpload.enabled = true;
					listFiles.verticalScrollPolicy = "on";
				}
			}
			
			// Disable UI control
			private function disableUI():void {
				btnAdd.enabled = false;
				//btnRemove.enabled = false;
				//btnUpload.enabled = false;
				//btnCancel.enabled = true;
				listFiles.enabled = false;
				listFiles.verticalScrollPolicy = "off";
			}
			
			// Enable UI control
			private function enableUI():void {
				btnAdd.enabled = true;
				//btnRemove.enabled = true;
				//btnUpload.enabled = true;
				//btnCancel.enabled = false;
				listFiles.enabled = true;
				listFiles.verticalScrollPolicy = "on";
			}
			
			// Scroll listFiles to selected row
			/* private function scrollFiles():void {
				listFiles.verticalScrollPosition = listFiles.selectedIndex;
				listFiles.validateNow();
			} */
			
			// Called to upload file based on current upload number
			/* private function startUpload():void {
				if (_arrUploadFiles.length > 0) {
					disableUI();
					
					listFiles.selectedIndex = _numCurrentUpload;
					scrollFiles();
					
					// Variables to send along with upload
					var sendVars:URLVariables = new URLVariables();
					sendVars.action = "upload";
					
					var request:URLRequest = new URLRequest();
					request.data = sendVars;
				    request.url = _strUploadUrl + "&rnd=" + Math.random()+ "";
				    request.method = URLRequestMethod.POST;
				    _refUploadFile = new FileReference();
				    _refUploadFile = listFiles.selectedItem.file;
				    _refUploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				   	_refUploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
				    _refUploadFile.addEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				  	_refUploadFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				  	trace("_refUploadFile :: " + _refUploadFile.name + " " + _refUploadFile.size);
				    _refUploadFile.upload(request, _uploadToField,true);
				}
			} */
			
			// Cancel and clear eventlisteners on last upload
			 private function clearUpload(_refUploadFile:FileReference):void {
				_refUploadFile.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
				_refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
				_refUploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				_refUploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				_refUploadFile.cancel();
				_numCurrentUpload = 0;
				enableUI();
			} 
			
			/*
			// Get upload progress
			private function onUploadProgress(event:ProgressEvent):void {
				var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
				updateProgBar(numPerc);
				var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
				dispatchEvent(evt);
			}
			*/
			// Update progBar
			private function updateProgBar(numPerc:Number = 0):void {
				var strLabel:String = (_numCurrentUpload + 1) + "/" + _arrUploadFiles.length;
				strLabel = (_numCurrentUpload + 1 <= _arrUploadFiles.length && numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
				strLabel = (_numCurrentUpload + 1 == _arrUploadFiles.length && numPerc == 100) ? "Upload Complete - " + strLabel : strLabel;
				strLabel = (_arrUploadFiles.length == 0) ? "" : strLabel;
				progBar.label = strLabel;
				progBar.setProgress(numPerc, 100);
				progBar.validateNow();
			} 
			
			// Called on upload complete
			private function onUploadComplete(event:Event):void {
				trace("onUploadComplete");
				var requestObj:Object = null;
				if (parentDocument.hasOwnProperty("reqObj")) {
					trace("parentDocument.hasOwnProperty('reqObj')");
					requestObj = parentDocument.reqObj;
				} else {
					trace("not parentDocument.hasOwnProperty('reqObj')");
					requestObj = new Object();
				}
					requestObj.unique = new Date().getTime()+ "";
					_httpRequestProcess.request = requestObj; 
					_httpRequestProcess.send();
				
			}
			
			
			
			// Called on upload io error
			private function onUploadIoError(event:IOErrorEvent):void {
				//clearUpload();
			}
			
			// Called on upload security error
			 private function onUploadSecurityError(event:SecurityErrorEvent):void {
				trace("onUploadSecurityError..." + event.text);
				//clearUpload();
			} 
			
			// Change view state
			private function changeView():void {
				currentState = (currentState == "mini") ? "" : "mini";
			}
			
			// Checks the files do not exceed maxFileSize | if _maxFileSize == 0 No File Limit Set
        private function checkFileSize(filesize:Number):Boolean{
      
        	var r:Boolean = false;
        		//if  filesize greater then _maxFileSize
		        if (filesize > _maxFileSize){
		        	r = false;
		        	trace("false");
		       	 }else if (filesize <= _maxFileSize){
		        	r = true;
		        	trace("true");
	        	}
	        	
	        	if (_maxFileSize == 0){
	        	r = true;
	        	}
	   	
        	return r;
        }
			
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="mini">
			<mx:SetProperty name="height" value="60"/>
			<mx:SetProperty name="minHeight" value="60"/>
			<mx:SetStyle target="{btnView}" name="icon" value="@Embed('../../../../../assets/application_put.png')"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{this}" duration="1000"/>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Canvas width="100%" height="100%">
		<mx:DataGrid id="listFiles" left="0" top="0" bottom="0" right="0"
			allowMultipleSelection="true" verticalScrollPolicy="on"
			draggableColumns="false" resizableColumns="false" sortableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="File" dataField="name" wordWrap="true"/>
				<mx:DataGridColumn headerText="Size" dataField="size" width="75" textAlign="right"/>
				<mx:DataGridColumn headerText="Type" dataField="type" width="75" textAlign="right"/>
				<mx:DataGridColumn headerText="Fund Code" dataField="fundCode" width="75" textAlign="right"/>
				<mx:DataGridColumn headerText="Office Id" dataField="officeId" width="75" textAlign="right"/>
				<mx:DataGridColumn headerText="Date" dataField="date" width="75" textAlign="right"/>
				<mx:DataGridColumn headerText="File Type" dataField="fileType" width="75" textAlign="right"/>
				<mx:DataGridColumn headerText="" dataField="" width="75" textAlign="right">
					<mx:itemRenderer>
						<mx:Component>
							<mx:VBox horizontalAlign="center">
								<mx:Button id="btnRemove" toolTip="Remove file(s)" click="outerDocument.removeFiles(data)" icon="@Embed('../../../../../assets/delete.png')" width="26"/>
							</mx:VBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:ControlBar horizontalAlign="left" verticalAlign="middle">
		<mx:Button id="btnAdd" toolTip="Add file(s)" click="addFiles()" icon="@Embed('../../../../../assets/add.png')" width="26"/>
		<!--<mx:Button id="btnRemove" toolTip="Remove file(s)" click="removeFiles()" icon="@Embed('../../../../../assets/delete.png')" width="26"/>-->
		<mx:ProgressBar id="progBar" mode="manual" label="" labelPlacement="center" width="100%"/>
		<!--<mx:Button id="btnCancel" toolTip="Cancel upload" icon="@Embed('../../../../../assets/cancel2.png')" width="26" click="onUploadCanceled()"/>-->
		<!--<mx:Button label="Upload" toolTip="Upload file(s)" id="btnUpload" click="onUploadComplete(event)" icon="@Embed('../../../../../assets/bullet_go.png')"/>-->
		<mx:Button id="btnView" toolTip="Show/Hide file(s)" icon="@Embed('../../../../../assets/application_get.png')" width="26" click="changeView()"/>
	</mx:ControlBar>	
</mx:Panel>
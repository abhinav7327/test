<!--$Id$-->
<!--$Author$-->
<!--$Date$-->
<jsp:root version="2.0"
    xmlns:jsp="http://java.sun.com/JSP/Page"
     xmlns:c="http://java.sun.com/jsp/jstl/core"
     xmlns:form="http://www.springframework.org/tags/form"
     xmlns:fn="http://java.sun.com/jsp/jstl/functions"
     xmlns:spring="http://www.springframework.org/tags"
	 xmlns:sessionConversation="http://www.nri.co.jp/sessionConversation"
	 xmlns:xenos="http://www.nri.co.jp/xenos"
	 xmlns:xenosfn ="http://www.nri.co.jp/jstl/functions"
     xmlns:tiles="http://tiles.apache.org/tags-tiles">
<div class="entryContainer paddingFour">
	<jsp:element name="script">
		<jsp:attribute name="type">text/javascript</jsp:attribute>
		<jsp:attribute name="src"><c:url value="/scripts/inf/fieldvalidator.js"/></jsp:attribute>
		<jsp:body></jsp:body>
	</jsp:element>
	
	<spring:message code="form.button.label.add" htmlEscape="false" var="formadd_label"/>
	<spring:message code="form.button.label.save" htmlEscape="false" var="formsave_label"/>
	<spring:message code="form.button.label.cancel" htmlEscape="false" var="formcancel_label"/>
	
	<jsp:element name="script">
        <jsp:attribute name="type">text/javascript</jsp:attribute>		
        <jsp:body>

		var xenos$Wizard$onPageLoad${commandForm.uniqueId} = function($xenos$Wizard){
                var context = $xenos$Wizard.$context;
		      	var baseUrl = xenos.context.path + "/secure/ref/account/entry";
		      	
		      	if("${commandForm.account.counterPartyDetailType}" == "INTERNAL"){
                    $("#formActionArea > div > div > .wizSubmit > .inputBtnStyle").css('display','block');
                    $("#formActionArea > div > div > .wizPrev > .inputBtnStyle").css('display','block');
                }
                    
        /**
		* Common variables declaration to be used for future reference.
		*/
			var item = {};
			var rowId =0;
			var restrictionInfoGrid = null;
			var restrictionInfoGridData =[];
            
        /**
        * A common request handler to be used server communication.
        */
            var xenos$Handler$RequestHandler = xenos$Handler$function({						
                get: {
                    contentType: 'json',
                    requestType: xenos$Handler$default.requestType.asynchronous
                },	
                settings: {
                    beforeSend: function(request) {
                        request.setRequestHeader('Accept', 'application/json');
                    },
                    type: 'POST'
                }
            });
            
        /**
			* Column definition of Restriction Grid
			*/
			var restrictionInfoColumns = [		
							{name:"<spring:message code="ref.account.label.restrictionname" htmlEscape="false"/>", 		field:"restrictionId",	id:"restrictionId"},
							{name:"<spring:message code="ref.account.label.restrictionstatus" htmlEscape="false"/>", 	field:"restrictionFlagExp",id:"restrictionFlagExp"},
							{name:"<spring:message code="ref.account.label.startdate" htmlEscape="false"/>", 			field:"startDateStr",	id:"startDateStr"},
							{name:"<spring:message code="ref.account.label.enddate" htmlEscape="false"/>", 				field:"endDateStr",		id:"endDateStr"}
					];
			
			/**
			* Configuration of Restriction Grid.
			*/
			var restrictionInfoConfig = {
					editMode 				: 'both',
					editCallback 			: restrictionEditHandler,
					deleteCallback			: restrictionDeleteHandler,
					forceFitColumns			: true
						
			};

            <xenos:out escapeXml="false">
			<c:forEach items="${commandForm.otherAttributes.accountRestrictionDynaBeans}" var="dl">
				item = {};
				rowId+=1;
				item.id 				= 	"xenos_" + rowId;
				item.restrictionId 		=  	"<c:out value="${dl.map.restrictionId}" />";
				item.restrictionFlagExp 	=  	"<c:out value="${dl.map.restrictionFlagExp}" />";
				item.startDateStr 		= 	"<c:out value="${dl.map.startDateStr}" />";
				item.endDateStr 		= 	"<c:out value="${dl.map.endDateStr}" />";
				restrictionInfoGridData.push(item);
			</c:forEach>
			</xenos:out>
            
            //****************************	VALIDATION ***********************************
			/**
			* Validate Restriction to be added or updated.
			*/
			function  validateOnAddToRestriction(){
                var validationMessages = [];
				var startdate=$("#ruleStartDateStr").val();
				var enddate=$("#ruleEndDateStr").val();
				var value = $("#cmbRestrictionId").val();
				
				if( VALIDATOR.isNullValue(value)){
				    validationMessages.push(xenos$REF$i18n.account.restriction.restrictionid_empty);
				}
				
				value =  $("#cmbRestrictionFlag").val();
				if( VALIDATOR.isNullValue(value)){
				      validationMessages.push(xenos$REF$i18n.account.restriction.restrictionflag_empty);
				}
				if( VALIDATOR.isNullValue(startdate)){
				     validationMessages.push(xenos$REF$i18n.account.common.start_date_empty);
				}
                else if(!isDateCustom(startdate)){
                    validationMessages.push(xenos$REF$i18n.account.common.start_date_invalid);
                }
                if(!isDateCustom(enddate) &amp;&amp; !VALIDATOR.isNullValue(enddate)){
                    validationMessages.push(xenos$REF$i18n.account.common.end_date_invalid);
                }
							
				if( VALIDATOR.isNullValue(startdate)==false &amp;&amp; VALIDATOR.isNullValue(enddate)==false &amp;&amp; isDateCustom(startdate) &amp;&amp; isDateCustom(enddate))
				{          
					if(!isValidDateRange(startdate,enddate))
					    validationMessages.push(xenos$REF$i18n.account.common.start_date_after_end_date);
				}

				if ( validationMessages.length >0)
				{
					xenos.utils.displayGrowlMessage(xenos.notice.type.error, validationMessages);
					 return false;
				}
			    else {
						$('.formHeader').find('.formTabErrorIco').css('display', 'none');
				}
				return true;
            }
			
            //*******************************ADD, EDIT, CANCEL, DELETE and UPDATE handler******************************
			/**
			* Edit handler when the Edit icon is clicked.
			*/
			function restrictionEditHandler(rowIndex, dataContext){
				var requestUrl = baseUrl + "/editRestrictionXref.json?commandFormId=" + $('[name=commandFormId]').val();
				xenos$Handler$RequestHandler.generic(undefined, {	requestUri: requestUrl,
															settings: {data : {"editIndexRestriction" : rowIndex}},
															onJsonContent :  function(e, options, $target, content) {
																if(content.success == true){
																	populateRestrictionForm(content.value[0]);
																	$('.editBtn').css('display','block'); 
																	$('.addBtn').css('display','none'); 
																} else {
																	xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																}
																return true;
															}
														 }
											);
			}
			
			/**
			* Restriction Delete handler
			*/
			function restrictionDeleteHandler(rowIndex, dataContext){
				var requestUrl = baseUrl + "/deleteRestrictionXref/"+ rowIndex + ".json?commandFormId=" + $('[name=commandFormId]').val();
					xenos$Handler$RequestHandler.generic(undefined, {	requestUri: requestUrl,
															onJsonContent :  function(e, options, $target, content) {
																if(content.success == true){
																	upsertRestriction(content.value[0]);
																	$('.editBtn').hide();
																	$('.addBtn').show();
																} else {
																	xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																}
															}
														 }
											);
			}
			
			/**
			* New Restriction Add handler
			*/
			function onClickAddRestriction(e){
				var valid = validateOnAddToRestriction();
				if(valid){
					var requestUrl = baseUrl + "/addRestrictionXref.json";
					xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
															settings: {data : $('form').serialize()},
															onJsonContent :  function(e, options, $target, content) {
																if(content.success == true){
																	upsertRestriction( content.value[0]);
																} else {
																	xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																}
															}
														 }
											);
					
				}
			}
			/**
			* On Edit Restriction, Save handler
			*/
			function onClickSaveRestriction(e){
				var valid = validateOnAddToRestriction();
				if(valid){
					var requestUrl = baseUrl + "/updateRestrictionXref.json";
					xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
															settings: {data : $('form').serialize()},
															onJsonContent :  function(e, options, $target, content) {
																if(content.success == true){
																	upsertRestriction(content.value[0]);
																	$('.editBtn').css('display','none'); 
																	$('.addBtn').css('display','block'); 
																} else {
																	xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																}
															}
														 }
											);
				}
			}
			/**
			* On Edit Restriction, Cancel handler
			*/
			function onClickCxlRestriction(e){
				var requestUrl = baseUrl + "/cancelRestrictionXref.json?commandFormId=" + $('[name=commandFormId]').val();
				xenos$Handler$RequestHandler.generic(undefined, {	requestUri: requestUrl,
														onJsonContent :  function(e, options, $target, content) {
																if(content.success == true){
																	upsertRestriction(content.value[0]);
																	$('.editBtn').css('display','none'); 
																	$('.addBtn').css('display','block');  
																} else {
																	xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																}
																return true;
															}
														 }
											);
			}
			/**
			* Insert/Update Restriction
			*/
			function upsertRestriction(data){
				rowId = 0;
				var result = data.otherAttributes.accountRestrictionDynaBeans;
				if(result){
					restrictionInfoGrid.clearData();
					for(var i in result){
						item	=	{};
						rowId+=1;
						item.id = "xenos_" + rowId;
						item.restrictionId 		=  	$.trim(result[i].map.restrictionId);
						item.restrictionFlagExp 	=  $.trim(result[i].map.restrictionFlagExp);
						item.startDateStr 		= 	$.trim(result[i].map.startDateStr);
						item.endDateStr 		= 	$.trim(result[i].map.endDateStr);
						
						restrictionInfoGrid.addOrUpdateRow(item,{});
					}
				}
				//Reset all fields 
				populateRestrictionForm(data);
				
				xenos.utils.clearGrowlMessage();
			}
			
			/**
			* Populate the Restriction Form fields with values from the server side
			*/
			function populateRestrictionForm(result){
				if(result){
					$('#cmbRestrictionId').val(result.restrictionRolePage.restrictionId);
					$('#cmbRestrictionFlag').val(result.restrictionRolePage.restrictionFlag);
                    $('#ruleStartDateStr').val(result.restrictionRolePage.startDateStr);
                    $('#ruleEndDateStr').val(result.restrictionRolePage.endDateStr);
                    /*datepicker('setDate',myDate);
					$('#cmbRestrictionId').focus();
					var dateFormat;
					if (xenos$Cache.get('globalPrefs')) {
						dateFormat = xenos$Cache.get('globalPrefs')['mappedUiDisplayDateFormat'];
					}
					var valDateStr = $.trim(result.restrictionRolePage.startDateStr);
					var myDate;
					if(valDateStr != ''){
						myDate = $.datepicker.parseDate(dateFormat,valDateStr);
						$('#ruleStartDateStr').datepicker('setDate',myDate);
					} else{
						$('#ruleStartDateStr').datepicker('setDate','');
					}
					valDateStr = $.trim(result.restrictionRolePage.endDateStr);
					if(valDateStr != ''){
						myDate = $.datepicker.parseDate(dateFormat,valDateStr);
						$('#ruleEndDateStr').datepicker('setDate',myDate);
					} else{
						$('#ruleEndDateStr').datepicker('setDate','');
					}*/
					
				}
			}
			
			restrictionInfoGrid = $("#restrictionInfoGrid").xenoseditablegrid(restrictionInfoGridData, restrictionInfoColumns, restrictionInfoConfig);
			/** 
			* Bind the Event Listeners to the components
			*/
			
			$('#addRestriction').unbind('click');
			$('#addRestriction').bind('click',onClickAddRestriction);
			
			$('#saveRestriction').unbind('click');
			$('#saveRestriction').bind('click',onClickSaveRestriction);
			
			$('#cancelRestriction').unbind('click');
			$('#cancelRestriction').bind('click',onClickCxlRestriction);
			
			var unloadHook = function(){
				//cleanup code
				$xenos$Wizard.deregister('unload',unloadHook);
				restrictionInfoGrid.destroy();
			}
            
			$xenos$Wizard.register('unload',unloadHook);
			<!--Assigning shortcuts for form items-->
			xenos.utils.afterFormRenderScuts();
           };
		   
		   
			function formatDate(target){
				var value=target.value;
				if(value.length == 7){
					$("#"+target.id).val(value.substr(0,6)+"0"+value.substr(6));
				}
			}
			
		</jsp:body>
    </jsp:element>
	
    	<c:if test="${success =='false'}">
			<ul class="xenosError">
				<c:forEach items="${value}" var="dl">		
				<li><spring:message text="${dl}" htmlEscape="false"/></li>	
				</c:forEach>
			</ul>	
		</c:if>

		<div>
			<h1 class="msgHead"><spring:message code="ref.account.entry.label.restriction.title" htmlEscape="false"/></h1>
		</div>
		
		<table class="tableStyle sixCol">
            <tr>
                <td><label><spring:message code="ref.account.label.accountno" htmlEscape="false"/></label></td>
                <td>${commandForm.accountNoExp}</td>
                <td><label><spring:message code="ref.account.entry.label.shortname" htmlEscape="false"/></label></td>
                <td>${commandForm.shortNameExp}</td>	
            </tr>
        </table>

	<div class="entryBlkArea">
	
		<div class="moreHandle">
				<h1 class="msgHead">
					<spring:message code="ref.account.entry.label.restriction" htmlEscape="false"/>
					<div class="handleBlock">
					  <span class="handler collapse"><spring:message text="" htmlEscape="false"/></span>
					</div>
				</h1>
		</div>	
		
		<div class="formItemBlock topitems dottedBg">
			<!-- Restriction Name -->
			<div class="formItem commFld">
				<form:label path="commandForm.restrictionRolePage.restrictionId" class="required"><spring:message code="ref.account.label.mandatoryoptionalarea.restrictionname" htmlEscape="false"/></form:label> 
				<span>
					<xenos:select id="cmbRestrictionId" path="commandForm.restrictionRolePage.restrictionId" class="dropdowninput noWidth">
                    <form:option value="" />
						<form:options items="${commandForm.dropDownListValues.restrictionIdList}"/>
					</xenos:select>
				</span>
				<div class="clear"><spring:message text="" htmlEscape="false"/></div>
			</div>
			<!-- Restriction Status -->
			<div class="formItem commFld">
				<form:label path="commandForm.restrictionRolePage.restrictionFlag" class="required"><spring:message code="ref.account.label.mandatoryoptionalarea.restrictionstatus" htmlEscape="false"/></form:label> 
				<span>
					<xenos:select id="cmbRestrictionFlag" path="commandForm.restrictionRolePage.restrictionFlag" class="dropdowninput">
                    <form:option value="" />
						<form:options items="${commandForm.dropDownListValues.restrictionStatusList}" itemLabel="label" itemValue="value"/>
					</xenos:select>
				</span>
				<div class="clear"><spring:message text="" htmlEscape="false"/></div>
			</div>
			<!-- Start Date -->
			<div class="formItem">
				<form:label path="commandForm.restrictionRolePage.startDateStr" class="required"><spring:message code="ref.account.label.mandatoryoptionalarea.startdate" htmlEscape="false"/></form:label> 
				<span><form:input id="ruleStartDateStr" value="" path="commandForm.restrictionRolePage.startDateStr" class="dateinput" onblur="if(!checkDate(this))
																							{xenos.postNotice(xenos.notice.type.error, xenos.utils.evaluateMessage
																							(xenos.i18n.datevalidationmessage.incorrect_date,[this.value]))}else{formatDate(this)};" /></span>
				<div class="clear"><spring:message text="" htmlEscape="false"/></div>
			</div>
			<!-- End date -->
			<div class="formItem">
				<form:label path="commandForm.restrictionRolePage.endDateStr"><spring:message code="ref.account.label.enddate" htmlEscape="false"/></form:label> 
				<span><form:input id="ruleEndDateStr" value="" path="commandForm.restrictionRolePage.endDateStr" class="dateinput" onblur="if(!checkDate(this))
																							{xenos.postNotice(xenos.notice.type.error, xenos.utils.evaluateMessage
																							(xenos.i18n.datevalidationmessage.incorrect_date,[this.value]))}else{formatDate(this)};" /></span>
				<div class="clear"><spring:message text="" htmlEscape="false"/></div>
			</div>
			<div class="clear"><spring:message text="" htmlEscape="false"/></div>
			<!-- Add Button -->
			 <div id="formActionArea" class="gridBtnMargin">
				<div class="right">
					<spring:message code="form.button.label.add" htmlEscape="false" var="formadd_label"/>
					<spring:message code="form.button.label.save" htmlEscape="false" var="formsave_label"/>
					<spring:message code="form.button.label.cancel" htmlEscape="false" var="formcancel_label"/>
					<div class="btnWrapStyle submitBtn gridAddBtn">
					<span class="addBtn" style="display:block"><input id="addRestriction" type="button" value="${formadd_label}" class="inputBtnStyle"/></span></div>
					<span class="editBtn" style="display:none">	
						<div class="btnWrapStyle submitBtn"><input id="saveRestriction" type="button" value="${formsave_label}" class="inputBtnStyle"/></div>
						<div class="btnWrapStyle resetBtn"><input id="cancelRestriction" type="button" value="${formcancel_label}" class="inputBtnStyle"/></div>
					</span> 
				</div>
			</div>
			<!-- Restriction Area -->
			<div class="entryGrid">
				<div id="restrictionInfoGrid" class="xenos-grid" style="width:100%;height:300px;"><spring:message text="" htmlEscape="false"/></div>	
			</div>
		</div>
	</div>	
	<div class="clear"><spring:message text="" htmlEscape="false"/></div>
</div>     
</jsp:root>
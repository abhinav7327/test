<!--$Id$-->
<!--$Author: himanshum $-->
<!--$Date: 2016-12-26 22:38:44 $-->

<jsp:root version="2.0"
     xmlns:jsp="http://java.sun.com/JSP/Page"
     xmlns:c="http://java.sun.com/jsp/jstl/core"
     xmlns:form="http://www.springframework.org/tags/form"
     xmlns:fn="http://java.sun.com/jsp/jstl/functions"
     xmlns:spring="http://www.springframework.org/tags"
     xmlns:xenos="http://www.nri.co.jp/xenos"
	 xmlns:xenosfn ="http://www.nri.co.jp/jstl/functions"
     xmlns:sessionConversation="http://www.nri.co.jp/sessionConversation"
     xmlns:tiles="http://tiles.apache.org/tags-tiles">
	 
<div class="entryContainer paddingFour">
          
    <!-- Java script include -->
	<jsp:element name="script">
        <jsp:attribute name="type">text/javascript</jsp:attribute>
        <jsp:body>
		
        var xenos$Wizard$onPageLoad${commandForm.uniqueId} = function($xenos$Wizard){
        	
	        var context = $xenos$Wizard.$context;
			var baseUrl = xenos.context.path + context.find('form').attr('action');
			
			xenos.loadScript([
				{path: xenos.context.path + '/scripts/inf/datevalidation.js', async: false},
				{path: xenos.context.path + '/scripts/inf/utilCommons.js', async: false},
				{path: xenos.context.path + '/scripts/ref/instrumentEntry.js', async: false}
			]);			
			
			if("${commandForm.options.actionType}" == "ENTRY"){
				$("#formActionArea > div > div > .wizSubmit > .inputBtnStyle").css('display','block');
				$("#formActionArea > div > div > .wizPrev > .inputBtnStyle").css('display','block');
			}
			
	        /**
	         * A common request handler to be used server communication.
	         */
	         var xenos$Handler$RequestHandler = xenos$Handler$function({
	             get: {
	                 contentType: 'json',
	                 requestType: xenos$Handler$default.requestType.asynchronous
	             },  
	             settings: {
	                 beforeSend: function(request) {
	                     request.setRequestHeader('Accept', 'application/json');
	                 },
	                 type: 'POST'
	             }
	         });
        

		
         /*************************** Grid result, config and columns ****************************/
         var rowId = 0; 
         var restrictionInfoGridResult=[];
         var restrictionInfoGrid;
         var restrictionInfoGridConfig = {
                     editMode                    :   'both',                                                             
                     editCallback                :   restrictionInfoEditHandler,
                     deleteCallback              :   restrictionInfoDeleteHandler, 					 
                     forceFitColumns             :   true
         };
         
         var restrictionInfoGridColumns = [
                    {name:"<spring:message code="ref.insturment.entry.label.restrictiontab.restriction" htmlEscape="false"/>", field:"insRestrictionDisp",id:"insRestrictionDisp", sortable:false},
                    {name:"<spring:message code="ref.insturment.entry.label.restrictiontab.startdate" htmlEscape="false"/>", field:"startDateGrid",id:"startDateGrid",sortable:false},
                    {name:"<spring:message code="ref.insturment.entry.label.restrictiontab.enddate" htmlEscape="false"/>", field:"endDateGrid",id:"endDateGrid",sortable:false}                                        
         ];
         
         
         /************************ Request Object Population ********************/
             
         function populateRestrictionInfoRequestParams(){
            var reqObj = {
                "resSelectedItem"  :    $.trim($('#resSelectedItem').val()),
                "startDate"  :    $.trim($('#startDate').val()),
                "endDate"  :    $.trim($('#endDate').val())
            };
            return reqObj;
         }
         

        
         /*************************** Validation functions **********************/
             
         function validateRestrictionInfoAddUpdate(){
            var validationMessages = [];
            
            if(VALIDATOR.isNullValue($.trim($('#resSelectedItem').val()))){                
                validationMessages.push(xenos$REF$i18n.instrument.restriction.restriction_empty);
            }
			
			if(VALIDATOR.isNullValue($.trim($('#startDate').val()))){                
                validationMessages.push(xenos$REF$i18n.instrument.restriction.start_date_empty);
            }
			
			if (($("#startDate").val() != "" <![CDATA[&&]]> $("#startDate").val() != null <![CDATA[&&]]> $("#startDate").val() != undefined) <![CDATA[&&]]> isDateCustom($("#startDate").val())==false){
				validationMessages.push(xenos.utils.evaluateMessage(xenos$REF$i18n.instrument.restriction.start_date_empty));
			}
			
			if (($("#endDate").val() != "" <![CDATA[&&]]> $("#endDate").val() != null <![CDATA[&&]]> $("#endDate").val() != undefined) <![CDATA[&&]]> isDateCustom($("#endDate").val())==false){
				validationMessages.push(xenos.utils.evaluateMessage(xenos$REF$i18n.instrument.restriction.end_date_empty));
			}
			
			if (($("#startDate").val() != "" <![CDATA[&&]]> $("#startDate").val() != null <![CDATA[&&]]> $("#startDate").val() != undefined) <![CDATA[&&]]> isDateCustom($("#startDate").val())==true){
				if(($("#endDate").val() != "" <![CDATA[&&]]> $("#endDate").val() != null <![CDATA[&&]]> $("#endDate").val() != undefined) <![CDATA[&&]]> $.trim($('#startDate').val()) > $.trim($('#endDate').val())){
					validationMessages.push(xenos$REF$i18n.instrument.restriction.date_compare);
				}
			}
            
           if ( validationMessages.length >0) {
				xenos.utils.displayGrowlMessage(xenos.notice.type.error, validationMessages);
                return false;
           } else {
                $('.formHeader').find('.formTabErrorIco').css('display', 'none');
            }
            return true;
         }
         
         function validateMemoAddUpdate(){
            var validationMessages = [];
            
            if(VALIDATOR.isNullValue($.trim($('#memo').val()))){                
                validationMessages.push(xenos$REF$i18n.instrument.restriction.memo_empty);
            }
            
          if ( validationMessages.length >0){
				xenos.utils.displayGrowlMessage(xenos.notice.type.error, validationMessages);
                 return false;
           } else {
                $('.formHeader').find('.formTabErrorIco').css('display', 'none');
            }
            return true;
         }
         
         /***************************** Handler callbacks **************************/
                                /**** Restriction Info handler callbacks ****/
        
        function upsertRestrictionInfo(data){
            var result = data.restrictions;  
            var rowId = 0;               
            if(result){
                restrictionInfoGrid.clearData();
                for(var i in result){                    
                    items = {};
                    rowId+=1;
                    items.id             =   "xenos_" + rowId;
                    items.insRestrictionDisp        =   result[i].insRestrictionDisp;
					items.startDateGrid =   result[i].startDateDisp;
                    items.endDateGrid     =   result[i].endDateDisp;
                    restrictionInfoGrid.addOrUpdateRow(items,{});
                }
                populateRestrictionInfoForm(data);
            }
			xenos.utils.clearGrowlMessage();
        }
        
		function populateRestrictionInfoForm(result){
			if(result){
				$('#resSelectedItem').val(result.resSelectedItem); 
				$('#startDate').val(result.startDate);
				$('#endDate').val(result.endDate);                
			}
		}


         /***************************** Restriction Info Handler functions **************************/
         
         function restrictionInfoAddHandler(e){
                var valid = validateRestrictionInfoAddUpdate();
                if(valid){
                    var requestUrl = baseUrl + "/addRestrictionInfo.json?commandFormId=" + $('[name=commandFormId]').val();                                               
                    xenos$Handler$RequestHandler.generic(e, { requestUri: requestUrl,
                                                            settings: {data : populateRestrictionInfoRequestParams()},
                                                            onJsonContent :  function(e, options, $target, content) {                                                            
                                                                if(content.success == true){
                                                                    upsertRestrictionInfo(content.value[0]);
                                                                } else {
                                                                    xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
                                                                }
                                                            }
                                                         }
                                            );
                }
             }
             
	        /**
	        * Restriction info edit handler
	        */
	        function  restrictionInfoEditHandler(rowIndex, dataContext){
	            var requestUrl = baseUrl + "/editRestrictionInfo.json?commandFormId=" + $('[name=commandFormId]').val();
	            xenos$Handler$RequestHandler.generic(undefined, { requestUri: requestUrl,
	                                                    settings: {data : {"rowNo" : rowIndex}},
	                                                    onJsonContent :  function(e, options, $target, content) {
	                                                        if(content.success == true){
	                                                            populateRestrictionInfoForm(content.value[0]);
	                                                            $('.editBtnRestrictionInfo').css('display','block'); 
	                                                            $('.addBtnRestrictionInfo').css('display','none');
	                                                        } else {
	                                                            xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
	                                                        }
	                                                        return true;
	                                                    }
	                                                 }
	                                    );
	        }
          
          function restrictionInfoDeleteHandler(rowIndex, dataContext){
             var requestUrl = baseUrl + "/deleteRestrictionInfo.json?commandFormId=" + $('[name=commandFormId]').val();
             xenos$Handler$RequestHandler.generic(undefined, { requestUri: requestUrl,
                                                     settings: {data : {"rowNo" : rowIndex}},
                                                     onJsonContent :  function(e, options, $target, content) {
                                                         if(content.success == true){
                                                             upsertRestrictionInfo(content.value[0]);
															 $('.editBtnRestrictionInfo').hide();
															 $('.addBtnRestrictionInfo').show();
                                                         } else {
                                                             xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
                                                         }
                                                     }
                                                  }
                                     );
          }
          
          function restrictionInfoUpdateHandler(e){
                var valid = validateRestrictionInfoAddUpdate();
                if(valid){
                    var requestUrl = baseUrl + "/updateRestrictionInfo.json?commandFormId=" + $('[name=commandFormId]').val();                                               
                    xenos$Handler$RequestHandler.generic(e, { requestUri: requestUrl,
                                                            settings: {data : populateRestrictionInfoRequestParams()},
                                                            onJsonContent :  function(e, options, $target, content) {                                                            
                                                                if(content.success == true){
                                                                    upsertRestrictionInfo(content.value[0]);
                                                                    $('.editBtnRestrictionInfo').css('display','none'); 
                                                                    $('.addBtnRestrictionInfo').css('display','block');
                                                                } else {
                                                                    xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
                                                                }
                                                            }
                                                         }
                                            );
                }
             }
             
          function restrictionInfoCancelHandler(rowIndex, dataContext){
             var requestUrl = baseUrl + "/cancelRestrictionInfo.json?commandFormId=" + $('[name=commandFormId]').val();
             xenos$Handler$RequestHandler.generic(undefined, { requestUri: requestUrl,                                                     
                                                     onJsonContent :  function(e, options, $target, content) {
                                                         if(content.success == true){
                                                             upsertRestrictionInfo(content.value[0]);
                                                             $('.editBtnRestrictionInfo').css('display','none'); 
                                                             $('.addBtnRestrictionInfo').css('display','block');
                                                         } else {
                                                             xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
                                                         }
                                                     }
                                                  }
                                     );
          }          
          
          
        
         /*************************** Grid initializations *************************************/
         <xenos:out escapeXml="false">
			 <c:forEach items="${commandForm.restrictions}" var="dl">
				  items = {};
				  rowId+=1;
				  items.id             = "xenos_" + rowId;               
				  items.insRestrictionDisp  =   '<c:out value="${dl.insRestrictionDisp}" />';
				  items.startDateGrid  =   '<c:out value="${dl.startDateDisp}" />';
				  items.endDateGrid  =   '<c:out value="${dl.endDateDisp}" />';                             
				  restrictionInfoGridResult.push(items);
			  </c:forEach>
			  rowId = 0;
				 
			 restrictionInfoGrid = $('#restrictionInfoGrid').xenoseditablegrid(restrictionInfoGridResult, restrictionInfoGridColumns, restrictionInfoGridConfig);
			 
		  </xenos:out>

         
         /*************************** Handler bindings ***********************/
         
		/**** Restriction Info handler bindings ****/
                               
         $('#addRestrictionInfoBtn').unbind('click');
         $('#addRestrictionInfoBtn').bind('click', restrictionInfoAddHandler);
         
         $('#updateRestrictionInfoBtn').unbind('click');
         $('#updateRestrictionInfoBtn').bind('click', restrictionInfoUpdateHandler);
         
         $('#cancelRestrictionInfoBtn').unbind('click');
         $('#cancelRestrictionInfoBtn').bind('click', restrictionInfoCancelHandler);
         						

         /************** page load hooks **************/
        
		var validateHook = function() {
		
			var validationMessages = [];
			
			if (($("#startDate").val() != "" <![CDATA[&&]]> $("#startDate").val() != null <![CDATA[&&]]> $("#startDate").val() != undefined) <![CDATA[&&]]> isDateCustom($("#startDate").val())==false){
				validationMessages.push(xenos$REF$i18n.instrument.restriction.start_date_empty);
			}
			
			if (($("#endDate").val() != "" <![CDATA[&&]]> $("#endDate").val() != null <![CDATA[&&]]> $("#endDate").val() != undefined) <![CDATA[&&]]> isDateCustom($("#endDate").val())==false){
				validationMessages.push(xenos$REF$i18n.instrument.restriction.end_date_empty);
			}
			
			if($.trim($('#startDate').val()) > $.trim($('#endDate').val())){
				validationMessages.push(xenos$REF$i18n.instrument.restriction.date_compare);
			}
			
			if ( validationMessages.length >0){   
				xenos.utils.displayGrowlMessage(xenos.notice.type.error, validationMessages);
				return false;
			} else {
				$('.formHeader').find('.formTabErrorIco').css('display', 'none');
			} 
			return true; 
			
        };
        
        var unloadHook = function(){
            $xenos$Wizard.deregister('previous',validateHook);
            $xenos$Wizard.deregister('submit',validateHook);
            $xenos$Wizard.deregister('unload',unloadHook);
<!--        restrictionInfoGrid.destroy();
            delete restrictionInfoGrid; -->
        };
        
        
        $xenos$Wizard.register('previous',validateHook);
        $xenos$Wizard.register('submit',validateHook);
        $xenos$Wizard.register('unload',unloadHook);  

     };
        
        </jsp:body>
    </jsp:element>
     
     <spring:message code="form.button.label.add" htmlEscape="false" var="formadd_label"/>
     <spring:message code="form.button.label.save" htmlEscape="false" var="formsave_label"/>
     <spring:message code="form.button.label.cancel" htmlEscape="false" var="formcancel_label"/>    
     
     <h1><spring:message code="ref.insturment.entry.label.titleWizard" htmlEscape="false"/> <spring:message code="ref.insturment.entry.label.restrictionheadingWizard" htmlEscape="false"/></h1>
     
     
	<c:if test="${success =='false'}">
		<!-- Error message Area -->
		<ul class="xenosError">
			<c:forEach items="${value}" var="dl">		
			<li><spring:message text="${dl}" htmlEscape="false"/></li>	
			</c:forEach>
		</ul>	
	</c:if>
	<c:if test="${isSoftValidationExists =='true'}">
	<!-- Warning message Area -->
		<ul class="xenosWarn">
			<c:forEach items="${softValidationList}" var="dl">		
				<li><spring:message text="${dl}" htmlEscape="false"/></li>	
			</c:forEach>
		</ul>	
	</c:if>
     
     <div class="detailBlock paddingFour">
         <table class="tableStyle sixCol moreTable">
            <tr class="noBdr">
                <td><form:label path="commandForm.defaultInstrumentCode"><spring:message code="ref.insturment.entry.label.othertab.securitycode" htmlEscape="false"/></form:label></td>
                <td><span class="detailTxtVal">${commandForm.defaultInstrumentCode}</span></td>
                <td><form:label path="commandForm.instrumentPage.instrumentType"><spring:message code="ref.insturment.entry.label.othertab.instrumenttype" htmlEscape="false"/></form:label></td>
                <td><span class="detailTxtVal">${commandForm.instrumentPage.instrumentType}</span></td>
                <td><form:label path="commandForm.defaultShortName"><spring:message code="ref.insturment.entry.label.othertab.shortname" htmlEscape="false"/></form:label></td>
                <td><span class="detailTxtVal">${commandForm.defaultShortName}</span></td>
            </tr>      
         </table>
     </div>
     
	 
     <!-- Restriction Info **START -->
     
	  <div class="moreHandle">
		<h1 class="msgHead"><spring:message code="ref.insturment.entry.label.restrictiontab.restrictioninfo" htmlEscape="false"/>
			<div class="handleBlock">
				<span class="handler collapse" id="spanInstrumentRestrictionId"><spring:message text="" htmlEscape="false"/></span>
			</div>
		</h1>
	  </div>
	 
	 
     <div class="entryBlkArea ">     	
     	<div class="formItemBlock dottedBg Scrn3col">
        
	        <div class="formItem">
	            <form:label path="commandForm.resSelectedItem"><spring:message code="ref.insturment.entry.label.restrictiontab.restriction" htmlEscape="false"/></form:label> 
	            <span>
	            <form:select id="resSelectedItem" path="commandForm.resSelectedItem" class=" ">
					<form:option value=""/>
	                <form:options items="${commandForm.restrictionValues}" itemLabel="label" itemValue="value"/>
	            </form:select>
	            </span>            
	            <div class="clear"><spring:message text="" htmlEscape="false"/></div>
	        </div>
	        
	       <div class="formItem">
            <form:label path="commandForm.startDate" class="required" ><spring:message code="ref.insturment.entry.label.restrictiontab.startdate" htmlEscape="false"/></form:label>
            <span><form:input id="startDate" value="" path="commandForm.startDate"   class="formInput dateinput  " onchange="if(!checkDate(this)){xenos.postNotice(xenos.notice.type.error, xenos.utils.evaluateMessage(xenos$REF$i18n.instrument.date_format_check, [this.value]))}else{ xenos.ns.views.instrumentEntryAmend.formatDate(this)}"/></span>            
            <div class="clear"><spring:message text="" htmlEscape="false"/></div>
           </div>
           
           <div class="formItem">
            <form:label path="commandForm.endDate"><spring:message code="ref.insturment.entry.label.restrictiontab.enddate" htmlEscape="false"/></form:label>
            <span><form:input id="endDate" value="" path="commandForm.endDate"   class="formInput dateinput  " onchange="if(!checkDate(this)){xenos.postNotice(xenos.notice.type.error, xenos.utils.evaluateMessage(xenos$REF$i18n.instrument.date_format_check, [this.value]))}else{ xenos.ns.views.instrumentEntryAmend.formatDate(this)}"/></span>            
            <div class="clear"><spring:message text="" htmlEscape="false"/></div>
           </div>
              
         	<div id="formActionArea" class="gridBtnMargin">
            	 <div class="right">
                	 <div class="btnWrapStyle submitBtn gridAddBtn">
                   		<span class="addBtnRestrictionInfo" style="display:block"><input id="addRestrictionInfoBtn" type="button" value="${formadd_label}" class="inputBtnStyle  "/></span>
                 	</div>
                 	<span class="editBtnRestrictionInfo" style="display:none"> 
                     	<div class="btnWrapStyle submitBtn"><input id="updateRestrictionInfoBtn" type="button" value="${formsave_label}" class="inputBtnStyle"/></div>
                     	<div class="btnWrapStyle resetBtn"><input id="cancelRestrictionInfoBtn" type="button" value="${formcancel_label}" class="inputBtnStyle"/></div>
                 	</span>
             	</div>
         	</div>
         	
         	<div class="clear"><spring:message text="" htmlEscape="false"/></div>
         	
       </div>
       <div class="clear"><spring:message text="" htmlEscape="false"/></div>
       <div class="entryGrid">
           	<div id="restrictionInfoGrid" class="xenos-grid" style="width:100%;height:150px;"><spring:message text="" htmlEscape="false"/></div>
       </div>
       <div class="clear"><spring:message text="" htmlEscape="false"/></div>
       <div class="lineHide"><spring:message text="" htmlEscape="false"/></div>
     </div>
     <!-- Restriction Info **END -->
	 
     
</div> 

</jsp:root>
<!--$Id$-->
<!--$Author: rameezr $-->
<!--$Date: 2016-12-27 10:33:40 $-->
<jsp:root version="2.0" xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:spring="http://www.springframework.org/tags"
	xmlns:util="urn:jsptagdir:/WEB-INF/tags/util"
	xmlns:form="http://www.springframework.org/tags/form"
	xmlns:display="http://displaytag.sf.net"
	xmlns:xenos="http://www.nri.co.jp/xenos"
	xmlns:sessionConversation="http://www.nri.co.jp/sessionConversation"
	xmlns:tiles="http://tiles.apache.org/tags-tiles"
	xmlns:jsp="http://java.sun.com/JSP/Page">

	<div class="entryContainer">

		<jsp:directive.page contentType="text/html;charset=UTF-8" />
		<jsp:output omit-xml-declaration="yes" />

		<c:if test="${success =='false'}">
			<!-- Error message Area -->
			<ul class="xenosError">
				<c:forEach items="${value}" var="dl">
					<li><spring:message text="${dl}" htmlEscape="false" /></li>
				</c:forEach>
			</ul>
		</c:if>

		<spring:message code="form.button.label.add" htmlEscape="false"
			var="formadd_label" />
		<spring:message code="form.button.label.save" htmlEscape="false"
			var="formsave_label" />
		<spring:message code="form.button.label.cancel" htmlEscape="false"
			var="formcancel_label" />

		<jsp:element name="script">
        <jsp:attribute name="type">text/javascript</jsp:attribute>
        <jsp:body>
		
			xenos.loadLocalizedScript([
                  {path: xenos.context.path + '/scripts/inf/xenos-i18n', async: false},
                  {path: xenos.context.path + '/scripts/cax/xenos-cax-i18n', async: false}
              ]);
			//Loading Required scripts before validator is called.
              xenos.loadScript([
                  {path: xenos.context.path + '/scripts/ref/xenos-ns.js', async: false},                  
                  {path: xenos.context.path + '/scripts/inf/datevalidation.js', async: false},
				  {path: xenos.context.path + '/scripts/cax/entitlementAdjustmentEntry.js', async: false}
              ]);

			var xenos$Wizard$onPageLoad${commandForm.uniqueId} = function($xenos$Wizard){
			var isEditableFlag = "false";
			var isIncomeFlag = "false";
			var isIncome = ${commandForm.isIncome};
			var actionType = '${commandForm.actionType}';
			$('#calculateAmtBtn').unbind('click');
			$('#calculateAmtBtn').bind('click',xenos$Wizard$AdjustmentEntry$calculateHandler);
			$('#getSecurityBalanceBtn').unbind('click');
			$('#getSecurityBalanceBtn').bind('click',xenos$Wizard$AdjustmentEntry$getSecurityBalanceHandler);
			if(actionType == 'entry'){
						$xenos$Wizard.apply({ navigations : {
															okHandler : 'backToQuerySummary',
															backHandler:'backToQuerySummary'
														}
			});
			}
			var corporateActionId = '${commandForm.corporateActionId}';
			var editable = '${commandForm.editableAllotedSec}';
			xenos$Wizard$AdjustmentEntry$editableAllotSec(editable,isIncome);
			
			// calling the state change handler to load the appropriate mxml file. 
			xenos$Wizard$AdjustmentEntry$stateChangeHandler();  			
			 
			//For Others Event type    
		   if(corporateActionId == "OTHERS") {
			 xenos$Wizard$AdjustmentEntry$loadOthersEventPart();
		   }  
		   
			var xenos$Wizard$AdjustmentEntry$unloadHook = function(){
				$xenos$Wizard.deregister('submit',xenos$Wizard$AdjustmentEntry$validateHook);
				$xenos$Wizard.deregister('unload',xenos$Wizard$AdjustmentEntry$unloadHook);
			};	
			
		   $xenos$Wizard.register('submit',xenos$Wizard$AdjustmentEntry$validateHook);
		   $xenos$Wizard.register('unload',xenos$Wizard$AdjustmentEntry$unloadHook);
			
		};
		
		function xenos$Wizard$AdjustmentEntry$onChangeSecurityCode() {
			
			var isIncome = '${commandForm.isIncome}';
			if(isIncome == 'true'){
				var allotCcy = $.trim($('#allotCcy').val());
				$('#allottedInstrumentNameText').val(allotCcy);
			} else{
				var allotSecurityCode = $.trim($('#allotSecurityCode').val());
				$('#allottedInstrumentNameText').val(allotSecurityCode);
			}		
		
		}
		
		var xenos$Wizard$AdjustmentEntry$validateHook = function() {
				return xenos$Wizard$AdjustmentEntry$validateSubmitEntitlementAdjust();
			}
			
			/**
			* Validate TaxFee Entry attributes.
			*/
			function xenos$Wizard$AdjustmentEntry$validateSubmitEntitlementAdjust(){
					
					var validationMessages = [];
					var paymentDate = $.trim($('#paymentDate').val());
					var fundAccount = $.trim($('#tgtaccountNo').val());
					var securityBalance = $.trim($('#securityBalanceStr').val());
					var underlineSecurityBV = $.trim($('#underlineSecurityBV').val());
					var allottedQuantityStr = $.trim($('#allottedQuantityStr').val());
					var allottedAmountStr = $.trim($('#allottedAmountStr').val());
					var splAmountOrQtyStr = $.trim($('#splAmountOrQtyStr').val());
					var fractionalShareStr = $.trim($('#fractionalShareStr').val());
					var availableDate = $.trim($('#availableDate').val());
					
					if(VALIDATOR.isNullValue(securityBalance)){
						validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.security_balance_empty);
					}
					else {
						if(!formatSignedQuantity($('#securityBalanceStr'),15,3,null,$('#securityBalanceStr').parent().parent().find('label').text())) { 
							return false;
						}
					}
					if(VALIDATOR.isNullValue(fundAccount)){
						validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.accountno_blank);
					}
					if(VALIDATOR.isNullValue(paymentDate)){
						validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.payment_date_empty);
					}
					else {
						if(paymentDate.length > 0 <![CDATA[&&]]> isDateCustom(paymentDate)==false) {
							validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.dateformat_invalid + ' ' + paymentDate);
						}
					}
					if(!VALIDATOR.isNullValue(availableDate)){
						if(availableDate.length > 0 <![CDATA[&&]]> isDateCustom(availableDate)==false) {
							validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.dateformat_invalid + ' ' + availableDate);
						}
					}
					if(!VALIDATOR.isNullValue(underlineSecurityBV)){
						if(!formatSignedQuantity($('#underlineSecurityBV'),15,3,null,$('#underlineSecurityBV').parent().parent().find('label').text())) {
							return false;
						}
					}
					if(!VALIDATOR.isNullValue(allottedQuantityStr)){
						if(!formatSignedQuantity($('#allottedQuantityStr'),15,3,null,$('#allottedQuantityStr').parent().parent().find('label').text())) {
							return false;
						}
					}
					if(!VALIDATOR.isNullValue(allottedAmountStr)){
						if(!formatSignedQuantity($('#allottedAmountStr'),15,3,null,$('#allottedAmountStr').parent().parent().find('label').text())) {
							return false;
						}
					}
					if(!VALIDATOR.isNullValue(splAmountOrQtyStr)){
						if(!formatSignedQuantity($('#splAmountOrQtyStr'),15,3,null,$('#splAmountOrQtyStr').parent().parent().find('label').text())) {
							return false;
						}
					}
					if(!VALIDATOR.isNullValue(fractionalShareStr)){
						if(!formatSignedQuantity($('#fractionalShareStr'),15,3,null,$('#fractionalShareStr').parent().parent().find('label').text())) {
							return false;
						}
					}
					if(validationMessages.length > 0) {
						xenos.utils.displayGrowlMessage(xenos.notice.type.error, validationMessages);
						return false;
					}else{
						xenos.utils.clearGrowlMessage();
					}
					return true;
			}	

		/**
		  * This Handler method alters the states on the basis of corporate action id .
		  */
		  function xenos$Wizard$AdjustmentEntry$stateChangeHandler() {
			var corporateActionId = '${commandForm.corporateActionId}';
			var stockOptionFlag = '${commandForm.stockOptionFlag}';
			var currentState = "";					
			 switch(corporateActionId) {
				case "CASH_DIVIDEND":      
					currentState = "CashRelatedEntitlement";
					$('#tax').css('display','block');
					xenos$Wizard$AdjustmentEntry$populateAttributes();
				case "COUPON_PAYMENT":      
					currentState = "CashRelatedEntitlement";
					$('#tax').css('display','block');
					xenos$Wizard$AdjustmentEntry$populateAttributes();
					
				break;      
				case "CAPITAL_REPAYMENT":
					currentState = "CashRelatedEntitlement";
				break;
				case "REDEMPTION_BOND":
					if(stockOptionFlag == "true") {
						currentState = "StockRelatedEntitlement";
					} else {
						currentState = "CashRelatedEntitlement";    	
					}        
				case "OPTIONAL_STOCK_DIV":
					if(stockOptionFlag == "true") {
						currentState = "StockRelatedEntitlement";
					} else {
						currentState = "CashRelatedEntitlement";    	
					}        
				case "DIV_REINVESTMENT":
					if(stockOptionFlag == "true") {
						currentState = "StockRelatedEntitlement";
					} else {
						currentState = "CashRelatedEntitlement";    	
					}
					
				break;      
				case "STOCK_SPLIT":
					currentState = "StockRelatedEntitlement";
				case "STOCK_DIVIDEND":
					currentState = "StockRelatedEntitlement";
				case "BONUS_ISSUE":
					currentState = "StockRelatedEntitlement";
				case "SPIN_OFF":
					currentState = "StockRelatedEntitlement";
				case "NAME_CHANGE":
					currentState = "StockRelatedEntitlement";
				case "REVERSE_STOCK_SPLIT":
					currentState = "StockRelatedEntitlement";
				case "STOCK_MERGER":
					currentState = "StockRelatedEntitlement";
				case "RIGHTS_ALLOCATION":
					currentState = "StockRelatedEntitlement";
				case "OTHERS":
					currentState = "StockRelatedEntitlement";
				case "RIGHTS_EXPIRY":   
					currentState = "StockRelatedEntitlement";	
				break;
			   }
			   xenos$Wizard$AdjustmentEntry$eventTypeChangeHandler(currentState);	   
			   
		  };
			
					
			function xenos$Wizard$AdjustmentEntry$eventTypeChangeHandler(currentState) {
						/**
						* A common request handler to be used server communication.
						*/
						var xenos$Handler$RequestHandlerHtml = xenos$Handler$function({
							get: {
								requestType: xenos$Handler$default.requestType.asynchronous
							},	
							settings : {
								beforeSend : function(request) {
								request.setRequestHeader('Accept', 'text/html;type=ajax');
							},
							type : 'POST'
							}
						});
						var baseUrl = xenos.context.path + "/secure/cax/entitlement/adjustment";
					    var requestUrl = null;
						
						
							if(currentState == 'StockRelatedEntitlement') {
								requestUrl = baseUrl + "/entry/changeEvent?commandFormId=" + $('[name=commandFormId]').val()+"&amp;fragments=stockEntitlementEntry";
							} else if (currentState == 'CashRelatedEntitlement') {
								requestUrl = baseUrl + "/entry/changeEvent?commandFormId=" + $('[name=commandFormId]').val()+"&amp;fragments=cashEntitlementEntry";
							} 
							
							
							 xenos$Handler$RequestHandlerHtml.generic(undefined, {	requestUri: requestUrl,
															settings: {
																	   
																	   complete: function(jqxhr) {
																			console.log(jqxhr);
																			
																			 $("#blockForEventType").html(jqxhr.responseText);
																			 $("#blockForEventType").show();
																			$('input.dateinput', "#blockForEventType").xenosdatepicker();
																			var isIncome = ${commandForm.isIncome};
																			if(isIncome == true){
																				$('#cashPartAvailableDate').css('display','none');
																				$('#stockPartAvailableDate').css('display','none');
																			}
																			if (currentState == 'StockRelatedEntitlement') {	
																				xenos$Wizard$AdjustmentEntry$loadStockPart();
																				$('#eventTypeNameDiv').css('display','none');
																			}
																			
																			else if (currentState == 'CashRelatedEntitlement') {
																				xenos$Wizard$AdjustmentEntry$loadCashPart();
																			}
																		
																	  }
														}
														}
												); 
						
				}
			
			
		  function xenos$Wizard$AdjustmentEntry$editableAllotSec(editableAllotedSec, isIncome) {
			if(editableAllotedSec == 'Y'){
				isEditableFlag = true;
				$('#allottedInstrument').css('display', 'none');
				$('#allottedInstrumentText').css('display', 'block');
				$('#allottedInstrumentName').css('display', 'none');
				$('#allottedInstrumentNameText').css('display', 'block');
				if(isIncome == true){
					isIncomeFlag = true;
					$('#allotCcy').css('display', 'block');
					$('#allotSecurityCode').css('display', 'none');	
				}else{
					isIncomeFlag = false;
					$('#allotCcy').css('display', 'none');
					$('#allotSecurityCode').css('display', 'block');
				}
			}else{
				$('#allottedInstrument').css('display', 'block');
				$('#allottedInstrumentText').css('display', 'none');
				$('#allottedInstrumentName').css('display', 'block');
				$('#allottedInstrumentNameText').css('display', 'none');
				$('#allotCcy').css('display', 'none');
				$('#allotSecurityCode').css('display', 'none');
			}
			};
	
	
		/**
		  * Method to populate others detail type
		  * @param Object - The keyList containg the key and the value.
		  */   
		  function xenos$Wizard$AdjustmentEntry$loadOthersEventPart() {
		 
			var isFlagForCash = '${commandForm.flagForCash}';
			
			$('#eventTypeNameDiv').css('display','block');

			$('#stockPartFractionalShareStr').css('display','none');
			$('#stockPartCashInLieuFlag').css('display','none');
									  
			if(isFlagForCash == "true") {
				$('#allottedQuantityStr').attr('readonly',true);
				$('#allottedAmountStr').attr('readonly',false);		    
			} else {
				$('#allottedAmountStr').attr('readonly',true);
				$('#allottedQuantityStr').attr('readonly',false);		    
			}	
		  };


		 /**
		  * Method to populate data for cash related entitlements for the amend screen.
		  * @param mapObj - The keyList containing the key and the value.
		  * @param detailType - Detail Type RIGHTS_DETAIL' or 'NCM_RIGHTS_DETAIL'
		  */ 
		  function xenos$Wizard$AdjustmentEntry$loadCashPart() {
			var initcol = [];
			var index = 0;
			var item = null;
			var corporateActionId = '${commandForm.corporateActionId}';
			
			$('#cashPartGiveUpIndicator').css('display','block');
			$('#cashPartInConsistencyFlag').css('display','none');

			 switch(corporateActionId) { 
				case "CASH_DIVIDEND":
					$('#cashPartSplAmountOrQtyStr').css('display','block');
				case "CAPITAL_REPAYMENT": 
					$('#cashPartSplAmountOrQtyStr').css('display','block');      
				case "OPTIONAL_STOCK_DIV":
					$('#cashPartSplAmountOrQtyStr').css('display','block');
				case "DIV_REINVESTMENT":
					$('#cashPartSplAmountOrQtyStr').css('display','block');
					$('#splQRow').css('display','block'); 
				break;
				case "COUPON_PAYMENT":
					$('#cashPartSplAmountOrQtyStr').css('display','none');
				case "REDEMPTION_BOND":
					$('#cashPartSplAmountOrQtyStr').css('display','none');
					$('#splQRow').css('display','none'); 
				break;          
			}       
		  };
  
		 /**
		  * Method to populate data for stock related entitlements for the amend screen.
		  * @param mapObj - The keyList containing the key and the value.
		  * @param detailType - Detail Type RIGHTS_DETAIL' or 'NCM_RIGHTS_DETAIL'* 
		  */ 
		  function xenos$Wizard$AdjustmentEntry$loadStockPart() {
		  
			var corporateActionId = '${commandForm.corporateActionId}';
			
			$('#stockPartFractionalShareStr').css('display','block');

			$('#stockPartCashInLieuFlag').css('display','block');
			
			$('#stockPartInConsistencyFlag').css('display','none');
			$('#stockPartInConsistencyFlagLbl').css('display','none');

			/** Populating cashInLieuLabel : for NAME_CHANGE its should be hidden
			 *  For rest - should be visible.
			 */ 
			if(corporateActionId == "NAME_CHANGE"){
				$('#stockPartCashInLieuFlag').css('display','none');
			} else {
				$('#stockPartCashInLieuFlag').css('display','block');
			}
			 ;
			var hiddenCashInLieuFlag = '${commandForm.hiddenCashInLieuFlag}';
			if(hiddenCashInLieuFlag == "Y") {
				$('#allottedQuantityStr').val('');
				$('#allottedQuantityStr').attr('readonly',true);
				$('#allottedAmountStr').attr('readonly',false);
			} else {
				$('#allottedQuantityStr').attr('readonly',false);
				$('#allottedAmountStr').attr('readonly',true);
				$('#allottedAmountStr').val('');
			}
				
			/** Populating splAmountOrQtyRow : for Stock Dividend its should be visible
			 *  For Stock Split - should be hidden.
			 */
			 switch(corporateActionId) {  
			   case "STOCK_DIVIDEND": 
					$('#stockPartSplAmtOrQtyStr').css('display','block');
			   case "BONUS_ISSUE":
					$('#stockPartSplAmtOrQtyStr').css('display','block');
			   case "STOCK_MERGER":
					$('#stockPartSplAmtOrQtyStr').css('display','block');
			   case "RIGHTS_ALLOCATION":
					$('#stockPartSplAmtOrQtyStr').css('display','block');
			   case "RIGHTS_EXPIRY":
					$('#stockPartSplAmtOrQtyStr').css('display','block');
			  break;
			  case "STOCK_SPLIT":
					$('#stockPartSplAmtOrQtyStr').css('display','none');
			  case "NAME_CHANGE":
					$('#stockPartSplAmtOrQtyStr').css('display','none');
			  case "SPIN_OFF":
					$('#stockPartSplAmtOrQtyStr').css('display','none');
			  case "REVERSE_STOCK_SPLIT": 
					$('#stockPartSplAmtOrQtyStr').css('display','none');
			  case "OTHERS":
					$('#stockPartSplAmtOrQtyStr').css('display','none');
			  break;            
			} 
		  };   
	
			function xenos$Wizard$AdjustmentEntry$populateAttributes(){
					 
					var context = $("#content");
					/**
					 * A common request handler to be used server communication.
					 */
					var xenos$Handler$RequestHandler = xenos$Handler$function({
							get: {
								contentType: 'json',
								requestType: xenos$Handler$default.requestType.asynchronous
							},	
							settings: {
								beforeSend: function(request) {
									request.setRequestHeader('Accept', 'application/json');
								},
								type: 'POST'
							}
						});
					
					var baseUrl = xenos.context.path + "/secure/cax/entitlement/adjustment";
					var taxFeeEntryResult = [],
						rowId = 0,		
						item = {},
						taxFeeEntryGrid = null,
						taxFeeEntryList = [];
					var taxFeeEntryGridConf = {
						editMode 					: 	'both',
						deleteCallback				:	xenos$Wizard$AdjustmentEntry$deleteTaxFeeEntryHandler,
						emptyColumnCheck			:	false,
						editCallback 				: 	xenos$Wizard$AdjustmentEntry$editTaxFeeEntryHandler,
						forceFitColumns				:	true
					};
					var taxFeeEntryColumns = [		
								{name:"<spring:message code="cax.entitlement.label.taxFeeId"
					htmlEscape="false" />", field:"taxFeeId", id:"taxFeeId", sortable:false},
								{name:"<spring:message code="cax.entitlement.label.taxRate"
					htmlEscape="false" />", field:"rate", id:"rate", cssClass:'xenos-grid-number', sortable:false},
								{name:"<spring:message code="cax.entitlement.label.rateType"
					htmlEscape="false" />", field:"rateType", id:"rateType", sortable:false},
								{name:"<spring:message code="cax.entitlement.label.amount"
					htmlEscape="false" />", field:"amount", id:"amount", cssClass:'xenos-grid-number', sortable:false}
							];
					<xenos:out escapeXml="false">
					<c:forEach items="${commandForm.detailTaxFeeList}" var="dl">
						item = {};
						rowId+=1;
						item.id 			= "xenos_" + rowId;
						item.taxFeeId 	= "<c:out value="${dl.taxFeeId}" />";
						item.rate 	= "<c:out value="${dl.chargeRate}" />";
						item.rateType 	= "<c:out value="${dl.rateType}" />";
						item.amount 	= "<c:out value="${dl.taxFeeAmountStr}" />";
						taxFeeEntryResult.push(item);
					</c:forEach>
					</xenos:out>
					taxFeeEntryGrid = $('#taxFeeEntryGrid').xenoseditablegrid(taxFeeEntryResult, taxFeeEntryColumns, taxFeeEntryGridConf);
					<c:if test="${not empty commandForm.detailTaxFeeList}">
						$('#taxFeeEntryGrid').css("display","block");
					</c:if>
					
					
					/**
					 * New TaxFee add handler.
					 */
					function xenos$Wizard$AdjustmentEntry$addTaxFeeEntryHandler(e){
							var valid = xenos$Wizard$AdjustmentEntry$validateTaxFeeAttributes();
							if(valid){
								var requestUrl = baseUrl + "/entry/addDetailTaxFee.json?commandFormId=" + $('[name=commandFormId]').val();
								xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
																		settings: {data : xenos$Wizard$AdjustmentEntry$populateTaxFeeEntryRequestParam()},
																		onJsonContent :  function(e, options, $target, content) {
																			
																			<!--console.log(content)-->
																			if(content.success == true){
																				$('#taxFeeEntryGrid').css("display","block");
																				xenos$Wizard$AdjustmentEntry$upsertTaxFeeEntry(content.value[0]);
																				xenos.ns.entitlement.adjustmentEntry.onChangeRateType();
																			} else {
																				console.log(content.value);
																				xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																			}
																		}
																	 }
														);
									}
						}
						/**
						* Validate TaxFee Entry attributes.
						*/
						function xenos$Wizard$AdjustmentEntry$validateTaxFeeAttributes(){
								var validationMessages = [];
								var taxFeeId = $.trim($('#taxFeeId').val());
								var rate = $.trim($('#rate').val());
								var rateType = $.trim($('#rateType').val());
								var amount = $.trim($('#amount').val());
								if(VALIDATOR.isNullValue(taxFeeId)){
									validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxFeeId);
								}
								if(VALIDATOR.isNullValue(rateType)){
									if(VALIDATOR.isNullValue(amount)){
										validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxFeeAmount);
									}
									if(VALIDATOR.isNullValue(rate)){
										validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxRate);
									}
									validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxRateType);
								}
								else{
									switch(rateType) {

										case "PERCENT":
											if(VALIDATOR.isNullValue(rate)){
												validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxRate);
											}else {
												return formatRate($('#rate'),8,10,null,$('#rate').parent().parent().find('label').text());
											}  				
											break;
										case "AMOUNT" :
											if(VALIDATOR.isNullValue(amount)){
												validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxFeeAmount);
											}else {
												return formatTaxFeeAmount($('#amount'),15,3,null,$('#amount').parent().parent().find('label').text());
											}
											break;
										case "BP":
											if(VALIDATOR.isNullValue(rate)){
												validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxRate);
											}else {
												return formatRate($('#rate'),8,10,null,$('#rate').parent().parent().find('label').text());
											} 	
										break;
										case "CPS" :
											if(VALIDATOR.isNullValue(rate)){
												validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxRate);
											}else {
												return formatRate($('#rate'),8,10,null,$('#rate').parent().parent().find('label').text());
											}
											
											if(VALIDATOR.isNullValue(amount)){
												validationMessages.push(xenos$CAX$i18n.entitlementAdjustmentEntry.enter_taxFeeAmount);
											}else {
												return formatTaxFeeAmount($('#amount'),15,3,null,$('#amount').parent().parent().find('label').text());
											}
										break;
									 }
								}
								if(validationMessages.length > 0) {
									xenos.utils.displayGrowlMessage(xenos.notice.type.error, validationMessages);
									return false;
								}
								return true;
						}	

												
						/**
						 * Populate TaxFee request parameters.
						 */
						function xenos$Wizard$AdjustmentEntry$populateTaxFeeEntryRequestParam(){
							
								var reqObj = {
										  "taxFeeId"				:	$.trim($('#taxFeeId').val()),
										  "rate"				:	$.trim($('#rate').val()),
										  "rateType"				:	$.trim($('#rateType').val()),
										  "amount"		:	$.trim($('#amount').val())
										};
								return reqObj;
						}
						/**
						* Populate TaxFee form.
						*/
						function xenos$Wizard$AdjustmentEntry$populateTaxFeeEntryForm(result){
								if(result){
									context.find('#taxFeeId').val(result.taxFeeId);
									context.find('#rate').val(result.chargeRate);
									context.find('#rateType').val(result.rateType);
									context.find('#amount').val(result.taxFeeAmountStr);
								}
						}
						/**
						 * Insert/Update TaxFee
						 */
						function xenos$Wizard$AdjustmentEntry$upsertTaxFeeEntry(data){
								
								var result = data.detailTaxFeeList;
								if(result){
									taxFeeEntryGrid.clearData();
									for(var i in result){
										item = {};
										rowId+=1;
										item.id 				= 	"xenos_" + rowId;
										item.taxFeeId 		= $.trim(result[i].taxFeeId);
										item.rate 		= $.trim(result[i].chargeRate);
										item.rateType 		= $.trim(result[i].rateType);
										item.amount 		= $.trim(result[i].taxFeeAmountStr);
										
										taxFeeEntryGrid.addOrUpdateRow(item,{});
									}
									xenos$Wizard$AdjustmentEntry$populateTaxFeeEntryForm(data);
								}
							xenos.utils.clearGrowlMessage();
						}
					   	
						/**
						 * TaxFee Delete handler
						 */
						function xenos$Wizard$AdjustmentEntry$deleteTaxFeeEntryHandler(rowIndex, dataContext){
							var requestUrl = baseUrl + "/entry/deleteDetailTaxFee/"+ rowIndex + ".json?commandFormId=" + $('[name=commandFormId]').val();
							xenos$Handler$RequestHandler.generic(undefined, {	requestUri: requestUrl,
																	onJsonContent :  function(e, options, $target, content) {
																		if(content.success == true){
																			xenos$Wizard$AdjustmentEntry$upsertTaxFeeEntry(content.value[0]);
																			$('.gridAddBtn').show();
																		} else {
																			xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																		}
																	}
																 }
													);
					 }
						
					/**
					 * TaxFee Edit handler
					 */
					function xenos$Wizard$AdjustmentEntry$editTaxFeeEntryHandler(rowIndex, dataContext){
							
							var requestUrl = baseUrl + "/entry/editDetailTaxFee.json?commandFormId=" + $('[name=commandFormId]').val();
							xenos$Handler$RequestHandler.generic(undefined, {	requestUri: requestUrl,
																	settings: {data : {"editIndexTaxFeeNo" : rowIndex}},
																	onJsonContent :  function(e, options, $target, content) {
																		console.log(content);
																		if(content.success == true){
																			xenos$Wizard$AdjustmentEntry$populateTaxFeeFormForEdit(content.value[0]);
																			xenos.ns.entitlement.adjustmentEntry.onChangeRateType();
																			$('.gridEditBtn').show(); 
																			$('.gridAddBtn').hide();
																		} else {
																			xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																		}
																		return true;
																	}
																 }
													);
						}

						/**
						* Populate TaxFee form.
						*/
						function xenos$Wizard$AdjustmentEntry$populateTaxFeeFormForEdit(result){
								if(result){
									console.log(result);
									context.find('#taxFeeId').val(result.taxFeeId);
									context.find('#rate').val(result.rate);
									context.find('#rateType').val(result.rateType);
									context.find('#amount').val(result.amount);
								}
						}
						
						/**
						 * TaxFee update handler.
						 */
						function xenos$Wizard$AdjustmentEntry$updateTaxFeeEntryHandler(e){				
								var valid = xenos$Wizard$AdjustmentEntry$validateTaxFeeAttributes();
								if(valid){
									var requestUrl = baseUrl + "/entry/updateDetailTaxFee.json?commandFormId=" + $('[name=commandFormId]').val();
									
									xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
																			settings: {data : xenos$Wizard$AdjustmentEntry$populateTaxFeeEntryRequestParam()},
																			onJsonContent :  function(e, options, $target, content) {
																				if(content.success == true){
																					xenos$Wizard$AdjustmentEntry$upsertTaxFeeEntry(content.value[0]);
																					xenos.ns.entitlement.adjustmentEntry.onChangeRateType();
																					$('.gridEditBtn').hide(); 
																					$('.gridAddBtn').show(); 
																				} else {
																					xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																				}
																			}
																		 }
															);
								}
						 }
						/**
						 * TaxFee cancel handler.
						 */
						function xenos$Wizard$AdjustmentEntry$cancelTaxFeeEntryHandler(e){
							var requestUrl = baseUrl + "/entry/cancelDetailTaxFee.json?commandFormId=" + $('[name=commandFormId]').val();
								console.log(requestUrl);
							xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
																			onJsonContent :  function(e, options, $target, content) {
																				if(content.success == true){
																					xenos$Wizard$AdjustmentEntry$upsertTaxFeeEntry(content.value[0]);
																					xenos.ns.entitlement.adjustmentEntry.onChangeRateType();
																					$('.gridEditBtn').hide(); 
																					$('.gridAddBtn').show();
																				} else {
																					xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																				}
																			}
																		 }
															);
						  }
					 
					 $('#addTaxFeeEntryBtn').unbind('click');
					$('#addTaxFeeEntryBtn').bind('click',xenos$Wizard$AdjustmentEntry$addTaxFeeEntryHandler);
					
					
					
					$('#calculateTaxFeeAmtBtn').unbind('click');
					$('#calculateTaxFeeAmtBtn').bind('click',xenos$Wizard$AdjustmentEntry$taxAmountCalculateHandler);
					
					$('#updateTaxFeeEntryBtn').unbind('click');
					 $('#updateTaxFeeEntryBtn').bind('click',xenos$Wizard$AdjustmentEntry$updateTaxFeeEntryHandler);
					 $('#editCallback').unbind('click');
					 $('#editCallback').bind('click',xenos$Wizard$AdjustmentEntry$editTaxFeeEntryHandler);
					 
					 $('#cancelTaxFeeEntryBtn').unbind('click');
					 $('#cancelTaxFeeEntryBtn').bind('click',xenos$Wizard$AdjustmentEntry$cancelTaxFeeEntryHandler);
					 
					 
				};

				/**
				 * A common request handler to be used server communication.
				 */
				var xenos$Handler$RequestHandler = xenos$Handler$function({
						get: {
							contentType: 'json',
							requestType: xenos$Handler$default.requestType.asynchronous
						},	
						settings: {
							beforeSend: function(request) {
								request.setRequestHeader('Accept', 'application/json');
							},
							type: 'POST'
						}
					});
				
				/**
				  * Method to call the getCalculatedAmount method to calculate the allotted attributes for the entitlement.
				  * It fills the request object with the index of detailTaxFeeList to be deleted (i.e the rowNUm)  before sending the request.
				  */
				  function xenos$Wizard$AdjustmentEntry$calculateHandler(e) {
					var securityBalance = $('#securityBalanceStr').val();
					var rowIndex = -1;
					if(VALIDATOR.isNullValue(securityBalance)) {
						xenos.utils.displayGrowlMessage(xenos.notice.type.error, xenos$CAX$i18n.entitlementAdjustmentEntry.security_balance_empty);
					}else{
						var baseUrl = xenos.context.path + "/secure/cax/entitlement/adjustment";
						var requestUrl = baseUrl + "/entry/getCalculatedAmount/" + rowIndex + ".json?commandFormId=" + $('[name=commandFormId]').val();
								
								xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
																		settings: {
																			data: $("#commandForm").serialize()
																		},
																		onJsonContent :  function(e, options, $target, content) {
																			if(content.success == true){
																				console.log(content);
																				xenos$Wizard$AdjustmentEntry$updateCalculatedFields(content.value[0]);
																			} else {
																				console.log(content.value);
																				xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																			}
																		}
																	 }
								);
						}
					};
					
					/**
					* Function to update allotted amount
					*/
					function xenos$Wizard$AdjustmentEntry$updateCalculatedFields(data){
						if(data){
							console.log(data.allottedAmountStr);
							console.log(data.splAmountOrQtyStr);
							$('#allottedAmountStr').val(data.allottedAmountStr);
							$('#splAmountOrQtyStr').val(data.splAmountOrQtyStr);
							$('#cashInLieuFlagExp').val(data.cashInLieuFlagExp);
							$('#allottedQuantityStr').val(data.allottedQuantityStr);
							$('#fractionalShareStr').val(data.fractionalShareStr);
							$('#securityBalanceStr').focus();
						}
					}
					
					
				
				/**
				  * Method to call the getSecurityBalance method to calculate the security balance for the account.
				  */
				  function xenos$Wizard$AdjustmentEntry$getSecurityBalanceHandler(e) {
					var fundAccount = $('#tgtaccountNo').val();
					var rowIndex = -1;
				  if(fundAccount == '') {
				  	xenos.utils.displayGrowlMessage(xenos.notice.type.error, xenos$CAX$i18n.entitlementAdjustmentEntry.accountno_blank);
				  }
				  else {
					var baseUrl = xenos.context.path + "/secure/cax/entitlement/adjustment";
						var requestUrl = baseUrl + "/entry/getSecurityBalanceForAccountNo/" + rowIndex + ".json?commandFormId=" + $('[name=commandFormId]').val();
								
								xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
																		settings: {
																			data: $("#commandForm").serialize()
																		},
																		onJsonContent :  function(e, options, $target, content) {
																			if(content.success == true){
																				console.log(content);
																				xenos$Wizard$AdjustmentEntry$updateSecurityBalanceField(content.value[0]);
																			} else {
																				xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																			}
																		}
																	 }
								);
						}
					};
					
					/**
					* Function to update security balance
					*/
					function xenos$Wizard$AdjustmentEntry$updateSecurityBalanceField(data){
						if(data){
							$('#securityBalanceStr').val(data.securityBalanceStr);
							$('#tgtaccountNo').focus();
						}
					}
					
				  /**
				  * Method to call the getCalculatedTaxFeeAmount method to calculate the allotted attributes for the entitlement.
				  * It fills the request object with the index of detailTaxFeeList to be deleted (i.e the rowNUm)  before sending the request.
				  */
				  function xenos$Wizard$AdjustmentEntry$taxAmountCalculateHandler(e) {
					
						var baseUrl = xenos.context.path + "/secure/cax/entitlement/adjustment";
						var requestUrl = baseUrl + "/entry/getCalculatedTaxFeeAmount.json?commandFormId=" + $('[name=commandFormId]').val();
								
								xenos$Handler$RequestHandler.generic(e, {	requestUri: requestUrl,
																		settings: {
																			data: $("#commandForm").serialize()
																		},
																		onJsonContent :  function(e, options, $target, content) {
																			if(content.success == true){
																				console.log(content);
																				xenos$Wizard$AdjustmentEntry$updateCalculatedTaxFeeFields(content.value[0]);
																			} else {
																				console.log(content.value);
																				xenos.utils.displayGrowlMessage(xenos.notice.type.error, content.value[0]);
																			}
																		}
																	 }
								);
						
					};
					
					/**
					* Function to update calculated tax fee amount
					*/
					function xenos$Wizard$AdjustmentEntry$updateCalculatedTaxFeeFields(data){
						if(data){
							$('#amount').val(data.amount);
						}
					}
	  
		
		</jsp:body>
    </jsp:element>
		<div id="generalEntry">
			<div class="entryBlkArea ">
				<div class="formItemBlock topitems dottedBg">
					<!-- Rights Condition Reference No.-->
					<div class="formItem">
						<form:label path="commandForm.rcReferenceNo">
							<spring:message code="cax.entitlement.label.eventRefNo"
								htmlEscape="false" />
						</form:label>
						<form:label path="commandForm.rcReferenceNo">${commandForm.rcReferenceNo}</form:label>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Fund Account No. -->
					<div class="formItem">
						<form:label path="commandForm.accountNo" class="required">
							<spring:message code="cax.entitlement.label.fundAccount"
								htmlEscape="false" />
						</form:label>
						<util:xenospopup id="accountNo" path="commandForm.accountNo"
							showResolvedName="true" popType="invAccount"
							invActTypeContext="T|B" invCPTypeContext="INTERNAL"
							actStatusContext="OPEN" event="change focusout"
							endpoint="secure/ref/nameresolver/fund" />
						<!-- Calculate Button -->
						<div class="btnWrapStyle calAmtBtnBtn calcBtn"
							style="margin-top: 0;">
							<span class="calculateAmt"><input class="calcBtnIco"
								id="getSecurityBalanceBtn" type="button"
								title="Get Security Balance For AccountNo" /></span>
						</div>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Event Type -->
					<div class="formItem">
						<form:label path="commandForm.subEventTypeDescription">
							<spring:message code="cax.entitlement.label.eventType"
								htmlEscape="false" />
						</form:label>
						<form:label path="commandForm.subEventTypeDescription">${commandForm.subEventTypeDescription}</form:label>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Event Status -->
					<div class="formItem">
						<form:label path="commandForm.conditionStatus">
							<spring:message code="cax.entitlement.label.eventStatus"
								htmlEscape="false" />
						</form:label>
						<form:label path="commandForm.conditionStatus">${commandForm.conditionStatus}</form:label>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Instrument Code -->
					<div class="formItem">
						<form:label path="commandForm.instrumentCode">
							<spring:message code="cax.entitlement.label.securityCode"
								htmlEscape="false" />
						</form:label>
						<form:label path="commandForm.instrumentCode">${commandForm.instrumentCode}</form:label>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Instrument Name -->
					<div class="formItem">
						<form:label path="commandForm.instrumentName">
							<spring:message code="cax.entitlement.label.securityName"
								htmlEscape="false" />
						</form:label>
						<form:label path="commandForm.instrumentName">${commandForm.instrumentName}</form:label>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Allotted Instrument Code -->
					<div class="formItem">
						<form:label path="commandForm.allottedInstrument">
							<spring:message code="cax.entitlement.label.allottedSecurityCode"
								htmlEscape="false" />
						</form:label>
						<form:label id="allottedInstrument" path="commandForm.allottedInstrument">${commandForm.allottedInstrument}</form:label>
						<span><form:input value=""
								path="commandForm.allottedInstrument" class="textBox"
								id="allottedInstrumentText" style="display: none" onblur="xenos$Wizard$AdjustmentEntry$onChangeSecurityCode()"/></span>
						<div class="popupBtn" id="allotSecurityCode" style="display: none">
							<input type="button" class="popupBtnIco" tgt="allottedInstrumentText" hiddenTgt="allottedInstrumentNameText:officialName"
								popType="security" value="" />
						</div>
						<div class="popupBtn" id="allotCcy" style="display: none">
							<input type="button" class="popupBtnIco" tgt="allottedInstrumentText" hiddenTgt="allottedInstrumentNameText:label"
								popType="currency" value="" />
						</div>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Allotted Instrument Name -->
					<div class="formItem">
						<form:label path="commandForm.allottedInstrumentName">
							<spring:message code="cax.entitlement.label.allottedSecurityName"
								htmlEscape="false" />
						</form:label>
						<form:label id="allottedInstrumentName" path="commandForm.allottedInstrumentName">${commandForm.allottedInstrumentName}</form:label>
						<span><form:input value=""
								path="commandForm.allottedInstrumentName" class="textBox"
								id="allottedInstrumentNameText" style="display: none" readonly="true" /></span>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Security Balance -->
					<div class="formItem twoCols">
						<form:label path="commandForm.securityBalanceStr" class="required">
							<spring:message code="cax.entitlement.label.securityBalance"
								htmlEscape="false" />
						</form:label>
						<span><form:input value=""
								path="commandForm.securityBalanceStr" class="txtNormal"
								id="securityBalanceStr" onchange="return formatSignedQuantity($('#securityBalanceStr'),15,3,null,$('#securityBalanceStr').parent().parent().find('label').text())"/></span>
						<!-- Calculate Button -->
						<div class="btnWrapStyle calAmtBtnBtn calcBtn"
							style="margin-top: 0;">
							<span class="calculateAmt"><input class="calcBtnIco"
								id="calculateAmtBtn" type="button"
								title="Calculate Alloted Amount" /></span>
						</div>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Instrument Code -->
					<div class="formItem" id="eventTypeNameDiveventTypeNameDiv"
						style="display: none">
						<form:label path="commandForm.eventTypeName" class="required">
							<spring:message code="cax.rightsdetail.label.eventtypename"
								htmlEscape="false" />
						</form:label>
						<span><form:input value="" path="commandForm.eventTypeName"
								class="textBox" id="eventTypeName" /></span>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<!-- Payment Date -->
					<div class="formItem twoCols">
						<form:label path="commandForm.paymentDate" class="required">
							<spring:message code="cax.rightsdetail.label.paymentdate"
								htmlEscape="false" />
						</form:label>
						<span><form:input value="" path="commandForm.paymentDate"
								class="dateinput" id="paymentDate" onchange="if(!checkDate(this)){xenos.postNotice(xenos.notice.type.error, 
								xenos.utils.evaluateMessage(xenos$CAX$i18n.rightsdetailquery.validation.dateformat_invalid, [this.value]))}" /></span>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>


					<!-- Underline Security BV -->
					<div class="formItem twoCols">
						<form:label path="commandForm.underlineSecurityBV">
							<spring:message
								code="cax.entitlement.adjustment.entry.undersecbookval"
								htmlEscape="false" />
						</form:label>
						<span><form:input value=""
								path="commandForm.underlineSecurityBV" class="txtNormal"
								id="underlineSecurityBV" onchange="return formatSignedQuantity($('#underlineSecurityBV'),15,3,null,$('#underlineSecurityBV').parent().parent().find('label').text())"/></span>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>

					<div id="blockForEventType" style="display:none;"><spring:message text="" htmlEscape="false"/></div>

					<div class="clear">
						<spring:message text="" htmlEscape="false" />
					</div>						
				</div>
			</div>
			<!-- TaxFee Block -->
			<div id="tax" style="display: none">
				<!-- TaxFee Block -->
				<div class="moreHandle">
					<h1 class="msgHead">
						<spring:message code="cax.entitlement.label.optionaltaxfee"
							htmlEscape="false" />
						<div class="handleBlock">
							<span class="handler collapse" id="caxMoreSection"><spring:message
									text="" htmlEscape="false" /></span>
						</div>
					</h1>
				</div>

				<div class="entryBlkArea">
					<h1>
						<spring:message code="cax.entitlement.label.taxDetail"
							htmlEscape="false" />
					</h1>
					<div class="formItemBlock dottedBg">
						<!-- TaxFee Id -->
						<div class="formItem">
							<form:label path="commandForm.taxFeeId" class="required">
								<spring:message code="cax.entitlement.label.taxFeeId"
									htmlEscape="false" />
							</form:label>
							<span> <xenos:select id="taxFeeId"
									path="commandForm.taxFeeId" class="dropdowninput">
									<form:option value="" />
									<form:options items="${commandForm.taxFeeIdDropdownList}" />
								</xenos:select>
							</span>
							<div class="clear">
								<spring:message text="" htmlEscape="false" />
							</div>
						</div>

						<!-- Tax Rate -->
						<div class="formItem" id="taxRate">
							<form:label path="commandForm.rate" class="required">
								<spring:message code="cax.entitlement.label.taxRate"
									htmlEscape="false" />
							</form:label>
							<span><form:input value="" path="commandForm.rate"
									class="txtNormal" id="rate"
									onchange="return formatTaxFeeAmount($('#rate'),8,10,null,$('#rate').parent().parent().find('label').text());" /></span>
							<div class="clear">
								<spring:message text="" htmlEscape="false" />
							</div>
						</div>

						<!-- Rate Type -->
						<div class="formItem">
							<form:label path="commandForm.rateType" class="required">
								<spring:message code="cax.entitlement.label.rateType"
									htmlEscape="false" />
							</form:label>
							<span> <xenos:select id="rateType"
									path="commandForm.rateType" class="dropdowninput"
									onchange="xenos.ns.entitlement.adjustmentEntry.onChangeRateType()">
									<form:option value="" />
									<form:options items="${commandForm.rateTypeDropdownList}"
										itemLabel="label" itemValue="value" />
								</xenos:select>
							</span>
							<div class="clear">
								<spring:message text="" htmlEscape="false" />
							</div>
						</div>

						<!-- TaxFee Amount -->
						<div class="formItem">
							<form:label path="commandForm.amount" class="required"
								id="taxAmountLbl">
								<spring:message code="cax.entitlement.label.amount"
									htmlEscape="false" />
							</form:label>
							<span><form:input id="amount" value=""
									path="commandForm.amount" class="txtNormal"
									onchange="return formatTaxFeeAmount($('#amount'),13,5,null,$('#amount').parent().parent().find('label').text());" /></span>

							<!-- Calculate Button -->
							<div class="btnWrapStyle calAmtBtnBtn calcBtn"
								style="margin-top: 0;" id="calTaxAmt">
								<span class="calculateAmt"><input class="calcBtnIco"
									id="calculateTaxFeeAmtBtn" type="button"
									title="Calculate Tax Fee Amount" /></span>
							</div>

							<div class="clear">
								<spring:message text="" htmlEscape="false" />
							</div>
						</div>
						<div class="clear">
							<spring:message text="" htmlEscape="false" />
						</div>
						<!-- Add Button -->
						<div id="formActionArea" class="gridBtnMargin trdEntryBtnBg">
							<div class="right">
								<div class="btnWrapStyle submitBtn gridAddBtn">
									<span class="addTaxFeeEntry" style="display: block"><input
										id="addTaxFeeEntryBtn" type="button" value="${formadd_label}"
										class="inputBtnStyle" /></span>
								</div>
								<span class="gridEditBtn" style="display: none">
									<div class="btnWrapStyle submitBtn">
										<input id="updateTaxFeeEntryBtn" type="button"
											value="${formsave_label}" class="inputBtnStyle" />
									</div>
									<div class="btnWrapStyle resetBtn">
										<input id="cancelTaxFeeEntryBtn" type="button"
											value="${formcancel_label}" class="inputBtnStyle" />
									</div>
								</span>
							</div>
							<div class="clear">
								<spring:message text="" htmlEscape="false" />
							</div>
						</div>
					</div>
					<div class="entryGrid">
						<div id="taxFeeEntryGrid" class="xenos-grid"
							style="width: 100%; height: 100px; display: none;">
							<spring:message text="" htmlEscape="false" />
						</div>
					</div>
				</div>
				<div class="lineHide">
					<spring:message text="" htmlEscape="false" />
				</div>
				</div>
				<!--end of taxWindow-->
			</div>
			<!-- end of general entry-->
			<!--end of div main-->

			<spring:eval expression="T(java.lang.System).currentTimeMillis()"
				var="myId" />
			<input type="hidden" id="${myId}" />
			<jsp:element name="script">
		<jsp:attribute name="type">text/javascript</jsp:attribute>
		<jsp:body>
			
		</jsp:body>
	</jsp:element>
		</div>
</jsp:root>
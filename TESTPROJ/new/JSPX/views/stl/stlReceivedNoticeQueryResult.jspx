<!--$Id$-->
<!--$Author$-->
<!--$Date$-->
<jsp:root version="2.0"
    xmlns:c="http://java.sun.com/jsp/jstl/core" 
	xmlns:fn="http://java.sun.com/jsp/jstl/functions" 
	xmlns:spring="http://www.springframework.org/tags" 
	xmlns:util="urn:jsptagdir:/WEB-INF/tags/util"
	xmlns:xenos="http://www.nri.co.jp/xenos" 
	xmlns:jsp="http://java.sun.com/JSP/Page">
	
<div>
    
	<jsp:directive.page contentType="text/html;charset=UTF-8" /> 
	<jsp:output	omit-xml-declaration="yes" />
	
	<jsp:element name="script">
        <jsp:attribute name="type">text/javascript</jsp:attribute>
        <jsp:attribute name="src"><c:url value="/scripts/xenos.formatters.js"/></jsp:attribute>
        <jsp:body></jsp:body>
    </jsp:element>
    
    <jsp:element name="script">
        <jsp:attribute name="type">text/javascript</jsp:attribute>
        <jsp:body>	
        	var grid_result_data_1 = [];
        	
        	var grid_result_columns_1 = [
                {name:"<spring:message code="stl.stlqry.label.sndrrefnetgrp" htmlEscape="false" />",					field:"senderReferenceNo",		id:"senderReferenceNo", 		width:350,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.ourbank" htmlEscape="false" />", 				field:"secOurBank",				id:"secOurBank", 				width:150,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.cpbank" htmlEscape="false" />", 				field:"secCpBank",				id:"secCpBank", 				width:150,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.cashourbank" htmlEscape="false" />", 			field:"cashOurBank",			id:"cashOurBank", 				width:150, 	sortable:true},
				{name:"<spring:message code="stl.receivenoticeqry.label.cashcpbank" htmlEscape="false" />", 			field:"cashCpBank",				id:"cashCpBank", 				width:150,	sortable:true},
				{name:"<spring:message code="stl.stlqry.label.securitycode" htmlEscape="false" />", 					field:"instrumentCode",  		id:"instrumentCode", 			width:150,	sortable:true},
				{name:"<spring:message code="stl.label.securityname" htmlEscape="false" />", 					        field:"securityName",  		    id:"securityName", 			    width:150,	sortable:true},
				{name:"<spring:message code="stl.stlqry.label.ccy" htmlEscape="false" />", 								field:"ccyCode",  				id:"ccyCode", 					width:70,	sortable:true}, 
                {name:"<spring:message code="stl.receivenoticeqry.label.outstandingamount" htmlEscape="false" />", 		field:"outstandingAmountStr",	id:"outstandingAmountStr", 		width:150,	sortable:true, cssClass:'xenos-grid-number',},
                {name:"<spring:message code="stl.receivenoticeqry.label.outstandingquantity" htmlEscape="false" />", 	field:"outstandingQuantityStr",	id:"outstandingQuantityStr",	width:150,	sortable:true, cssClass:'xenos-grid-number',},
                {name:"<spring:message code="stl.receivenoticeqry.label.stlstatus" htmlEscape="false" />", 				field:"settlementStatus",		id:"settlementStatus", 			width:250,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.valudedate" htmlEscape="false" />", 			field:"valueDateStr",			id:"valueDateStr", 				width:95,	sortable:true},
                {name:"<spring:message code="stl.stlqry.label.deliverreceive" htmlEscape="false" />", 					field:"deliverReceiveDisplay",	id:"deliverReceiveDisplay", 	width:150,	sortable:true},
                {name:"",                       					                                                    field:"settlementInfoPk",	    id:"settlementInfoPk", 	        width:200,	sortable:true,  formatter:Slick.Formatters.ReceiveNoticeOutgoingDetailViewFormatter}
            ];
            
			var grid_result_settings_1 = {
				gridId : 1, // Unique id of this grid
				enableToolbar:true,
				enableHeader:true,
				consolidateActionFlag:false,				
				pagingInfo:{
					isNext : <c:out value="${isNext[0]}" />,
					url: 'secure/stl/receivednotice/query/count.json'
				},
				buttons:{
					print:true,	
					xls:true,	
					pdf:true,
					xlsPref:true,	
					columnPicker:true,	
					save:true	
				},
				urls:{
					nextPage : '/secure/stl/receivednotice/query/result.json?fetch=next',
					prevPage : '/secure/stl/receivednotice/query/result.json?fetch=previous',
					pdfReport: '/secure/stl/receivednotice/query/report.json?outputType=pdf',
					xlsReport: '/secure/stl/receivednotice/query/report.json?outputType=xls'
				},
				headerInfo:{
					headerText: '<h2><spring:message code="stl.stlqry.label.recvnoticesummaryheader" htmlEscape="false" /></h2>'
				},
				defaultInvisibleColumns: ["securityName", "valueDateStr"]
			};
			
			var grid_result_data_2 = [];
        	
    		var grid_result_columns_2 = [
                {name:"<spring:message code="stl.stlqry.label.sndrrefnetgrp" htmlEscape="false" />",					field:"senderReferenceNo",		id:"senderReferenceNo", 		width:150,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.ourbank" htmlEscape="false" />", 				field:"secOurBank",				id:"secOurBank", 				width:77,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.cpbank" htmlEscape="false" />", 				field:"secCpBank",				id:"secCpBank", 				width:77,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.cashourbank" htmlEscape="false" />", 			field:"cashOurBank",			id:"cashOurBank", 				width:110, 	sortable:true},
				{name:"<spring:message code="stl.receivenoticeqry.label.cashcpbank" htmlEscape="false" />", 			field:"cashCpBank",				id:"cashCpBank", 				width:110,	sortable:true},
                {name:"<spring:message code="stl.stlqry.label.securitycode" htmlEscape="false" />", 					field:"instrumentCode",  		id:"instrumentCode", 			width:80,	sortable:true},
                {name:"<spring:message code="stl.label.securityname" htmlEscape="false" />", 					        field:"securityName",  		    id:"securityName", 			    width:80,	sortable:true},
				{name:"<spring:message code="stl.stlqry.label.ccy" htmlEscape="false" />", 								field:"ccyCode",  				id:"ccyCode", 					width:150,	sortable:true}, 
                {name:"<spring:message code="stl.receivenoticeqry.label.amount" htmlEscape="false" />", 		        field:"amountStr",	            id:"amountStr", 		        width:93,	sortable:true, cssClass:'xenos-grid-number',},
                {name:"<spring:message code="stl.receivenoticeqry.label.quantity" htmlEscape="false" />", 	            field:"quantityStr",	        id:"quantityStr",	            width:77,	sortable:true, cssClass:'xenos-grid-number',},
                {name:"<spring:message code="stl.receivenoticeqry.label.msgstatus" htmlEscape="false" />", 				field:"messageStatus",		    id:"messageStatus", 			width:250,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.valudedate" htmlEscape="false" />", 			field:"valueDateStr",			id:"valueDateStr", 				width:120,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.stldate" htmlEscape="false" />", 			    field:"settleDateStr",			id:"settleDateStr", 			width:120,	sortable:true},
                {name:"<spring:message code="stl.stlqry.label.deliverreceive" htmlEscape="false" />", 					field:"deliverReceiveDisplay",	id:"deliverReceiveDisplay", 	width:150,	sortable:true},
                {name:"<spring:message code="stl.receivenoticeqry.label.reasoncode" htmlEscape="false" />", 			field:"reasonCode",	            id:"reasonCode", 	            width:150,	sortable:true},
                {name:"<spring:message code="stl.stlqry.label.rcvdCompNoticeRefNo" htmlEscape="false" />", 			    field:"rcvdCompNoticeRefNo",	id:"rcvdCompNoticeRefNo", 	    width:150,	sortable:true},
                {name:"",                       					                                                    field:"receivedCompNoticeInfoPk",	    id:"receivedCompNoticeInfoPk", 	        width:200,	sortable:true,  formatter:Slick.Formatters.ReceiveNoticeIncomingDetailViewFormatter}
            ];
            
			var grid_result_settings_2 = {
				gridId: 2, // Unique id of this grid
				enableToolbar:true,
				enableHeader:true,
				consolidateActionFlag:false,
				pagingInfo:{
					isNext : <c:out value="${isNext[1]}" />,
					url: 'secure/stl/receivednotice/query/count.json'
				},
				buttons:{
					print:true,	
					xls:true,	
					pdf:true,
					xlsPref:true,	
					columnPicker:true,	
					save:true	
				},
				urls:{
					nextPage : '/secure/stl/receivednotice/query/result.json?fetch=next',
					prevPage : '/secure/stl/receivednotice/query/result.json?fetch=previous',
					pdfReport: '/secure/stl/receivednotice/query/report.json?outputType=pdf',
					xlsReport: '/secure/stl/receivednotice/query/report.json?outputType=xls'
				},
				headerInfo:{
					headerText: '<h1><spring:message code="stl.receivenoticeqry.label.oustandingquery" htmlEscape="false" /></h1>'
				},
                events:{
                    onDataUpdate: function(data,continueUpdate){
                        for(i in data.value){
                            if(data.value[i].extSecurityId != null){
                                data.value[i].instrumentCode = data.value[i].extSecurityDisplayStr;
                            }else{
                                data.value[i].instrumentCode = data.value[i].instrumentCode;
                            }
                        }
                        continueUpdate(data);
                    }
                },
                defaultInvisibleColumns: ["securityName", "valueDateStr", "deliverReceiveDisplay", "reasonCode"]
			};
            
            
            var row_id_1 = 0;            			
            var rec_1 = {};
            
            var row_id_2 = 0;            			
            var rec_2 = {};
            <xenos:out escapeXml="false">
            <c:forEach items="${commandForm.resultViewList}" var="value" varStatus="loop">            	
            	<c:if test="${loop.index == 0}">         	
		            <c:forEach items="${value}" var="dl">
		                rec_1 = {};
		                row_id_1+=1;
		                rec_1.id = "xenos_" + row_id_1;
		                rec_1.senderReferenceNo     	= "<c:out value="${dl.senderReferenceNo}" />";
		                rec_1.secOurBank            	= "<c:out value="${dl.secOurBank}" />";
		                rec_1.secCpBank             	= "<c:out value="${dl.secCpBank}" />";
		                rec_1.cashOurBank           	= "<c:out value="${dl.cashOurBank}" />";
		                rec_1.cashCpBank            	= "<c:out value="${dl.cashCpBank}" />";
		                rec_1.instrumentCode        	= "<c:out value="${dl.instrumentCode}" />";
		                rec_1.instrumentPk         		= "<c:out value="${dl.instrumentPk}" />";						
		                rec_1.ccyCode                   = "<c:out value="${dl.ccyCode}" />";
		                rec_1.outstandingAmountStr      = "<c:out value="${dl.outstandingAmountStr}" />";
		                rec_1.outstandingQuantityStr    = "<c:out value="${dl.outstandingQuantityStr}" />";
		                rec_1.settlementStatus          = "<c:out value="${dl.settlementStatus}" />";
		                rec_1.valueDateStr              = "<c:out value="${dl.valueDateStr}" />";
		                rec_1.deliverReceiveDisplay     = "<c:out value="${dl.deliverReceiveDisplay}" />";
		                rec_1.settlementInfoPk          = "<c:out value="${dl.settlementInfoPk}" />";
		                rec_1.securityName              = "<c:out value="${dl.securityName}" />";
		                grid_result_data_1.push(rec_1);
		            </c:forEach>
	            </c:if>
	            
	            <c:if test="${loop.index == 1}">         	
		            <c:forEach items="${value}" var="dl">
		                rec_2 = {};
		                row_id_2+=1;
		                rec_2.id = "xenos_" + row_id_2;
		                rec_2.receivedCompNoticeInfoPk      = "<c:out value="${dl.receivedCompNoticeInfoPk}" />";
                        rec_2.settlementInfoPk              = "<c:out value="${dl.settlementInfoPk}" />";
		                rec_2.senderReferenceNo             = "<c:out value="${dl.senderReferenceNo}" />";
		                rec_2.secOurBank                    = "<c:out value="${dl.secOurBank}" />";
		                rec_2.secCpBank                     = "<c:out value="${dl.secCpBank}" />";
		                rec_2.cashOurBank                   = "<c:out value="${dl.cashOurBank}" />";
		                rec_2.cashCpBank                    = "<c:out value="${dl.cashCpBank}" />";
		                rec_2.instrumentCode                = "<c:out value="${dl.instrumentCode}" />";

                        <c:choose>
                            <c:when test="${dl.extSecurityId != null}">
                                rec_2.instrumentCode                = "<c:out value="${dl.extSecurityDisplayStr}" />";
                            </c:when>
                            <c:otherwise>
                                rec_2.instrumentCode                = "<c:out value="${dl.instrumentCode}" />";
                            </c:otherwise>
                        </c:choose>

		                rec_2.ccyCode                       = "<c:out value="${dl.ccyCode}" />";
		                rec_2.amountStr                     = "<c:out value="${dl.amountStr}" />";
		                rec_2.quantityStr                   = "<c:out value="${dl.quantityStr}" />";
                        rec_2.messageStatus                 = "<c:out value="${dl.messageStatus}" />";
                        rec_2.valueDateStr                  = "<c:out value="${dl.valueDateStr}" />";
                        rec_2.settleDateStr                 = "<c:out value="${dl.settleDateStr}" />";
		                rec_2.settlementStatus              = "<c:out value="${dl.settlementStatus}" />";
		                rec_2.deliverReceiveDisplay         = "<c:out value="${dl.deliverReceiveDisplay}" />";
                        rec_2.reasonCode                    = "<c:out value="${dl.reasonCode}" />";
                        rec_2.rcvdCompNoticeRefNo           = "<c:out value="${dl.rcvdCompNoticeRefNo}" />";
		                rec_2.securityName                  = "<c:out value="${dl.securityName}" />";
		                grid_result_data_2.push(rec_2);
		            </c:forEach>
	            </c:if>
            </c:forEach>
			</xenos:out>
            var grid_result_data = [grid_result_data_1, grid_result_data_2];
            var grid_result_columns = [grid_result_columns_1, grid_result_columns_2];
            var grid_result_settings = [grid_result_settings_1, grid_result_settings_2];


			//handler get called when stlresult is opened as a popup from trade detail screen
		  	var xenos$Dialog$Detail$Hook = function (container, btnContainer) {
		   		var details$View$print$Handler = function printHandler(e){
	        		e.preventDefault();
	        		$('.ui-dialog.topMost .ui-dialog-content').printArea(xenos.utils.defaultPrintOption);
	        	};
		  		var $btn1 = jQuery('.btn1', btnContainer);
	        	$btn1.children().first().html(xenos.title.printInfo);
	        	$btn1.show();
	        	$btn1.click(details$View$print$Handler);
			}


    	</jsp:body>
    </jsp:element>
	
</div>
</jsp:root>